// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/calibration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2fcalibration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2fcalibration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto;
namespace object_detection {
namespace protos {
class CalibrationConfig;
class CalibrationConfigDefaultTypeInternal;
extern CalibrationConfigDefaultTypeInternal _CalibrationConfig_default_instance_;
class ClassIdFunctionApproximations;
class ClassIdFunctionApproximationsDefaultTypeInternal;
extern ClassIdFunctionApproximationsDefaultTypeInternal _ClassIdFunctionApproximations_default_instance_;
class ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse;
class ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUseDefaultTypeInternal;
extern ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUseDefaultTypeInternal _ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_default_instance_;
class ClassIdSigmoidCalibrations;
class ClassIdSigmoidCalibrationsDefaultTypeInternal;
extern ClassIdSigmoidCalibrationsDefaultTypeInternal _ClassIdSigmoidCalibrations_default_instance_;
class ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse;
class ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUseDefaultTypeInternal;
extern ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUseDefaultTypeInternal _ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_default_instance_;
class FunctionApproximation;
class FunctionApproximationDefaultTypeInternal;
extern FunctionApproximationDefaultTypeInternal _FunctionApproximation_default_instance_;
class SigmoidCalibration;
class SigmoidCalibrationDefaultTypeInternal;
extern SigmoidCalibrationDefaultTypeInternal _SigmoidCalibration_default_instance_;
class SigmoidParameters;
class SigmoidParametersDefaultTypeInternal;
extern SigmoidParametersDefaultTypeInternal _SigmoidParameters_default_instance_;
class XYPairs;
class XYPairsDefaultTypeInternal;
extern XYPairsDefaultTypeInternal _XYPairs_default_instance_;
class XYPairs_XYPair;
class XYPairs_XYPairDefaultTypeInternal;
extern XYPairs_XYPairDefaultTypeInternal _XYPairs_XYPair_default_instance_;
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> ::object_detection::protos::CalibrationConfig* Arena::CreateMaybeMessage<::object_detection::protos::CalibrationConfig>(Arena*);
template<> ::object_detection::protos::ClassIdFunctionApproximations* Arena::CreateMaybeMessage<::object_detection::protos::ClassIdFunctionApproximations>(Arena*);
template<> ::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse* Arena::CreateMaybeMessage<::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse>(Arena*);
template<> ::object_detection::protos::ClassIdSigmoidCalibrations* Arena::CreateMaybeMessage<::object_detection::protos::ClassIdSigmoidCalibrations>(Arena*);
template<> ::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse* Arena::CreateMaybeMessage<::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse>(Arena*);
template<> ::object_detection::protos::FunctionApproximation* Arena::CreateMaybeMessage<::object_detection::protos::FunctionApproximation>(Arena*);
template<> ::object_detection::protos::SigmoidCalibration* Arena::CreateMaybeMessage<::object_detection::protos::SigmoidCalibration>(Arena*);
template<> ::object_detection::protos::SigmoidParameters* Arena::CreateMaybeMessage<::object_detection::protos::SigmoidParameters>(Arena*);
template<> ::object_detection::protos::XYPairs* Arena::CreateMaybeMessage<::object_detection::protos::XYPairs>(Arena*);
template<> ::object_detection::protos::XYPairs_XYPair* Arena::CreateMaybeMessage<::object_detection::protos::XYPairs_XYPair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace object_detection {
namespace protos {

enum TrainingDataType : int {
  DATA_TYPE_UNKNOWN = 0,
  ALL_CLASSES = 1,
  CLASS_SPECIFIC = 2
};
bool TrainingDataType_IsValid(int value);
constexpr TrainingDataType TrainingDataType_MIN = DATA_TYPE_UNKNOWN;
constexpr TrainingDataType TrainingDataType_MAX = CLASS_SPECIFIC;
constexpr int TrainingDataType_ARRAYSIZE = TrainingDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrainingDataType_descriptor();
template<typename T>
inline const std::string& TrainingDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrainingDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrainingDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrainingDataType_descriptor(), enum_t_value);
}
inline bool TrainingDataType_Parse(
    const std::string& name, TrainingDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrainingDataType>(
    TrainingDataType_descriptor(), name, value);
}
// ===================================================================

class CalibrationConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.CalibrationConfig) */ {
 public:
  CalibrationConfig();
  virtual ~CalibrationConfig();

  CalibrationConfig(const CalibrationConfig& from);
  CalibrationConfig(CalibrationConfig&& from) noexcept
    : CalibrationConfig() {
    *this = ::std::move(from);
  }

  inline CalibrationConfig& operator=(const CalibrationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationConfig& operator=(CalibrationConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibrationConfig& default_instance();

  enum CalibratorCase {
    kFunctionApproximation = 1,
    kClassIdFunctionApproximations = 2,
    kSigmoidCalibration = 3,
    kClassIdSigmoidCalibrations = 4,
    CALIBRATOR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibrationConfig* internal_default_instance() {
    return reinterpret_cast<const CalibrationConfig*>(
               &_CalibrationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CalibrationConfig& a, CalibrationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibrationConfig* New() const final {
    return CreateMaybeMessage<CalibrationConfig>(nullptr);
  }

  CalibrationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibrationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibrationConfig& from);
  void MergeFrom(const CalibrationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.CalibrationConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionApproximationFieldNumber = 1,
    kClassIdFunctionApproximationsFieldNumber = 2,
    kSigmoidCalibrationFieldNumber = 3,
    kClassIdSigmoidCalibrationsFieldNumber = 4,
  };
  // optional .object_detection.protos.FunctionApproximation function_approximation = 1;
  bool has_function_approximation() const;
  void clear_function_approximation();
  const ::object_detection::protos::FunctionApproximation& function_approximation() const;
  ::object_detection::protos::FunctionApproximation* release_function_approximation();
  ::object_detection::protos::FunctionApproximation* mutable_function_approximation();
  void set_allocated_function_approximation(::object_detection::protos::FunctionApproximation* function_approximation);

  // optional .object_detection.protos.ClassIdFunctionApproximations class_id_function_approximations = 2;
  bool has_class_id_function_approximations() const;
  void clear_class_id_function_approximations();
  const ::object_detection::protos::ClassIdFunctionApproximations& class_id_function_approximations() const;
  ::object_detection::protos::ClassIdFunctionApproximations* release_class_id_function_approximations();
  ::object_detection::protos::ClassIdFunctionApproximations* mutable_class_id_function_approximations();
  void set_allocated_class_id_function_approximations(::object_detection::protos::ClassIdFunctionApproximations* class_id_function_approximations);

  // optional .object_detection.protos.SigmoidCalibration sigmoid_calibration = 3;
  bool has_sigmoid_calibration() const;
  void clear_sigmoid_calibration();
  const ::object_detection::protos::SigmoidCalibration& sigmoid_calibration() const;
  ::object_detection::protos::SigmoidCalibration* release_sigmoid_calibration();
  ::object_detection::protos::SigmoidCalibration* mutable_sigmoid_calibration();
  void set_allocated_sigmoid_calibration(::object_detection::protos::SigmoidCalibration* sigmoid_calibration);

  // optional .object_detection.protos.ClassIdSigmoidCalibrations class_id_sigmoid_calibrations = 4;
  bool has_class_id_sigmoid_calibrations() const;
  void clear_class_id_sigmoid_calibrations();
  const ::object_detection::protos::ClassIdSigmoidCalibrations& class_id_sigmoid_calibrations() const;
  ::object_detection::protos::ClassIdSigmoidCalibrations* release_class_id_sigmoid_calibrations();
  ::object_detection::protos::ClassIdSigmoidCalibrations* mutable_class_id_sigmoid_calibrations();
  void set_allocated_class_id_sigmoid_calibrations(::object_detection::protos::ClassIdSigmoidCalibrations* class_id_sigmoid_calibrations);

  void clear_calibrator();
  CalibratorCase calibrator_case() const;
  // @@protoc_insertion_point(class_scope:object_detection.protos.CalibrationConfig)
 private:
  class _Internal;
  void set_has_function_approximation();
  void set_has_class_id_function_approximations();
  void set_has_sigmoid_calibration();
  void set_has_class_id_sigmoid_calibrations();

  inline bool has_calibrator() const;
  inline void clear_has_calibrator();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union CalibratorUnion {
    CalibratorUnion() {}
    ::object_detection::protos::FunctionApproximation* function_approximation_;
    ::object_detection::protos::ClassIdFunctionApproximations* class_id_function_approximations_;
    ::object_detection::protos::SigmoidCalibration* sigmoid_calibration_;
    ::object_detection::protos::ClassIdSigmoidCalibrations* class_id_sigmoid_calibrations_;
  } calibrator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class FunctionApproximation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.FunctionApproximation) */ {
 public:
  FunctionApproximation();
  virtual ~FunctionApproximation();

  FunctionApproximation(const FunctionApproximation& from);
  FunctionApproximation(FunctionApproximation&& from) noexcept
    : FunctionApproximation() {
    *this = ::std::move(from);
  }

  inline FunctionApproximation& operator=(const FunctionApproximation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionApproximation& operator=(FunctionApproximation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FunctionApproximation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionApproximation* internal_default_instance() {
    return reinterpret_cast<const FunctionApproximation*>(
               &_FunctionApproximation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FunctionApproximation& a, FunctionApproximation& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionApproximation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionApproximation* New() const final {
    return CreateMaybeMessage<FunctionApproximation>(nullptr);
  }

  FunctionApproximation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionApproximation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionApproximation& from);
  void MergeFrom(const FunctionApproximation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionApproximation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.FunctionApproximation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXYPairsFieldNumber = 1,
  };
  // optional .object_detection.protos.XYPairs x_y_pairs = 1;
  bool has_x_y_pairs() const;
  void clear_x_y_pairs();
  const ::object_detection::protos::XYPairs& x_y_pairs() const;
  ::object_detection::protos::XYPairs* release_x_y_pairs();
  ::object_detection::protos::XYPairs* mutable_x_y_pairs();
  void set_allocated_x_y_pairs(::object_detection::protos::XYPairs* x_y_pairs);

  // @@protoc_insertion_point(class_scope:object_detection.protos.FunctionApproximation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::object_detection::protos::XYPairs* x_y_pairs_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse();
  ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse& other);
  static const ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse*>(&_ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class ClassIdFunctionApproximations :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.ClassIdFunctionApproximations) */ {
 public:
  ClassIdFunctionApproximations();
  virtual ~ClassIdFunctionApproximations();

  ClassIdFunctionApproximations(const ClassIdFunctionApproximations& from);
  ClassIdFunctionApproximations(ClassIdFunctionApproximations&& from) noexcept
    : ClassIdFunctionApproximations() {
    *this = ::std::move(from);
  }

  inline ClassIdFunctionApproximations& operator=(const ClassIdFunctionApproximations& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassIdFunctionApproximations& operator=(ClassIdFunctionApproximations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassIdFunctionApproximations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassIdFunctionApproximations* internal_default_instance() {
    return reinterpret_cast<const ClassIdFunctionApproximations*>(
               &_ClassIdFunctionApproximations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClassIdFunctionApproximations& a, ClassIdFunctionApproximations& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassIdFunctionApproximations* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassIdFunctionApproximations* New() const final {
    return CreateMaybeMessage<ClassIdFunctionApproximations>(nullptr);
  }

  ClassIdFunctionApproximations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassIdFunctionApproximations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassIdFunctionApproximations& from);
  void MergeFrom(const ClassIdFunctionApproximations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassIdFunctionApproximations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.ClassIdFunctionApproximations";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClassIdXyPairsMapFieldNumber = 1,
  };
  // map<int32, .object_detection.protos.XYPairs> class_id_xy_pairs_map = 1;
  int class_id_xy_pairs_map_size() const;
  void clear_class_id_xy_pairs_map();
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >&
      class_id_xy_pairs_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >*
      mutable_class_id_xy_pairs_map();

  // @@protoc_insertion_point(class_scope:object_detection.protos.ClassIdFunctionApproximations)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > class_id_xy_pairs_map_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SigmoidCalibration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.SigmoidCalibration) */ {
 public:
  SigmoidCalibration();
  virtual ~SigmoidCalibration();

  SigmoidCalibration(const SigmoidCalibration& from);
  SigmoidCalibration(SigmoidCalibration&& from) noexcept
    : SigmoidCalibration() {
    *this = ::std::move(from);
  }

  inline SigmoidCalibration& operator=(const SigmoidCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigmoidCalibration& operator=(SigmoidCalibration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigmoidCalibration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigmoidCalibration* internal_default_instance() {
    return reinterpret_cast<const SigmoidCalibration*>(
               &_SigmoidCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SigmoidCalibration& a, SigmoidCalibration& b) {
    a.Swap(&b);
  }
  inline void Swap(SigmoidCalibration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigmoidCalibration* New() const final {
    return CreateMaybeMessage<SigmoidCalibration>(nullptr);
  }

  SigmoidCalibration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigmoidCalibration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigmoidCalibration& from);
  void MergeFrom(const SigmoidCalibration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigmoidCalibration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.SigmoidCalibration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigmoidParametersFieldNumber = 1,
  };
  // optional .object_detection.protos.SigmoidParameters sigmoid_parameters = 1;
  bool has_sigmoid_parameters() const;
  void clear_sigmoid_parameters();
  const ::object_detection::protos::SigmoidParameters& sigmoid_parameters() const;
  ::object_detection::protos::SigmoidParameters* release_sigmoid_parameters();
  ::object_detection::protos::SigmoidParameters* mutable_sigmoid_parameters();
  void set_allocated_sigmoid_parameters(::object_detection::protos::SigmoidParameters* sigmoid_parameters);

  // @@protoc_insertion_point(class_scope:object_detection.protos.SigmoidCalibration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::object_detection::protos::SigmoidParameters* sigmoid_parameters_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse();
  ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse& other);
  static const ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse*>(&_ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class ClassIdSigmoidCalibrations :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.ClassIdSigmoidCalibrations) */ {
 public:
  ClassIdSigmoidCalibrations();
  virtual ~ClassIdSigmoidCalibrations();

  ClassIdSigmoidCalibrations(const ClassIdSigmoidCalibrations& from);
  ClassIdSigmoidCalibrations(ClassIdSigmoidCalibrations&& from) noexcept
    : ClassIdSigmoidCalibrations() {
    *this = ::std::move(from);
  }

  inline ClassIdSigmoidCalibrations& operator=(const ClassIdSigmoidCalibrations& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassIdSigmoidCalibrations& operator=(ClassIdSigmoidCalibrations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassIdSigmoidCalibrations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassIdSigmoidCalibrations* internal_default_instance() {
    return reinterpret_cast<const ClassIdSigmoidCalibrations*>(
               &_ClassIdSigmoidCalibrations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClassIdSigmoidCalibrations& a, ClassIdSigmoidCalibrations& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassIdSigmoidCalibrations* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassIdSigmoidCalibrations* New() const final {
    return CreateMaybeMessage<ClassIdSigmoidCalibrations>(nullptr);
  }

  ClassIdSigmoidCalibrations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassIdSigmoidCalibrations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassIdSigmoidCalibrations& from);
  void MergeFrom(const ClassIdSigmoidCalibrations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassIdSigmoidCalibrations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.ClassIdSigmoidCalibrations";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClassIdSigmoidParametersMapFieldNumber = 1,
  };
  // map<int32, .object_detection.protos.SigmoidParameters> class_id_sigmoid_parameters_map = 1;
  int class_id_sigmoid_parameters_map_size() const;
  void clear_class_id_sigmoid_parameters_map();
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >&
      class_id_sigmoid_parameters_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >*
      mutable_class_id_sigmoid_parameters_map();

  // @@protoc_insertion_point(class_scope:object_detection.protos.ClassIdSigmoidCalibrations)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > class_id_sigmoid_parameters_map_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class XYPairs_XYPair :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.XYPairs.XYPair) */ {
 public:
  XYPairs_XYPair();
  virtual ~XYPairs_XYPair();

  XYPairs_XYPair(const XYPairs_XYPair& from);
  XYPairs_XYPair(XYPairs_XYPair&& from) noexcept
    : XYPairs_XYPair() {
    *this = ::std::move(from);
  }

  inline XYPairs_XYPair& operator=(const XYPairs_XYPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline XYPairs_XYPair& operator=(XYPairs_XYPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XYPairs_XYPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XYPairs_XYPair* internal_default_instance() {
    return reinterpret_cast<const XYPairs_XYPair*>(
               &_XYPairs_XYPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(XYPairs_XYPair& a, XYPairs_XYPair& b) {
    a.Swap(&b);
  }
  inline void Swap(XYPairs_XYPair* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XYPairs_XYPair* New() const final {
    return CreateMaybeMessage<XYPairs_XYPair>(nullptr);
  }

  XYPairs_XYPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XYPairs_XYPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XYPairs_XYPair& from);
  void MergeFrom(const XYPairs_XYPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XYPairs_XYPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.XYPairs.XYPair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.XYPairs.XYPair)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class XYPairs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.XYPairs) */ {
 public:
  XYPairs();
  virtual ~XYPairs();

  XYPairs(const XYPairs& from);
  XYPairs(XYPairs&& from) noexcept
    : XYPairs() {
    *this = ::std::move(from);
  }

  inline XYPairs& operator=(const XYPairs& from) {
    CopyFrom(from);
    return *this;
  }
  inline XYPairs& operator=(XYPairs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XYPairs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XYPairs* internal_default_instance() {
    return reinterpret_cast<const XYPairs*>(
               &_XYPairs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(XYPairs& a, XYPairs& b) {
    a.Swap(&b);
  }
  inline void Swap(XYPairs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XYPairs* New() const final {
    return CreateMaybeMessage<XYPairs>(nullptr);
  }

  XYPairs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XYPairs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XYPairs& from);
  void MergeFrom(const XYPairs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XYPairs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.XYPairs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef XYPairs_XYPair XYPair;

  // accessors -------------------------------------------------------

  enum : int {
    kXYPairFieldNumber = 1,
    kTrainingDataTypeFieldNumber = 2,
  };
  // repeated .object_detection.protos.XYPairs.XYPair x_y_pair = 1;
  int x_y_pair_size() const;
  void clear_x_y_pair();
  ::object_detection::protos::XYPairs_XYPair* mutable_x_y_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::XYPairs_XYPair >*
      mutable_x_y_pair();
  const ::object_detection::protos::XYPairs_XYPair& x_y_pair(int index) const;
  ::object_detection::protos::XYPairs_XYPair* add_x_y_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::XYPairs_XYPair >&
      x_y_pair() const;

  // optional .object_detection.protos.TrainingDataType training_data_type = 2;
  bool has_training_data_type() const;
  void clear_training_data_type();
  ::object_detection::protos::TrainingDataType training_data_type() const;
  void set_training_data_type(::object_detection::protos::TrainingDataType value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.XYPairs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::XYPairs_XYPair > x_y_pair_;
  int training_data_type_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SigmoidParameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.SigmoidParameters) */ {
 public:
  SigmoidParameters();
  virtual ~SigmoidParameters();

  SigmoidParameters(const SigmoidParameters& from);
  SigmoidParameters(SigmoidParameters&& from) noexcept
    : SigmoidParameters() {
    *this = ::std::move(from);
  }

  inline SigmoidParameters& operator=(const SigmoidParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigmoidParameters& operator=(SigmoidParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigmoidParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigmoidParameters* internal_default_instance() {
    return reinterpret_cast<const SigmoidParameters*>(
               &_SigmoidParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SigmoidParameters& a, SigmoidParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(SigmoidParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigmoidParameters* New() const final {
    return CreateMaybeMessage<SigmoidParameters>(nullptr);
  }

  SigmoidParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigmoidParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigmoidParameters& from);
  void MergeFrom(const SigmoidParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigmoidParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.SigmoidParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 2,
    kAFieldNumber = 1,
  };
  // optional float b = 2 [default = 0];
  bool has_b() const;
  void clear_b();
  float b() const;
  void set_b(float value);

  // optional float a = 1 [default = -1];
  bool has_a() const;
  void clear_a();
  float a() const;
  void set_a(float value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.SigmoidParameters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float b_;
  float a_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalibrationConfig

// optional .object_detection.protos.FunctionApproximation function_approximation = 1;
inline bool CalibrationConfig::has_function_approximation() const {
  return calibrator_case() == kFunctionApproximation;
}
inline void CalibrationConfig::set_has_function_approximation() {
  _oneof_case_[0] = kFunctionApproximation;
}
inline void CalibrationConfig::clear_function_approximation() {
  if (has_function_approximation()) {
    delete calibrator_.function_approximation_;
    clear_has_calibrator();
  }
}
inline ::object_detection::protos::FunctionApproximation* CalibrationConfig::release_function_approximation() {
  // @@protoc_insertion_point(field_release:object_detection.protos.CalibrationConfig.function_approximation)
  if (has_function_approximation()) {
    clear_has_calibrator();
      ::object_detection::protos::FunctionApproximation* temp = calibrator_.function_approximation_;
    calibrator_.function_approximation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::FunctionApproximation& CalibrationConfig::function_approximation() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.CalibrationConfig.function_approximation)
  return has_function_approximation()
      ? *calibrator_.function_approximation_
      : *reinterpret_cast< ::object_detection::protos::FunctionApproximation*>(&::object_detection::protos::_FunctionApproximation_default_instance_);
}
inline ::object_detection::protos::FunctionApproximation* CalibrationConfig::mutable_function_approximation() {
  if (!has_function_approximation()) {
    clear_calibrator();
    set_has_function_approximation();
    calibrator_.function_approximation_ = CreateMaybeMessage< ::object_detection::protos::FunctionApproximation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.CalibrationConfig.function_approximation)
  return calibrator_.function_approximation_;
}

// optional .object_detection.protos.ClassIdFunctionApproximations class_id_function_approximations = 2;
inline bool CalibrationConfig::has_class_id_function_approximations() const {
  return calibrator_case() == kClassIdFunctionApproximations;
}
inline void CalibrationConfig::set_has_class_id_function_approximations() {
  _oneof_case_[0] = kClassIdFunctionApproximations;
}
inline void CalibrationConfig::clear_class_id_function_approximations() {
  if (has_class_id_function_approximations()) {
    delete calibrator_.class_id_function_approximations_;
    clear_has_calibrator();
  }
}
inline ::object_detection::protos::ClassIdFunctionApproximations* CalibrationConfig::release_class_id_function_approximations() {
  // @@protoc_insertion_point(field_release:object_detection.protos.CalibrationConfig.class_id_function_approximations)
  if (has_class_id_function_approximations()) {
    clear_has_calibrator();
      ::object_detection::protos::ClassIdFunctionApproximations* temp = calibrator_.class_id_function_approximations_;
    calibrator_.class_id_function_approximations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::ClassIdFunctionApproximations& CalibrationConfig::class_id_function_approximations() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.CalibrationConfig.class_id_function_approximations)
  return has_class_id_function_approximations()
      ? *calibrator_.class_id_function_approximations_
      : *reinterpret_cast< ::object_detection::protos::ClassIdFunctionApproximations*>(&::object_detection::protos::_ClassIdFunctionApproximations_default_instance_);
}
inline ::object_detection::protos::ClassIdFunctionApproximations* CalibrationConfig::mutable_class_id_function_approximations() {
  if (!has_class_id_function_approximations()) {
    clear_calibrator();
    set_has_class_id_function_approximations();
    calibrator_.class_id_function_approximations_ = CreateMaybeMessage< ::object_detection::protos::ClassIdFunctionApproximations >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.CalibrationConfig.class_id_function_approximations)
  return calibrator_.class_id_function_approximations_;
}

// optional .object_detection.protos.SigmoidCalibration sigmoid_calibration = 3;
inline bool CalibrationConfig::has_sigmoid_calibration() const {
  return calibrator_case() == kSigmoidCalibration;
}
inline void CalibrationConfig::set_has_sigmoid_calibration() {
  _oneof_case_[0] = kSigmoidCalibration;
}
inline void CalibrationConfig::clear_sigmoid_calibration() {
  if (has_sigmoid_calibration()) {
    delete calibrator_.sigmoid_calibration_;
    clear_has_calibrator();
  }
}
inline ::object_detection::protos::SigmoidCalibration* CalibrationConfig::release_sigmoid_calibration() {
  // @@protoc_insertion_point(field_release:object_detection.protos.CalibrationConfig.sigmoid_calibration)
  if (has_sigmoid_calibration()) {
    clear_has_calibrator();
      ::object_detection::protos::SigmoidCalibration* temp = calibrator_.sigmoid_calibration_;
    calibrator_.sigmoid_calibration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::SigmoidCalibration& CalibrationConfig::sigmoid_calibration() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.CalibrationConfig.sigmoid_calibration)
  return has_sigmoid_calibration()
      ? *calibrator_.sigmoid_calibration_
      : *reinterpret_cast< ::object_detection::protos::SigmoidCalibration*>(&::object_detection::protos::_SigmoidCalibration_default_instance_);
}
inline ::object_detection::protos::SigmoidCalibration* CalibrationConfig::mutable_sigmoid_calibration() {
  if (!has_sigmoid_calibration()) {
    clear_calibrator();
    set_has_sigmoid_calibration();
    calibrator_.sigmoid_calibration_ = CreateMaybeMessage< ::object_detection::protos::SigmoidCalibration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.CalibrationConfig.sigmoid_calibration)
  return calibrator_.sigmoid_calibration_;
}

// optional .object_detection.protos.ClassIdSigmoidCalibrations class_id_sigmoid_calibrations = 4;
inline bool CalibrationConfig::has_class_id_sigmoid_calibrations() const {
  return calibrator_case() == kClassIdSigmoidCalibrations;
}
inline void CalibrationConfig::set_has_class_id_sigmoid_calibrations() {
  _oneof_case_[0] = kClassIdSigmoidCalibrations;
}
inline void CalibrationConfig::clear_class_id_sigmoid_calibrations() {
  if (has_class_id_sigmoid_calibrations()) {
    delete calibrator_.class_id_sigmoid_calibrations_;
    clear_has_calibrator();
  }
}
inline ::object_detection::protos::ClassIdSigmoidCalibrations* CalibrationConfig::release_class_id_sigmoid_calibrations() {
  // @@protoc_insertion_point(field_release:object_detection.protos.CalibrationConfig.class_id_sigmoid_calibrations)
  if (has_class_id_sigmoid_calibrations()) {
    clear_has_calibrator();
      ::object_detection::protos::ClassIdSigmoidCalibrations* temp = calibrator_.class_id_sigmoid_calibrations_;
    calibrator_.class_id_sigmoid_calibrations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::ClassIdSigmoidCalibrations& CalibrationConfig::class_id_sigmoid_calibrations() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.CalibrationConfig.class_id_sigmoid_calibrations)
  return has_class_id_sigmoid_calibrations()
      ? *calibrator_.class_id_sigmoid_calibrations_
      : *reinterpret_cast< ::object_detection::protos::ClassIdSigmoidCalibrations*>(&::object_detection::protos::_ClassIdSigmoidCalibrations_default_instance_);
}
inline ::object_detection::protos::ClassIdSigmoidCalibrations* CalibrationConfig::mutable_class_id_sigmoid_calibrations() {
  if (!has_class_id_sigmoid_calibrations()) {
    clear_calibrator();
    set_has_class_id_sigmoid_calibrations();
    calibrator_.class_id_sigmoid_calibrations_ = CreateMaybeMessage< ::object_detection::protos::ClassIdSigmoidCalibrations >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.CalibrationConfig.class_id_sigmoid_calibrations)
  return calibrator_.class_id_sigmoid_calibrations_;
}

inline bool CalibrationConfig::has_calibrator() const {
  return calibrator_case() != CALIBRATOR_NOT_SET;
}
inline void CalibrationConfig::clear_has_calibrator() {
  _oneof_case_[0] = CALIBRATOR_NOT_SET;
}
inline CalibrationConfig::CalibratorCase CalibrationConfig::calibrator_case() const {
  return CalibrationConfig::CalibratorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FunctionApproximation

// optional .object_detection.protos.XYPairs x_y_pairs = 1;
inline bool FunctionApproximation::has_x_y_pairs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionApproximation::clear_x_y_pairs() {
  if (x_y_pairs_ != nullptr) x_y_pairs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::object_detection::protos::XYPairs& FunctionApproximation::x_y_pairs() const {
  const ::object_detection::protos::XYPairs* p = x_y_pairs_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FunctionApproximation.x_y_pairs)
  return p != nullptr ? *p : *reinterpret_cast<const ::object_detection::protos::XYPairs*>(
      &::object_detection::protos::_XYPairs_default_instance_);
}
inline ::object_detection::protos::XYPairs* FunctionApproximation::release_x_y_pairs() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FunctionApproximation.x_y_pairs)
  _has_bits_[0] &= ~0x00000001u;
  ::object_detection::protos::XYPairs* temp = x_y_pairs_;
  x_y_pairs_ = nullptr;
  return temp;
}
inline ::object_detection::protos::XYPairs* FunctionApproximation::mutable_x_y_pairs() {
  _has_bits_[0] |= 0x00000001u;
  if (x_y_pairs_ == nullptr) {
    auto* p = CreateMaybeMessage<::object_detection::protos::XYPairs>(GetArenaNoVirtual());
    x_y_pairs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FunctionApproximation.x_y_pairs)
  return x_y_pairs_;
}
inline void FunctionApproximation::set_allocated_x_y_pairs(::object_detection::protos::XYPairs* x_y_pairs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete x_y_pairs_;
  }
  if (x_y_pairs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      x_y_pairs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x_y_pairs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_y_pairs_ = x_y_pairs;
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FunctionApproximation.x_y_pairs)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClassIdFunctionApproximations

// map<int32, .object_detection.protos.XYPairs> class_id_xy_pairs_map = 1;
inline int ClassIdFunctionApproximations::class_id_xy_pairs_map_size() const {
  return class_id_xy_pairs_map_.size();
}
inline void ClassIdFunctionApproximations::clear_class_id_xy_pairs_map() {
  class_id_xy_pairs_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >&
ClassIdFunctionApproximations::class_id_xy_pairs_map() const {
  // @@protoc_insertion_point(field_map:object_detection.protos.ClassIdFunctionApproximations.class_id_xy_pairs_map)
  return class_id_xy_pairs_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >*
ClassIdFunctionApproximations::mutable_class_id_xy_pairs_map() {
  // @@protoc_insertion_point(field_mutable_map:object_detection.protos.ClassIdFunctionApproximations.class_id_xy_pairs_map)
  return class_id_xy_pairs_map_.MutableMap();
}

// -------------------------------------------------------------------

// SigmoidCalibration

// optional .object_detection.protos.SigmoidParameters sigmoid_parameters = 1;
inline bool SigmoidCalibration::has_sigmoid_parameters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidCalibration::clear_sigmoid_parameters() {
  if (sigmoid_parameters_ != nullptr) sigmoid_parameters_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::object_detection::protos::SigmoidParameters& SigmoidCalibration::sigmoid_parameters() const {
  const ::object_detection::protos::SigmoidParameters* p = sigmoid_parameters_;
  // @@protoc_insertion_point(field_get:object_detection.protos.SigmoidCalibration.sigmoid_parameters)
  return p != nullptr ? *p : *reinterpret_cast<const ::object_detection::protos::SigmoidParameters*>(
      &::object_detection::protos::_SigmoidParameters_default_instance_);
}
inline ::object_detection::protos::SigmoidParameters* SigmoidCalibration::release_sigmoid_parameters() {
  // @@protoc_insertion_point(field_release:object_detection.protos.SigmoidCalibration.sigmoid_parameters)
  _has_bits_[0] &= ~0x00000001u;
  ::object_detection::protos::SigmoidParameters* temp = sigmoid_parameters_;
  sigmoid_parameters_ = nullptr;
  return temp;
}
inline ::object_detection::protos::SigmoidParameters* SigmoidCalibration::mutable_sigmoid_parameters() {
  _has_bits_[0] |= 0x00000001u;
  if (sigmoid_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::object_detection::protos::SigmoidParameters>(GetArenaNoVirtual());
    sigmoid_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.SigmoidCalibration.sigmoid_parameters)
  return sigmoid_parameters_;
}
inline void SigmoidCalibration::set_allocated_sigmoid_parameters(::object_detection::protos::SigmoidParameters* sigmoid_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sigmoid_parameters_;
  }
  if (sigmoid_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sigmoid_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigmoid_parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sigmoid_parameters_ = sigmoid_parameters;
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.SigmoidCalibration.sigmoid_parameters)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClassIdSigmoidCalibrations

// map<int32, .object_detection.protos.SigmoidParameters> class_id_sigmoid_parameters_map = 1;
inline int ClassIdSigmoidCalibrations::class_id_sigmoid_parameters_map_size() const {
  return class_id_sigmoid_parameters_map_.size();
}
inline void ClassIdSigmoidCalibrations::clear_class_id_sigmoid_parameters_map() {
  class_id_sigmoid_parameters_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >&
ClassIdSigmoidCalibrations::class_id_sigmoid_parameters_map() const {
  // @@protoc_insertion_point(field_map:object_detection.protos.ClassIdSigmoidCalibrations.class_id_sigmoid_parameters_map)
  return class_id_sigmoid_parameters_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >*
ClassIdSigmoidCalibrations::mutable_class_id_sigmoid_parameters_map() {
  // @@protoc_insertion_point(field_mutable_map:object_detection.protos.ClassIdSigmoidCalibrations.class_id_sigmoid_parameters_map)
  return class_id_sigmoid_parameters_map_.MutableMap();
}

// -------------------------------------------------------------------

// XYPairs_XYPair

// optional float x = 1;
inline bool XYPairs_XYPair::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XYPairs_XYPair::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float XYPairs_XYPair::x() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.XYPairs.XYPair.x)
  return x_;
}
inline void XYPairs_XYPair::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.XYPairs.XYPair.x)
}

// optional float y = 2;
inline bool XYPairs_XYPair::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XYPairs_XYPair::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float XYPairs_XYPair::y() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.XYPairs.XYPair.y)
  return y_;
}
inline void XYPairs_XYPair::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.XYPairs.XYPair.y)
}

// -------------------------------------------------------------------

// XYPairs

// repeated .object_detection.protos.XYPairs.XYPair x_y_pair = 1;
inline int XYPairs::x_y_pair_size() const {
  return x_y_pair_.size();
}
inline void XYPairs::clear_x_y_pair() {
  x_y_pair_.Clear();
}
inline ::object_detection::protos::XYPairs_XYPair* XYPairs::mutable_x_y_pair(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.XYPairs.x_y_pair)
  return x_y_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::XYPairs_XYPair >*
XYPairs::mutable_x_y_pair() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.XYPairs.x_y_pair)
  return &x_y_pair_;
}
inline const ::object_detection::protos::XYPairs_XYPair& XYPairs::x_y_pair(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.XYPairs.x_y_pair)
  return x_y_pair_.Get(index);
}
inline ::object_detection::protos::XYPairs_XYPair* XYPairs::add_x_y_pair() {
  // @@protoc_insertion_point(field_add:object_detection.protos.XYPairs.x_y_pair)
  return x_y_pair_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::object_detection::protos::XYPairs_XYPair >&
XYPairs::x_y_pair() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.XYPairs.x_y_pair)
  return x_y_pair_;
}

// optional .object_detection.protos.TrainingDataType training_data_type = 2;
inline bool XYPairs::has_training_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XYPairs::clear_training_data_type() {
  training_data_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::object_detection::protos::TrainingDataType XYPairs::training_data_type() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.XYPairs.training_data_type)
  return static_cast< ::object_detection::protos::TrainingDataType >(training_data_type_);
}
inline void XYPairs::set_training_data_type(::object_detection::protos::TrainingDataType value) {
  assert(::object_detection::protos::TrainingDataType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  training_data_type_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.XYPairs.training_data_type)
}

// -------------------------------------------------------------------

// SigmoidParameters

// optional float a = 1 [default = -1];
inline bool SigmoidParameters::has_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SigmoidParameters::clear_a() {
  a_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SigmoidParameters::a() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SigmoidParameters.a)
  return a_;
}
inline void SigmoidParameters::set_a(float value) {
  _has_bits_[0] |= 0x00000002u;
  a_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SigmoidParameters.a)
}

// optional float b = 2 [default = 0];
inline bool SigmoidParameters::has_b() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidParameters::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SigmoidParameters::b() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SigmoidParameters.b)
  return b_;
}
inline void SigmoidParameters::set_b(float value) {
  _has_bits_[0] |= 0x00000001u;
  b_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SigmoidParameters.b)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::object_detection::protos::TrainingDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::object_detection::protos::TrainingDataType>() {
  return ::object_detection::protos::TrainingDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2fcalibration_2eproto
