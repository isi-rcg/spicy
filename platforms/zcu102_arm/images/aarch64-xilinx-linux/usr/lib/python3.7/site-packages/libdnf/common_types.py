# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_common_types')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_common_types')
    _common_types = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_common_types', [dirname(__file__)])
        except ImportError:
            import _common_types
            return _common_types
        try:
            _mod = imp.load_module('_common_types', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _common_types = swig_import_helper()
    del swig_import_helper
else:
    import _common_types
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common_types.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _common_types.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _common_types.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _common_types.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _common_types.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _common_types.SwigPyIterator_equal(self, x)

    def copy(self):
        return _common_types.SwigPyIterator_copy(self)

    def next(self):
        return _common_types.SwigPyIterator_next(self)

    def __next__(self):
        return _common_types.SwigPyIterator___next__(self)

    def previous(self):
        return _common_types.SwigPyIterator_previous(self)

    def advance(self, n):
        return _common_types.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _common_types.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _common_types.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _common_types.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _common_types.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _common_types.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _common_types.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _common_types.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SetString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.SetString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.SetString___nonzero__(self)

    def __bool__(self):
        return _common_types.SetString___bool__(self)

    def __len__(self):
        return _common_types.SetString___len__(self)

    def append(self, x):
        return _common_types.SetString_append(self, x)

    def __contains__(self, x):
        return _common_types.SetString___contains__(self, x)

    def __getitem__(self, i):
        return _common_types.SetString___getitem__(self, i)

    def add(self, x):
        return _common_types.SetString_add(self, x)

    def discard(self, x):
        return _common_types.SetString_discard(self, x)

    def __init__(self, *args):
        this = _common_types.new_SetString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _common_types.SetString_empty(self)

    def size(self):
        return _common_types.SetString_size(self)

    def clear(self):
        return _common_types.SetString_clear(self)

    def swap(self, v):
        return _common_types.SetString_swap(self, v)

    def count(self, x):
        return _common_types.SetString_count(self, x)

    def begin(self):
        return _common_types.SetString_begin(self)

    def end(self):
        return _common_types.SetString_end(self)

    def rbegin(self):
        return _common_types.SetString_rbegin(self)

    def rend(self):
        return _common_types.SetString_rend(self)

    def erase(self, *args):
        return _common_types.SetString_erase(self, *args)

    def find(self, x):
        return _common_types.SetString_find(self, x)

    def lower_bound(self, x):
        return _common_types.SetString_lower_bound(self, x)

    def upper_bound(self, x):
        return _common_types.SetString_upper_bound(self, x)

    def equal_range(self, x):
        return _common_types.SetString_equal_range(self, x)

    def insert(self, __x):
        return _common_types.SetString_insert(self, __x)
    __swig_destroy__ = _common_types.delete_SetString
    __del__ = lambda self: None
SetString_swigregister = _common_types.SetString_swigregister
SetString_swigregister(SetString)

class PairStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairStringString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _common_types.new_PairStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _common_types.PairStringString_first_set
    __swig_getmethods__["first"] = _common_types.PairStringString_first_get
    if _newclass:
        first = _swig_property(_common_types.PairStringString_first_get, _common_types.PairStringString_first_set)
    __swig_setmethods__["second"] = _common_types.PairStringString_second_set
    __swig_getmethods__["second"] = _common_types.PairStringString_second_get
    if _newclass:
        second = _swig_property(_common_types.PairStringString_second_get, _common_types.PairStringString_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _common_types.delete_PairStringString
    __del__ = lambda self: None
PairStringString_swigregister = _common_types.PairStringString_swigregister
PairStringString_swigregister(PairStringString)

class VectorPairStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPairStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPairStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.VectorPairStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.VectorPairStringString___nonzero__(self)

    def __bool__(self):
        return _common_types.VectorPairStringString___bool__(self)

    def __len__(self):
        return _common_types.VectorPairStringString___len__(self)

    def __getslice__(self, i, j):
        return _common_types.VectorPairStringString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _common_types.VectorPairStringString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _common_types.VectorPairStringString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _common_types.VectorPairStringString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _common_types.VectorPairStringString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _common_types.VectorPairStringString___setitem__(self, *args)

    def pop(self):
        return _common_types.VectorPairStringString_pop(self)

    def append(self, x):
        return _common_types.VectorPairStringString_append(self, x)

    def empty(self):
        return _common_types.VectorPairStringString_empty(self)

    def size(self):
        return _common_types.VectorPairStringString_size(self)

    def swap(self, v):
        return _common_types.VectorPairStringString_swap(self, v)

    def begin(self):
        return _common_types.VectorPairStringString_begin(self)

    def end(self):
        return _common_types.VectorPairStringString_end(self)

    def rbegin(self):
        return _common_types.VectorPairStringString_rbegin(self)

    def rend(self):
        return _common_types.VectorPairStringString_rend(self)

    def clear(self):
        return _common_types.VectorPairStringString_clear(self)

    def get_allocator(self):
        return _common_types.VectorPairStringString_get_allocator(self)

    def pop_back(self):
        return _common_types.VectorPairStringString_pop_back(self)

    def erase(self, *args):
        return _common_types.VectorPairStringString_erase(self, *args)

    def __init__(self, *args):
        this = _common_types.new_VectorPairStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _common_types.VectorPairStringString_push_back(self, x)

    def front(self):
        return _common_types.VectorPairStringString_front(self)

    def back(self):
        return _common_types.VectorPairStringString_back(self)

    def assign(self, n, x):
        return _common_types.VectorPairStringString_assign(self, n, x)

    def resize(self, *args):
        return _common_types.VectorPairStringString_resize(self, *args)

    def insert(self, *args):
        return _common_types.VectorPairStringString_insert(self, *args)

    def reserve(self, n):
        return _common_types.VectorPairStringString_reserve(self, n)

    def capacity(self):
        return _common_types.VectorPairStringString_capacity(self)
    __swig_destroy__ = _common_types.delete_VectorPairStringString
    __del__ = lambda self: None
VectorPairStringString_swigregister = _common_types.VectorPairStringString_swigregister
VectorPairStringString_swigregister(VectorPairStringString)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.MapStringString___nonzero__(self)

    def __bool__(self):
        return _common_types.MapStringString___bool__(self)

    def __len__(self):
        return _common_types.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _common_types.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _common_types.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _common_types.MapStringString_has_key(self, key)

    def keys(self):
        return _common_types.MapStringString_keys(self)

    def values(self):
        return _common_types.MapStringString_values(self)

    def items(self):
        return _common_types.MapStringString_items(self)

    def __contains__(self, key):
        return _common_types.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _common_types.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _common_types.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _common_types.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _common_types.MapStringString_asdict(self)

    def __init__(self, *args):
        this = _common_types.new_MapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _common_types.MapStringString_empty(self)

    def size(self):
        return _common_types.MapStringString_size(self)

    def swap(self, v):
        return _common_types.MapStringString_swap(self, v)

    def begin(self):
        return _common_types.MapStringString_begin(self)

    def end(self):
        return _common_types.MapStringString_end(self)

    def rbegin(self):
        return _common_types.MapStringString_rbegin(self)

    def rend(self):
        return _common_types.MapStringString_rend(self)

    def clear(self):
        return _common_types.MapStringString_clear(self)

    def get_allocator(self):
        return _common_types.MapStringString_get_allocator(self)

    def count(self, x):
        return _common_types.MapStringString_count(self, x)

    def erase(self, *args):
        return _common_types.MapStringString_erase(self, *args)

    def find(self, x):
        return _common_types.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _common_types.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _common_types.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _common_types.delete_MapStringString
    __del__ = lambda self: None
MapStringString_swigregister = _common_types.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

class MapStringMapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringMapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringMapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.MapStringMapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.MapStringMapStringString___nonzero__(self)

    def __bool__(self):
        return _common_types.MapStringMapStringString___bool__(self)

    def __len__(self):
        return _common_types.MapStringMapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _common_types.MapStringMapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _common_types.MapStringMapStringString___delitem__(self, key)

    def has_key(self, key):
        return _common_types.MapStringMapStringString_has_key(self, key)

    def keys(self):
        return _common_types.MapStringMapStringString_keys(self)

    def values(self):
        return _common_types.MapStringMapStringString_values(self)

    def items(self):
        return _common_types.MapStringMapStringString_items(self)

    def __contains__(self, key):
        return _common_types.MapStringMapStringString___contains__(self, key)

    def key_iterator(self):
        return _common_types.MapStringMapStringString_key_iterator(self)

    def value_iterator(self):
        return _common_types.MapStringMapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _common_types.MapStringMapStringString___setitem__(self, *args)

    def asdict(self):
        return _common_types.MapStringMapStringString_asdict(self)

    def __init__(self, *args):
        this = _common_types.new_MapStringMapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _common_types.MapStringMapStringString_empty(self)

    def size(self):
        return _common_types.MapStringMapStringString_size(self)

    def swap(self, v):
        return _common_types.MapStringMapStringString_swap(self, v)

    def begin(self):
        return _common_types.MapStringMapStringString_begin(self)

    def end(self):
        return _common_types.MapStringMapStringString_end(self)

    def rbegin(self):
        return _common_types.MapStringMapStringString_rbegin(self)

    def rend(self):
        return _common_types.MapStringMapStringString_rend(self)

    def clear(self):
        return _common_types.MapStringMapStringString_clear(self)

    def get_allocator(self):
        return _common_types.MapStringMapStringString_get_allocator(self)

    def count(self, x):
        return _common_types.MapStringMapStringString_count(self, x)

    def erase(self, *args):
        return _common_types.MapStringMapStringString_erase(self, *args)

    def find(self, x):
        return _common_types.MapStringMapStringString_find(self, x)

    def lower_bound(self, x):
        return _common_types.MapStringMapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _common_types.MapStringMapStringString_upper_bound(self, x)
    __swig_destroy__ = _common_types.delete_MapStringMapStringString
    __del__ = lambda self: None
MapStringMapStringString_swigregister = _common_types.MapStringMapStringString_swigregister
MapStringMapStringString_swigregister(MapStringMapStringString)

class MapStringPairStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringPairStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringPairStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.MapStringPairStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.MapStringPairStringString___nonzero__(self)

    def __bool__(self):
        return _common_types.MapStringPairStringString___bool__(self)

    def __len__(self):
        return _common_types.MapStringPairStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _common_types.MapStringPairStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _common_types.MapStringPairStringString___delitem__(self, key)

    def has_key(self, key):
        return _common_types.MapStringPairStringString_has_key(self, key)

    def keys(self):
        return _common_types.MapStringPairStringString_keys(self)

    def values(self):
        return _common_types.MapStringPairStringString_values(self)

    def items(self):
        return _common_types.MapStringPairStringString_items(self)

    def __contains__(self, key):
        return _common_types.MapStringPairStringString___contains__(self, key)

    def key_iterator(self):
        return _common_types.MapStringPairStringString_key_iterator(self)

    def value_iterator(self):
        return _common_types.MapStringPairStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _common_types.MapStringPairStringString___setitem__(self, *args)

    def asdict(self):
        return _common_types.MapStringPairStringString_asdict(self)

    def __init__(self, *args):
        this = _common_types.new_MapStringPairStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _common_types.MapStringPairStringString_empty(self)

    def size(self):
        return _common_types.MapStringPairStringString_size(self)

    def swap(self, v):
        return _common_types.MapStringPairStringString_swap(self, v)

    def begin(self):
        return _common_types.MapStringPairStringString_begin(self)

    def end(self):
        return _common_types.MapStringPairStringString_end(self)

    def rbegin(self):
        return _common_types.MapStringPairStringString_rbegin(self)

    def rend(self):
        return _common_types.MapStringPairStringString_rend(self)

    def clear(self):
        return _common_types.MapStringPairStringString_clear(self)

    def get_allocator(self):
        return _common_types.MapStringPairStringString_get_allocator(self)

    def count(self, x):
        return _common_types.MapStringPairStringString_count(self, x)

    def erase(self, *args):
        return _common_types.MapStringPairStringString_erase(self, *args)

    def find(self, x):
        return _common_types.MapStringPairStringString_find(self, x)

    def lower_bound(self, x):
        return _common_types.MapStringPairStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _common_types.MapStringPairStringString_upper_bound(self, x)
    __swig_destroy__ = _common_types.delete_MapStringPairStringString
    __del__ = lambda self: None
MapStringPairStringString_swigregister = _common_types.MapStringPairStringString_swigregister
MapStringPairStringString_swigregister(MapStringPairStringString)

class StopIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StopIterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _common_types.new_StopIterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common_types.delete_StopIterator
    __del__ = lambda self: None
StopIterator_swigregister = _common_types.StopIterator_swigregister
StopIterator_swigregister(StopIterator)

class PreserveOrderMapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreserveOrderMapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PreserveOrderMapStringString, name)
    __repr__ = _swig_repr

    def empty(self):
        return _common_types.PreserveOrderMapStringString_empty(self)

    def size(self):
        return _common_types.PreserveOrderMapStringString_size(self)

    def max_size(self):
        return _common_types.PreserveOrderMapStringString_max_size(self)

    def reserve(self, newCapacity):
        return _common_types.PreserveOrderMapStringString_reserve(self, newCapacity)

    def capacity(self):
        return _common_types.PreserveOrderMapStringString_capacity(self)

    def shrink_to_fit(self):
        return _common_types.PreserveOrderMapStringString_shrink_to_fit(self)

    def clear(self):
        return _common_types.PreserveOrderMapStringString_clear(self)

    def erase(self, key):
        return _common_types.PreserveOrderMapStringString_erase(self, key)

    def __getitem__(self, key):
        return _common_types.PreserveOrderMapStringString___getitem__(self, key)

    def __setitem__(self, key, value):
        return _common_types.PreserveOrderMapStringString___setitem__(self, key, value)

    def __delitem__(self, key):
        return _common_types.PreserveOrderMapStringString___delitem__(self, key)

    def __contains__(self, key):
        return _common_types.PreserveOrderMapStringString___contains__(self, key)

    def __len__(self):
        return _common_types.PreserveOrderMapStringString___len__(self)

    def __iter__(self):
        return _common_types.PreserveOrderMapStringString___iter__(self)

    def __init__(self):
        this = _common_types.new_PreserveOrderMapStringString()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common_types.delete_PreserveOrderMapStringString
    __del__ = lambda self: None
PreserveOrderMapStringString_swigregister = _common_types.PreserveOrderMapStringString_swigregister
PreserveOrderMapStringString_swigregister(PreserveOrderMapStringString)

class PreserveOrderMapStringStringIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreserveOrderMapStringStringIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PreserveOrderMapStringStringIterator, name)
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        this = _common_types.new_PreserveOrderMapStringStringIterator(_cur, _end)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _common_types.PreserveOrderMapStringStringIterator___iter__(self)
    __swig_setmethods__["cur"] = _common_types.PreserveOrderMapStringStringIterator_cur_set
    __swig_getmethods__["cur"] = _common_types.PreserveOrderMapStringStringIterator_cur_get
    if _newclass:
        cur = _swig_property(_common_types.PreserveOrderMapStringStringIterator_cur_get, _common_types.PreserveOrderMapStringStringIterator_cur_set)
    __swig_setmethods__["end"] = _common_types.PreserveOrderMapStringStringIterator_end_set
    __swig_getmethods__["end"] = _common_types.PreserveOrderMapStringStringIterator_end_get
    if _newclass:
        end = _swig_property(_common_types.PreserveOrderMapStringStringIterator_end_get, _common_types.PreserveOrderMapStringStringIterator_end_set)

    def __next__(self):
        return _common_types.PreserveOrderMapStringStringIterator___next__(self)

    def next(self):
        return _common_types.PreserveOrderMapStringStringIterator_next(self)
    __swig_destroy__ = _common_types.delete_PreserveOrderMapStringStringIterator
    __del__ = lambda self: None
PreserveOrderMapStringStringIterator_swigregister = _common_types.PreserveOrderMapStringStringIterator_swigregister
PreserveOrderMapStringStringIterator_swigregister(PreserveOrderMapStringStringIterator)

class PreserveOrderMapStringPreserveOrderMapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreserveOrderMapStringPreserveOrderMapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PreserveOrderMapStringPreserveOrderMapStringString, name)
    __repr__ = _swig_repr

    def empty(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_empty(self)

    def size(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_size(self)

    def max_size(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_max_size(self)

    def reserve(self, newCapacity):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_reserve(self, newCapacity)

    def capacity(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_capacity(self)

    def shrink_to_fit(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_shrink_to_fit(self)

    def clear(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_clear(self)

    def erase(self, key):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_erase(self, key)

    def __getitem__(self, key):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___getitem__(self, key)

    def __setitem__(self, key, value):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___setitem__(self, key, value)

    def __delitem__(self, key):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___delitem__(self, key)

    def __contains__(self, key):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___contains__(self, key)

    def __len__(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___len__(self)

    def __iter__(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___iter__(self)

    def __init__(self):
        this = _common_types.new_PreserveOrderMapStringPreserveOrderMapStringString()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common_types.delete_PreserveOrderMapStringPreserveOrderMapStringString
    __del__ = lambda self: None
PreserveOrderMapStringPreserveOrderMapStringString_swigregister = _common_types.PreserveOrderMapStringPreserveOrderMapStringString_swigregister
PreserveOrderMapStringPreserveOrderMapStringString_swigregister(PreserveOrderMapStringPreserveOrderMapStringString)

class PreserveOrderMapStringPreserveOrderMapStringStringIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreserveOrderMapStringPreserveOrderMapStringStringIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PreserveOrderMapStringPreserveOrderMapStringStringIterator, name)
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        this = _common_types.new_PreserveOrderMapStringPreserveOrderMapStringStringIterator(_cur, _end)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator___iter__(self)
    __swig_setmethods__["cur"] = _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_cur_set
    __swig_getmethods__["cur"] = _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_cur_get
    if _newclass:
        cur = _swig_property(_common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_cur_get, _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_cur_set)
    __swig_setmethods__["end"] = _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_end_set
    __swig_getmethods__["end"] = _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_end_get
    if _newclass:
        end = _swig_property(_common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_end_get, _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_end_set)

    def __next__(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator___next__(self)

    def next(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_next(self)
    __swig_destroy__ = _common_types.delete_PreserveOrderMapStringPreserveOrderMapStringStringIterator
    __del__ = lambda self: None
PreserveOrderMapStringPreserveOrderMapStringStringIterator_swigregister = _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_swigregister
PreserveOrderMapStringPreserveOrderMapStringStringIterator_swigregister(PreserveOrderMapStringPreserveOrderMapStringStringIterator)

# This file is compatible with both classic and new-style classes.


