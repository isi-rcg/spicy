"""
 Copyright 2019 Xilinx Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

from typing import Any, List, NoReturn, Optional
from op import Op
from xir.wrapper import *


class Subgraph(object):
    def __init_(self) -> NoReturn:
        self.__xir_subgraph: XirSubgraph = None

    @property
    def metadata(self) -> XirSubgraph:
        """Get metadata of Subgraph object.

        Returns
        -------
        XirSubgraph
            XirSubgraph object.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        return self.__xir_subgraph

    @metadata.setter
    def metadata(self, xir_subgraph: XirSubgraph) -> NoReturn:
        """Set metadata of Subgraph object.

        Parameters
        ----------
        xir_subgraph : XirSubgraph
            XirSubgraph object.
        """
        self.__xir_subgraph = xir_subgraph

    @property
    def children(self) -> Optional[List["Subgraph"]]:
        """Get list of sub-subgraphs of subgraph.

        Returns
        -------
        Optional[List[Subgraph]]
            list of Subgraph objects if child subgraph exists; otherwise, None.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        xir_children = XirSubgraphHelper.get_children(self.__xir_subgraph)
        child_subgraph_list = []
        for xir_child in xir_children:
            # create wrapper class
            sub = Subgraph()
            sub.metadata = xir_child
            child_subgraph_list.append(sub)
        return child_subgraph_list

    @property
    def depth(self) -> int:
        """Get depth of Subgraph object.

        Returns
        -------
        int
            depth of Subgraph object.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        return self.__xir_subgraph.depth

    @property
    def is_root(self) -> bool:
        """Check if Subgraph object is root subgraph or not.

        Returns
        -------
        bool
            True, if Subgraph object is root subgraph; otherwise, False.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        return self.__xir_subgraph.is_root

    @property
    def is_leaf(self) -> bool:
        """Check if Subgraph object is leaf subgraph or not.

        Returns
        -------
        bool
            True, if Subgraph object is leaf; otherwise, False.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        return self.__xir_subgraph.is_leaf

    @property
    def num_child(self) -> int:
        """Get number of child subgraphs.

        Returns
        -------
        int
            number of child subgraphs.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        return self.__xir_subgraph.num_child

    @property
    def num_op(self) -> int:
        """Get number of ops belonging to subgraph.

        Returns
        -------
        int
            number of ops.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        return self.__xir_subgraph.num_op

    @property
    def parent(self) -> Optional["Subgraph"]:
        """Get parent subgraph of subgraph.

        Returns
        -------
        Optional[Subgraph]
            a Subgraph object if parent exists; otherwise, None.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        xir_subgraph = self.__xir_subgraph.get_parent()
        if xir_subgraph is None:
            return None
        # create wrapper class
        sub = Subgraph()
        sub.metadata = xir_subgraph
        return sub

    def is_child(self, subgraph: "Subgraph") -> bool:
        """Check if current Subgraph object is child subgraph of a specific subgraph.

        Parameters
        ----------
        subgraph : Subgraph
            target Subgraph object.

        Returns
        -------
        bool
            True, if current Subgraph object is child of argument subgraph; otherwise, False.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        return self.__xir_subgraph.is_child(subgraph.metadata)

    def find_child_subgraph(self, name: str) -> Optional["Subgraph"]:
        """Find the child subgraph which contains the specified Op object.

        Parameters
        ----------
        name : str
            name of Op object.

        Returns
        -------
        Optional[Subgraph]
            Subgraph object if found; otherwise, None.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        xir_child_sub = self.__xir_subgraph.find_child_subgraph(name)
        if xir_child_sub is not None:
            # create wrapper class
            child_sub = Subgraph()
            child_sub.metadata = xir_child_sub
            return child_sub
        return None

    def merge_child_subgraph(self, child_subgraph_list: List["Subgraph"]) -> "Subgraph":
        """Merge multiple child subgraphs into a single subgraph.

        Parameters
        ----------
        child_subgraph_list : List[Subgraph]
            list of Subgraph objects to be merged.

        Returns
        -------
        Subgraph
            Subgraph object generated after merging.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        xir_sub = self.__xir_subgraph.merge_child_subgraph(set(child_subgraph_list))
        # create wrapper class
        sub = Subgraph()
        sub.metadata = xir_sub
        return sub

    def topsort(self) -> List[Op]:
        """Sort Op objects in subgraph in topological order.

        Returns
        -------
        List[Op]
            list of sorted Op objects.
        """
        return self.__xir_subgraph.topsort()

    def topsort_child_subgraph(self) -> List["Subgraph"]:
        """Sort child subgraphs in topological order.

        Returns
        -------
        List[Subgraph]
            list of sorted Subgraph objects.
        """
        return self.__xir_subgraph.topsort_child_subgraph()

    def get_ops(self) -> List[Op]:
        """Get ops belonging to subgraph.

        Returns
        -------
        List[Op]
            list of ops.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        xir_ops = list(self.__xir_subgraph.get_ops())
        ops: List[Op] = []
        for xir_op in xir_ops:
            # create wrapper class
            op = Op()
            op.metadata = xir_op
            ops.append(op)
        return ops

    def has_op(self, name: str) -> bool:
        """Check if an Op object belongs to subgraph.

        Parameters
        ----------
        name : str
            name of Op object to be checked.

        Returns
        -------
        bool
            True, if the Op object belongs to subgraph; otherwise, False.
        """
        assert (
            self.__xir_subgraph is not None
        ), "Not initialized with XirSubgraph object."
        return self.__xir_subgraph.has_op(name)

    def has_attr(self, name: str) -> bool:
        """Check if subgraph has an attribute of specified name.

        Parameters
        ----------
        name : str
            attribute name.

        Returns
        -------
        bool
            True, if subgraph has an attribute of specified name; otherwise, False.
        """
        return self.__xir_subgraph.has_attr(name)
