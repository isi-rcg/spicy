"""
 Copyright 2019 Xilinx Inc.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
     http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

from typing import List, NoReturn, Optional
from xir.wrapper import XirDataType, XirTensor, XirTensorHelper, XirTensorDataType
import numpy as np
import uuid

NUMPY_DTYPE_TO_XIR_DTYPE = {
    "int8": XirDataType.INT8,
    "uint8": XirDataType.UINT8,
    "int16": XirDataType.INT16,
    "uint16": XirDataType.UINT16,
    "int32": XirDataType.INT32,
    "uint32": XirDataType.UINT32,
    "int64": XirDataType.INT64,
    "uint64": XirDataType.UINT64,
    "float32": XirDataType.FLOAT32,
    "float64": XirDataType.FLOAT64,
}

XIR_DTYPE_TO_NUMPY_DTYPE = {
    XirDataType.INT8: "int8",
    XirDataType.UINT8: "uint8",
    XirDataType.INT16: "int16",
    XirDataType.UINT16: "uint16",
    XirDataType.INT32: "int32",
    XirDataType.UINT32: "uint32",
    XirDataType.INT64: "int64",
    XirDataType.UINT64: "uint64",
    XirDataType.FLOAT32: "float32",
    XirDataType.FLOAT64: "float64",
}

XIR_TENSOR_DTYPE_TO_STR = {
    XirTensorDataType.INT: "int",
    XirTensorDataType.UINT: "uint",
    XirTensorDataType.FLOAT: "float",
}


class Tensor(object):
    def __init__(self, content: np.ndarray = None) -> NoReturn:
        self.__tensor: XirTensor = None
        # set name of XirTensor
        name: str = str(uuid.uuid4())
        # content
        if content is not None:
            dtype: XirDataType = NUMPY_DTYPE_TO_XIR_DTYPE.get(content.dtype.name)
            shape: List[int] = list(content.shape)
            # create tensor with specified name, shape and data type
            self.__tensor = XirTensorHelper.create_tensor(name, shape, dtype)
        else:
            # create tensor with specified name, shape and data type
            self.__tensor = XirTensorHelper.create_tensor(
                name, [1, 1, 1, 1], XirDataType.FLOAT32
            )

    def reshape(self, shape: List[int]) -> NoReturn:
        """Reshape Tensor object.
        
        Parameters
        ----------
        shape : List[int]
            new shape.
        """
        assert shape is not None, "'shape' should not be None."
        self.__tensor.reshape(shape)
        self.__shape = self.__tensor.shape

    # ! to be deprecated
    def clone(self) -> "Tensor":
        """Make a clone of Tensor object.
        
        Returns
        -------
        Tensor
            clone Tensor object.
        """
        return Tensor(self.content)

    @property
    def name(self) -> str:
        """Get name of Tensor object.
        
        Returns
        -------
        str
            name of Tensor object.
        """
        return self.__tensor.name

    @property
    def shape(self) -> List[int]:
        """Get shape of Tensor object.
        
        Returns
        -------
        List[int]
            shape of Tensor object.
        """
        return self.__tensor.shape

    @property
    def ndim(self) -> int:
        """Get dimensions of Tensor object.
        
        Returns
        -------
        int
            dimensions.
        """
        return len(self.shape)

    @property
    def dtype(self) -> str:
        """Get data type of Tensor object.
        
        Returns
        -------
        str
            name of data type.
        """
        return XIR_TENSOR_DTYPE_TO_STR.get(self.__tensor.dtype) + str(
            self.__tensor.bit_width
        )

    # ! to be deprecated
    @property
    def content(self) -> np.ndarray:
        """Get data content of Tensor object.
        
        Returns
        -------
        np.ndarray
            data content.
        """
        return XirTensorHelper.retrieve(self.__tensor)

    @property
    def metadata(self) -> XirTensor:
        """Get metadata of Tensor
        
        Returns
        -------
        XirTensor
            XirTensor object.
        """
        return self.__tensor

    @metadata.setter
    def metadata(self, xir_tensor: XirTensor) -> NoReturn:
        """Set metadata of Tensor.
        
        Parameters
        ----------
        xir_tensor : XirTensor
            XirTensor object.
        """
        assert xir_tensor is not None, "'xir_tensor' should not be None."
        self.__tensor = xir_tensor

    @property
    def dims (self) -> List[int]:
        return self.__tensor.shape;
