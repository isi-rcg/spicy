/* Generated by ./xlat/gen.sh from ./xlat/sigfpe_codes.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(FPE_INTDIV) || (defined(HAVE_DECL_FPE_INTDIV) && HAVE_DECL_FPE_INTDIV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_INTDIV) == (1), "FPE_INTDIV != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_INTDIV 1
#endif
#if defined(FPE_INTOVF) || (defined(HAVE_DECL_FPE_INTOVF) && HAVE_DECL_FPE_INTOVF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_INTOVF) == (2), "FPE_INTOVF != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_INTOVF 2
#endif
#if defined(FPE_FLTDIV) || (defined(HAVE_DECL_FPE_FLTDIV) && HAVE_DECL_FPE_FLTDIV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_FLTDIV) == (3), "FPE_FLTDIV != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_FLTDIV 3
#endif
#if defined(FPE_FLTOVF) || (defined(HAVE_DECL_FPE_FLTOVF) && HAVE_DECL_FPE_FLTOVF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_FLTOVF) == (4), "FPE_FLTOVF != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_FLTOVF 4
#endif
#if defined(FPE_FLTUND) || (defined(HAVE_DECL_FPE_FLTUND) && HAVE_DECL_FPE_FLTUND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_FLTUND) == (5), "FPE_FLTUND != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_FLTUND 5
#endif
#if defined(FPE_FLTRES) || (defined(HAVE_DECL_FPE_FLTRES) && HAVE_DECL_FPE_FLTRES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_FLTRES) == (6), "FPE_FLTRES != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_FLTRES 6
#endif
#if defined(FPE_FLTINV) || (defined(HAVE_DECL_FPE_FLTINV) && HAVE_DECL_FPE_FLTINV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_FLTINV) == (7), "FPE_FLTINV != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_FLTINV 7
#endif
#if defined(FPE_FLTSUB) || (defined(HAVE_DECL_FPE_FLTSUB) && HAVE_DECL_FPE_FLTSUB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_FLTSUB) == (8), "FPE_FLTSUB != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_FLTSUB 8
#endif
#if defined(FPE_FLTUNK) || (defined(HAVE_DECL_FPE_FLTUNK) && HAVE_DECL_FPE_FLTUNK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_FLTUNK) == (14), "FPE_FLTUNK != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_FLTUNK 14
#endif
#if defined(FPE_CONDTRAP) || (defined(HAVE_DECL_FPE_CONDTRAP) && HAVE_DECL_FPE_CONDTRAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FPE_CONDTRAP) == (15), "FPE_CONDTRAP != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FPE_CONDTRAP 15
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat sigfpe_codes[];

# else

static const struct xlat_data sigfpe_codes_xdata[] = {
 XLAT(FPE_INTDIV),
 XLAT(FPE_INTOVF),
 XLAT(FPE_FLTDIV),
 XLAT(FPE_FLTOVF),
 XLAT(FPE_FLTUND),
 XLAT(FPE_FLTRES),
 XLAT(FPE_FLTINV),
 XLAT(FPE_FLTSUB),
#if defined(FPE_MDAOVF) || (defined(HAVE_DECL_FPE_MDAOVF) && HAVE_DECL_FPE_MDAOVF)
  XLAT(FPE_MDAOVF),
#endif
#if defined(__FPE_DECOVF) || (defined(HAVE_DECL___FPE_DECOVF) && HAVE_DECL___FPE_DECOVF)
  XLAT(__FPE_DECOVF),
#endif
#if defined(__FPE_DECDIV) || (defined(HAVE_DECL___FPE_DECDIV) && HAVE_DECL___FPE_DECDIV)
  XLAT(__FPE_DECDIV),
#endif
#if defined(__FPE_DECERR) || (defined(HAVE_DECL___FPE_DECERR) && HAVE_DECL___FPE_DECERR)
  XLAT(__FPE_DECERR),
#endif
#if defined(__FPE_INVASC) || (defined(HAVE_DECL___FPE_INVASC) && HAVE_DECL___FPE_INVASC)
  XLAT(__FPE_INVASC),
#endif
#if defined(__FPE_INVDEC) || (defined(HAVE_DECL___FPE_INVDEC) && HAVE_DECL___FPE_INVDEC)
  XLAT(__FPE_INVDEC),
#endif
 XLAT(FPE_FLTUNK),
 XLAT(FPE_CONDTRAP),
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat sigfpe_codes[1] = { {
 .data = sigfpe_codes_xdata,
 .size = ARRAY_SIZE(sigfpe_codes_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
