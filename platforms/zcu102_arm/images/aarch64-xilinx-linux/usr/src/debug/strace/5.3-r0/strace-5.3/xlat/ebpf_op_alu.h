/* Generated by ./xlat/gen.sh from ./xlat/ebpf_op_alu.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BPF_MOV) || (defined(HAVE_DECL_BPF_MOV) && HAVE_DECL_BPF_MOV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MOV) == (0xb0), "BPF_MOV != 0xb0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MOV 0xb0
#endif
#if defined(BPF_ARSH) || (defined(HAVE_DECL_BPF_ARSH) && HAVE_DECL_BPF_ARSH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_ARSH) == (0xc0), "BPF_ARSH != 0xc0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_ARSH 0xc0
#endif
#if defined(BPF_END) || (defined(HAVE_DECL_BPF_END) && HAVE_DECL_BPF_END)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_END) == (0xd0), "BPF_END != 0xd0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_END 0xd0
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ebpf_op_alu in mpers mode

# else

static const struct xlat_data ebpf_op_alu_xdata[] = {
 XLAT(BPF_MOV),
 XLAT(BPF_ARSH),
 XLAT(BPF_END),
};
static
const struct xlat ebpf_op_alu[1] = { {
 .data = ebpf_op_alu_xdata,
 .size = ARRAY_SIZE(ebpf_op_alu_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
