/* Generated by ./xlat/gen.sh from ./xlat/bpf_commands.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BPF_MAP_CREATE) || (defined(HAVE_DECL_BPF_MAP_CREATE) && HAVE_DECL_BPF_MAP_CREATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_CREATE) == (0), "BPF_MAP_CREATE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_CREATE 0
#endif
#if defined(BPF_MAP_LOOKUP_ELEM) || (defined(HAVE_DECL_BPF_MAP_LOOKUP_ELEM) && HAVE_DECL_BPF_MAP_LOOKUP_ELEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_LOOKUP_ELEM) == (1), "BPF_MAP_LOOKUP_ELEM != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_LOOKUP_ELEM 1
#endif
#if defined(BPF_MAP_UPDATE_ELEM) || (defined(HAVE_DECL_BPF_MAP_UPDATE_ELEM) && HAVE_DECL_BPF_MAP_UPDATE_ELEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_UPDATE_ELEM) == (2), "BPF_MAP_UPDATE_ELEM != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_UPDATE_ELEM 2
#endif
#if defined(BPF_MAP_DELETE_ELEM) || (defined(HAVE_DECL_BPF_MAP_DELETE_ELEM) && HAVE_DECL_BPF_MAP_DELETE_ELEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_DELETE_ELEM) == (3), "BPF_MAP_DELETE_ELEM != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_DELETE_ELEM 3
#endif
#if defined(BPF_MAP_GET_NEXT_KEY) || (defined(HAVE_DECL_BPF_MAP_GET_NEXT_KEY) && HAVE_DECL_BPF_MAP_GET_NEXT_KEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_GET_NEXT_KEY) == (4), "BPF_MAP_GET_NEXT_KEY != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_GET_NEXT_KEY 4
#endif
#if defined(BPF_PROG_LOAD) || (defined(HAVE_DECL_BPF_PROG_LOAD) && HAVE_DECL_BPF_PROG_LOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_LOAD) == (5), "BPF_PROG_LOAD != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_LOAD 5
#endif
#if defined(BPF_OBJ_PIN) || (defined(HAVE_DECL_BPF_OBJ_PIN) && HAVE_DECL_BPF_OBJ_PIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_OBJ_PIN) == (6), "BPF_OBJ_PIN != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_OBJ_PIN 6
#endif
#if defined(BPF_OBJ_GET) || (defined(HAVE_DECL_BPF_OBJ_GET) && HAVE_DECL_BPF_OBJ_GET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_OBJ_GET) == (7), "BPF_OBJ_GET != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_OBJ_GET 7
#endif
#if defined(BPF_PROG_ATTACH) || (defined(HAVE_DECL_BPF_PROG_ATTACH) && HAVE_DECL_BPF_PROG_ATTACH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_ATTACH) == (8), "BPF_PROG_ATTACH != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_ATTACH 8
#endif
#if defined(BPF_PROG_DETACH) || (defined(HAVE_DECL_BPF_PROG_DETACH) && HAVE_DECL_BPF_PROG_DETACH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_DETACH) == (9), "BPF_PROG_DETACH != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_DETACH 9
#endif
#if defined(BPF_PROG_TEST_RUN) || (defined(HAVE_DECL_BPF_PROG_TEST_RUN) && HAVE_DECL_BPF_PROG_TEST_RUN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_TEST_RUN) == (10), "BPF_PROG_TEST_RUN != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_TEST_RUN 10
#endif
#if defined(BPF_PROG_GET_NEXT_ID) || (defined(HAVE_DECL_BPF_PROG_GET_NEXT_ID) && HAVE_DECL_BPF_PROG_GET_NEXT_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_GET_NEXT_ID) == (11), "BPF_PROG_GET_NEXT_ID != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_GET_NEXT_ID 11
#endif
#if defined(BPF_MAP_GET_NEXT_ID) || (defined(HAVE_DECL_BPF_MAP_GET_NEXT_ID) && HAVE_DECL_BPF_MAP_GET_NEXT_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_GET_NEXT_ID) == (12), "BPF_MAP_GET_NEXT_ID != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_GET_NEXT_ID 12
#endif
#if defined(BPF_PROG_GET_FD_BY_ID) || (defined(HAVE_DECL_BPF_PROG_GET_FD_BY_ID) && HAVE_DECL_BPF_PROG_GET_FD_BY_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_GET_FD_BY_ID) == (13), "BPF_PROG_GET_FD_BY_ID != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_GET_FD_BY_ID 13
#endif
#if defined(BPF_MAP_GET_FD_BY_ID) || (defined(HAVE_DECL_BPF_MAP_GET_FD_BY_ID) && HAVE_DECL_BPF_MAP_GET_FD_BY_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_GET_FD_BY_ID) == (14), "BPF_MAP_GET_FD_BY_ID != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_GET_FD_BY_ID 14
#endif
#if defined(BPF_OBJ_GET_INFO_BY_FD) || (defined(HAVE_DECL_BPF_OBJ_GET_INFO_BY_FD) && HAVE_DECL_BPF_OBJ_GET_INFO_BY_FD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_OBJ_GET_INFO_BY_FD) == (15), "BPF_OBJ_GET_INFO_BY_FD != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_OBJ_GET_INFO_BY_FD 15
#endif
#if defined(BPF_PROG_QUERY) || (defined(HAVE_DECL_BPF_PROG_QUERY) && HAVE_DECL_BPF_PROG_QUERY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_QUERY) == (16), "BPF_PROG_QUERY != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_QUERY 16
#endif
#if defined(BPF_RAW_TRACEPOINT_OPEN) || (defined(HAVE_DECL_BPF_RAW_TRACEPOINT_OPEN) && HAVE_DECL_BPF_RAW_TRACEPOINT_OPEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_RAW_TRACEPOINT_OPEN) == (17), "BPF_RAW_TRACEPOINT_OPEN != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_RAW_TRACEPOINT_OPEN 17
#endif
#if defined(BPF_BTF_LOAD) || (defined(HAVE_DECL_BPF_BTF_LOAD) && HAVE_DECL_BPF_BTF_LOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_BTF_LOAD) == (18), "BPF_BTF_LOAD != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_BTF_LOAD 18
#endif
#if defined(BPF_BTF_GET_FD_BY_ID) || (defined(HAVE_DECL_BPF_BTF_GET_FD_BY_ID) && HAVE_DECL_BPF_BTF_GET_FD_BY_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_BTF_GET_FD_BY_ID) == (19), "BPF_BTF_GET_FD_BY_ID != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_BTF_GET_FD_BY_ID 19
#endif
#if defined(BPF_TASK_FD_QUERY) || (defined(HAVE_DECL_BPF_TASK_FD_QUERY) && HAVE_DECL_BPF_TASK_FD_QUERY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_TASK_FD_QUERY) == (20), "BPF_TASK_FD_QUERY != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_TASK_FD_QUERY 20
#endif
#if defined(BPF_MAP_LOOKUP_AND_DELETE_ELEM) || (defined(HAVE_DECL_BPF_MAP_LOOKUP_AND_DELETE_ELEM) && HAVE_DECL_BPF_MAP_LOOKUP_AND_DELETE_ELEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_LOOKUP_AND_DELETE_ELEM) == (21), "BPF_MAP_LOOKUP_AND_DELETE_ELEM != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_LOOKUP_AND_DELETE_ELEM 21
#endif
#if defined(BPF_MAP_FREEZE) || (defined(HAVE_DECL_BPF_MAP_FREEZE) && HAVE_DECL_BPF_MAP_FREEZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_FREEZE) == (22), "BPF_MAP_FREEZE != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_FREEZE 22
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat bpf_commands in mpers mode

# else

static const struct xlat_data bpf_commands_xdata[] = {
 [BPF_MAP_CREATE] = XLAT(BPF_MAP_CREATE),
 [BPF_MAP_LOOKUP_ELEM] = XLAT(BPF_MAP_LOOKUP_ELEM),
 [BPF_MAP_UPDATE_ELEM] = XLAT(BPF_MAP_UPDATE_ELEM),
 [BPF_MAP_DELETE_ELEM] = XLAT(BPF_MAP_DELETE_ELEM),
 [BPF_MAP_GET_NEXT_KEY] = XLAT(BPF_MAP_GET_NEXT_KEY),
 [BPF_PROG_LOAD] = XLAT(BPF_PROG_LOAD),
 [BPF_OBJ_PIN] = XLAT(BPF_OBJ_PIN),
 [BPF_OBJ_GET] = XLAT(BPF_OBJ_GET),
 [BPF_PROG_ATTACH] = XLAT(BPF_PROG_ATTACH),
 [BPF_PROG_DETACH] = XLAT(BPF_PROG_DETACH),
 [BPF_PROG_TEST_RUN] = XLAT(BPF_PROG_TEST_RUN),
 [BPF_PROG_GET_NEXT_ID] = XLAT(BPF_PROG_GET_NEXT_ID),
 [BPF_MAP_GET_NEXT_ID] = XLAT(BPF_MAP_GET_NEXT_ID),
 [BPF_PROG_GET_FD_BY_ID] = XLAT(BPF_PROG_GET_FD_BY_ID),
 [BPF_MAP_GET_FD_BY_ID] = XLAT(BPF_MAP_GET_FD_BY_ID),
 [BPF_OBJ_GET_INFO_BY_FD] = XLAT(BPF_OBJ_GET_INFO_BY_FD),
 [BPF_PROG_QUERY] = XLAT(BPF_PROG_QUERY),
 [BPF_RAW_TRACEPOINT_OPEN] = XLAT(BPF_RAW_TRACEPOINT_OPEN),
 [BPF_BTF_LOAD] = XLAT(BPF_BTF_LOAD),
 [BPF_BTF_GET_FD_BY_ID] = XLAT(BPF_BTF_GET_FD_BY_ID),
 [BPF_TASK_FD_QUERY] = XLAT(BPF_TASK_FD_QUERY),
 [BPF_MAP_LOOKUP_AND_DELETE_ELEM] = XLAT(BPF_MAP_LOOKUP_AND_DELETE_ELEM),
 [BPF_MAP_FREEZE] = XLAT(BPF_MAP_FREEZE),
};
static
const struct xlat bpf_commands[1] = { {
 .data = bpf_commands_xdata,
 .size = ARRAY_SIZE(bpf_commands_xdata),
 .type = XT_INDEXED,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
