/* Generated by ./xlat/gen.sh from ./xlat/ptrace_syscall_info_op.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"


#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ptrace_syscall_info_op in mpers mode

# else

static const struct xlat_data ptrace_syscall_info_op_xdata[] = {
#if defined(PTRACE_SYSCALL_INFO_NONE) || (defined(HAVE_DECL_PTRACE_SYSCALL_INFO_NONE) && HAVE_DECL_PTRACE_SYSCALL_INFO_NONE)
  [PTRACE_SYSCALL_INFO_NONE] = XLAT(PTRACE_SYSCALL_INFO_NONE),
#endif
#if defined(PTRACE_SYSCALL_INFO_ENTRY) || (defined(HAVE_DECL_PTRACE_SYSCALL_INFO_ENTRY) && HAVE_DECL_PTRACE_SYSCALL_INFO_ENTRY)
  [PTRACE_SYSCALL_INFO_ENTRY] = XLAT(PTRACE_SYSCALL_INFO_ENTRY),
#endif
#if defined(PTRACE_SYSCALL_INFO_EXIT) || (defined(HAVE_DECL_PTRACE_SYSCALL_INFO_EXIT) && HAVE_DECL_PTRACE_SYSCALL_INFO_EXIT)
  [PTRACE_SYSCALL_INFO_EXIT] = XLAT(PTRACE_SYSCALL_INFO_EXIT),
#endif
#if defined(PTRACE_SYSCALL_INFO_SECCOMP) || (defined(HAVE_DECL_PTRACE_SYSCALL_INFO_SECCOMP) && HAVE_DECL_PTRACE_SYSCALL_INFO_SECCOMP)
  [PTRACE_SYSCALL_INFO_SECCOMP] = XLAT(PTRACE_SYSCALL_INFO_SECCOMP),
#endif
};
static
const struct xlat ptrace_syscall_info_op[1] = { {
 .data = ptrace_syscall_info_op_xdata,
 .size = ARRAY_SIZE(ptrace_syscall_info_op_xdata),
 .type = XT_INDEXED,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
