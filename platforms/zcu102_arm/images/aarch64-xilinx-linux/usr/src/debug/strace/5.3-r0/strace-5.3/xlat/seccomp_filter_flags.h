/* Generated by ./xlat/gen.sh from ./xlat/seccomp_filter_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SECCOMP_FILTER_FLAG_TSYNC) || (defined(HAVE_DECL_SECCOMP_FILTER_FLAG_TSYNC) && HAVE_DECL_SECCOMP_FILTER_FLAG_TSYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECCOMP_FILTER_FLAG_TSYNC) == (1), "SECCOMP_FILTER_FLAG_TSYNC != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECCOMP_FILTER_FLAG_TSYNC 1
#endif
#if defined(SECCOMP_FILTER_FLAG_LOG) || (defined(HAVE_DECL_SECCOMP_FILTER_FLAG_LOG) && HAVE_DECL_SECCOMP_FILTER_FLAG_LOG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECCOMP_FILTER_FLAG_LOG) == (2), "SECCOMP_FILTER_FLAG_LOG != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECCOMP_FILTER_FLAG_LOG 2
#endif
#if defined(SECCOMP_FILTER_FLAG_SPEC_ALLOW) || (defined(HAVE_DECL_SECCOMP_FILTER_FLAG_SPEC_ALLOW) && HAVE_DECL_SECCOMP_FILTER_FLAG_SPEC_ALLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECCOMP_FILTER_FLAG_SPEC_ALLOW) == (4), "SECCOMP_FILTER_FLAG_SPEC_ALLOW != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECCOMP_FILTER_FLAG_SPEC_ALLOW 4
#endif
#if defined(SECCOMP_FILTER_FLAG_NEW_LISTENER) || (defined(HAVE_DECL_SECCOMP_FILTER_FLAG_NEW_LISTENER) && HAVE_DECL_SECCOMP_FILTER_FLAG_NEW_LISTENER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECCOMP_FILTER_FLAG_NEW_LISTENER) == (8), "SECCOMP_FILTER_FLAG_NEW_LISTENER != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECCOMP_FILTER_FLAG_NEW_LISTENER 8
#endif

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

static const struct xlat_data seccomp_filter_flags_xdata[] = {
 XLAT(SECCOMP_FILTER_FLAG_TSYNC),
 XLAT(SECCOMP_FILTER_FLAG_LOG),
 XLAT(SECCOMP_FILTER_FLAG_SPEC_ALLOW),
 XLAT(SECCOMP_FILTER_FLAG_NEW_LISTENER),
};
const struct xlat seccomp_filter_flags[1] = { {
 .data = seccomp_filter_flags_xdata,
 .size = ARRAY_SIZE(seccomp_filter_flags_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
