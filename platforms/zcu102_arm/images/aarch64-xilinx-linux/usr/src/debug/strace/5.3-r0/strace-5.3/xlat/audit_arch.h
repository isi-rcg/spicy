/* Generated by ./xlat/gen.sh from ./xlat/audit_arch.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#ifndef __AUDIT_ARCH_CONVENTION_MIPS64_N32
# define __AUDIT_ARCH_CONVENTION_MIPS64_N32	0x20000000
#endif
#ifndef __AUDIT_ARCH_64BIT
# define __AUDIT_ARCH_64BIT	0x80000000
#endif
#ifndef __AUDIT_ARCH_LE
# define __AUDIT_ARCH_LE	0x40000000
#endif
#if defined(AUDIT_ARCH_AARCH64) || (defined(HAVE_DECL_AUDIT_ARCH_AARCH64) && HAVE_DECL_AUDIT_ARCH_AARCH64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_AARCH64) == ((EM_AARCH64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_AARCH64 != (EM_AARCH64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_AARCH64 (EM_AARCH64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ALPHA) || (defined(HAVE_DECL_AUDIT_ARCH_ALPHA) && HAVE_DECL_AUDIT_ARCH_ALPHA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ALPHA) == ((EM_ALPHA|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_ALPHA != (EM_ALPHA|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ALPHA (EM_ALPHA|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ARCOMPACT) || (defined(HAVE_DECL_AUDIT_ARCH_ARCOMPACT) && HAVE_DECL_AUDIT_ARCH_ARCOMPACT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARCOMPACT) == ((EM_ARCOMPACT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_ARCOMPACT != (EM_ARCOMPACT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARCOMPACT (EM_ARCOMPACT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ARCOMPACTBE) || (defined(HAVE_DECL_AUDIT_ARCH_ARCOMPACTBE) && HAVE_DECL_AUDIT_ARCH_ARCOMPACTBE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARCOMPACTBE) == ((EM_ARCOMPACT)), "AUDIT_ARCH_ARCOMPACTBE != (EM_ARCOMPACT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARCOMPACTBE (EM_ARCOMPACT)
#endif
#if defined(AUDIT_ARCH_ARCV2) || (defined(HAVE_DECL_AUDIT_ARCH_ARCV2) && HAVE_DECL_AUDIT_ARCH_ARCV2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARCV2) == ((EM_ARCV2|__AUDIT_ARCH_LE)), "AUDIT_ARCH_ARCV2 != (EM_ARCV2|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARCV2 (EM_ARCV2|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ARCV2BE) || (defined(HAVE_DECL_AUDIT_ARCH_ARCV2BE) && HAVE_DECL_AUDIT_ARCH_ARCV2BE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARCV2BE) == ((EM_ARCV2)), "AUDIT_ARCH_ARCV2BE != (EM_ARCV2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARCV2BE (EM_ARCV2)
#endif
#if defined(AUDIT_ARCH_ARM) || (defined(HAVE_DECL_AUDIT_ARCH_ARM) && HAVE_DECL_AUDIT_ARCH_ARM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARM) == ((EM_ARM|__AUDIT_ARCH_LE)), "AUDIT_ARCH_ARM != (EM_ARM|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARM (EM_ARM|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ARMEB) || (defined(HAVE_DECL_AUDIT_ARCH_ARMEB) && HAVE_DECL_AUDIT_ARCH_ARMEB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARMEB) == ((EM_ARM)), "AUDIT_ARCH_ARMEB != (EM_ARM)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARMEB (EM_ARM)
#endif
#if defined(AUDIT_ARCH_C6X) || (defined(HAVE_DECL_AUDIT_ARCH_C6X) && HAVE_DECL_AUDIT_ARCH_C6X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_C6X) == ((EM_TI_C6000|__AUDIT_ARCH_LE)), "AUDIT_ARCH_C6X != (EM_TI_C6000|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_C6X (EM_TI_C6000|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_C6XBE) || (defined(HAVE_DECL_AUDIT_ARCH_C6XBE) && HAVE_DECL_AUDIT_ARCH_C6XBE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_C6XBE) == ((EM_TI_C6000)), "AUDIT_ARCH_C6XBE != (EM_TI_C6000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_C6XBE (EM_TI_C6000)
#endif
#if defined(AUDIT_ARCH_CRIS) || (defined(HAVE_DECL_AUDIT_ARCH_CRIS) && HAVE_DECL_AUDIT_ARCH_CRIS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_CRIS) == ((EM_CRIS|__AUDIT_ARCH_LE)), "AUDIT_ARCH_CRIS != (EM_CRIS|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_CRIS (EM_CRIS|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_CSKY) || (defined(HAVE_DECL_AUDIT_ARCH_CSKY) && HAVE_DECL_AUDIT_ARCH_CSKY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_CSKY) == ((EM_CSKY|__AUDIT_ARCH_LE)), "AUDIT_ARCH_CSKY != (EM_CSKY|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_CSKY (EM_CSKY|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_FRV) || (defined(HAVE_DECL_AUDIT_ARCH_FRV) && HAVE_DECL_AUDIT_ARCH_FRV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_FRV) == ((EM_FRV)), "AUDIT_ARCH_FRV != (EM_FRV)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_FRV (EM_FRV)
#endif
#if defined(AUDIT_ARCH_H8300) || (defined(HAVE_DECL_AUDIT_ARCH_H8300) && HAVE_DECL_AUDIT_ARCH_H8300)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_H8300) == ((EM_H8_300)), "AUDIT_ARCH_H8300 != (EM_H8_300)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_H8300 (EM_H8_300)
#endif
#if defined(AUDIT_ARCH_HEXAGON) || (defined(HAVE_DECL_AUDIT_ARCH_HEXAGON) && HAVE_DECL_AUDIT_ARCH_HEXAGON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_HEXAGON) == ((EM_HEXAGON)), "AUDIT_ARCH_HEXAGON != (EM_HEXAGON)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_HEXAGON (EM_HEXAGON)
#endif
#if defined(AUDIT_ARCH_I386) || (defined(HAVE_DECL_AUDIT_ARCH_I386) && HAVE_DECL_AUDIT_ARCH_I386)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_I386) == ((EM_386|__AUDIT_ARCH_LE)), "AUDIT_ARCH_I386 != (EM_386|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_I386 (EM_386|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_IA64) || (defined(HAVE_DECL_AUDIT_ARCH_IA64) && HAVE_DECL_AUDIT_ARCH_IA64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_IA64) == ((EM_IA_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_IA64 != (EM_IA_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_IA64 (EM_IA_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_M32R) || (defined(HAVE_DECL_AUDIT_ARCH_M32R) && HAVE_DECL_AUDIT_ARCH_M32R)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_M32R) == ((EM_M32R)), "AUDIT_ARCH_M32R != (EM_M32R)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_M32R (EM_M32R)
#endif
#if defined(AUDIT_ARCH_M68K) || (defined(HAVE_DECL_AUDIT_ARCH_M68K) && HAVE_DECL_AUDIT_ARCH_M68K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_M68K) == ((EM_68K)), "AUDIT_ARCH_M68K != (EM_68K)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_M68K (EM_68K)
#endif
#if defined(AUDIT_ARCH_MICROBLAZE) || (defined(HAVE_DECL_AUDIT_ARCH_MICROBLAZE) && HAVE_DECL_AUDIT_ARCH_MICROBLAZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MICROBLAZE) == ((EM_MICROBLAZE)), "AUDIT_ARCH_MICROBLAZE != (EM_MICROBLAZE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MICROBLAZE (EM_MICROBLAZE)
#endif
#if defined(AUDIT_ARCH_MIPS) || (defined(HAVE_DECL_AUDIT_ARCH_MIPS) && HAVE_DECL_AUDIT_ARCH_MIPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPS) == ((EM_MIPS)), "AUDIT_ARCH_MIPS != (EM_MIPS)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPS (EM_MIPS)
#endif
#if defined(AUDIT_ARCH_MIPS64) || (defined(HAVE_DECL_AUDIT_ARCH_MIPS64) && HAVE_DECL_AUDIT_ARCH_MIPS64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPS64) == ((EM_MIPS|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_MIPS64 != (EM_MIPS|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPS64 (EM_MIPS|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_MIPS64N32) || (defined(HAVE_DECL_AUDIT_ARCH_MIPS64N32) && HAVE_DECL_AUDIT_ARCH_MIPS64N32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPS64N32) == ((EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_CONVENTION_MIPS64_N32)), "AUDIT_ARCH_MIPS64N32 != (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_CONVENTION_MIPS64_N32)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPS64N32 (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_CONVENTION_MIPS64_N32)
#endif
#if defined(AUDIT_ARCH_MIPSEL) || (defined(HAVE_DECL_AUDIT_ARCH_MIPSEL) && HAVE_DECL_AUDIT_ARCH_MIPSEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPSEL) == ((EM_MIPS|__AUDIT_ARCH_LE)), "AUDIT_ARCH_MIPSEL != (EM_MIPS|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPSEL (EM_MIPS|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_MIPSEL64) || (defined(HAVE_DECL_AUDIT_ARCH_MIPSEL64) && HAVE_DECL_AUDIT_ARCH_MIPSEL64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPSEL64) == ((EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_MIPSEL64 != (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPSEL64 (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_MIPSEL64N32) || (defined(HAVE_DECL_AUDIT_ARCH_MIPSEL64N32) && HAVE_DECL_AUDIT_ARCH_MIPSEL64N32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPSEL64N32) == ((EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE|__AUDIT_ARCH_CONVENTION_MIPS64_N32)), "AUDIT_ARCH_MIPSEL64N32 != (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE|__AUDIT_ARCH_CONVENTION_MIPS64_N32)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPSEL64N32 (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE|__AUDIT_ARCH_CONVENTION_MIPS64_N32)
#endif
#if defined(AUDIT_ARCH_NDS32) || (defined(HAVE_DECL_AUDIT_ARCH_NDS32) && HAVE_DECL_AUDIT_ARCH_NDS32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_NDS32) == ((EM_NDS32|__AUDIT_ARCH_LE)), "AUDIT_ARCH_NDS32 != (EM_NDS32|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_NDS32 (EM_NDS32|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_NDS32BE) || (defined(HAVE_DECL_AUDIT_ARCH_NDS32BE) && HAVE_DECL_AUDIT_ARCH_NDS32BE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_NDS32BE) == ((EM_NDS32)), "AUDIT_ARCH_NDS32BE != (EM_NDS32)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_NDS32BE (EM_NDS32)
#endif
#if defined(AUDIT_ARCH_NIOS2) || (defined(HAVE_DECL_AUDIT_ARCH_NIOS2) && HAVE_DECL_AUDIT_ARCH_NIOS2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_NIOS2) == ((EM_ALTERA_NIOS2|__AUDIT_ARCH_LE)), "AUDIT_ARCH_NIOS2 != (EM_ALTERA_NIOS2|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_NIOS2 (EM_ALTERA_NIOS2|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_OPENRISC) || (defined(HAVE_DECL_AUDIT_ARCH_OPENRISC) && HAVE_DECL_AUDIT_ARCH_OPENRISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_OPENRISC) == ((EM_OPENRISC)), "AUDIT_ARCH_OPENRISC != (EM_OPENRISC)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_OPENRISC (EM_OPENRISC)
#endif
#if defined(AUDIT_ARCH_PARISC) || (defined(HAVE_DECL_AUDIT_ARCH_PARISC) && HAVE_DECL_AUDIT_ARCH_PARISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PARISC) == ((EM_PARISC)), "AUDIT_ARCH_PARISC != (EM_PARISC)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PARISC (EM_PARISC)
#endif
#if defined(AUDIT_ARCH_PARISC64) || (defined(HAVE_DECL_AUDIT_ARCH_PARISC64) && HAVE_DECL_AUDIT_ARCH_PARISC64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PARISC64) == ((EM_PARISC|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_PARISC64 != (EM_PARISC|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PARISC64 (EM_PARISC|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_PPC) || (defined(HAVE_DECL_AUDIT_ARCH_PPC) && HAVE_DECL_AUDIT_ARCH_PPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PPC) == ((EM_PPC)), "AUDIT_ARCH_PPC != (EM_PPC)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PPC (EM_PPC)
#endif
#if defined(AUDIT_ARCH_PPC64) || (defined(HAVE_DECL_AUDIT_ARCH_PPC64) && HAVE_DECL_AUDIT_ARCH_PPC64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PPC64) == ((EM_PPC64|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_PPC64 != (EM_PPC64|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PPC64 (EM_PPC64|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_PPC64LE) || (defined(HAVE_DECL_AUDIT_ARCH_PPC64LE) && HAVE_DECL_AUDIT_ARCH_PPC64LE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PPC64LE) == ((EM_PPC64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_PPC64LE != (EM_PPC64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PPC64LE (EM_PPC64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_RISCV32) || (defined(HAVE_DECL_AUDIT_ARCH_RISCV32) && HAVE_DECL_AUDIT_ARCH_RISCV32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_RISCV32) == ((EM_RISCV|__AUDIT_ARCH_LE)), "AUDIT_ARCH_RISCV32 != (EM_RISCV|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_RISCV32 (EM_RISCV|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_RISCV64) || (defined(HAVE_DECL_AUDIT_ARCH_RISCV64) && HAVE_DECL_AUDIT_ARCH_RISCV64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_RISCV64) == ((EM_RISCV|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_RISCV64 != (EM_RISCV|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_RISCV64 (EM_RISCV|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_S390) || (defined(HAVE_DECL_AUDIT_ARCH_S390) && HAVE_DECL_AUDIT_ARCH_S390)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_S390) == ((EM_S390)), "AUDIT_ARCH_S390 != (EM_S390)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_S390 (EM_S390)
#endif
#if defined(AUDIT_ARCH_S390X) || (defined(HAVE_DECL_AUDIT_ARCH_S390X) && HAVE_DECL_AUDIT_ARCH_S390X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_S390X) == ((EM_S390|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_S390X != (EM_S390|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_S390X (EM_S390|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_SH) || (defined(HAVE_DECL_AUDIT_ARCH_SH) && HAVE_DECL_AUDIT_ARCH_SH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SH) == ((EM_SH)), "AUDIT_ARCH_SH != (EM_SH)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SH (EM_SH)
#endif
#if defined(AUDIT_ARCH_SH64) || (defined(HAVE_DECL_AUDIT_ARCH_SH64) && HAVE_DECL_AUDIT_ARCH_SH64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SH64) == ((EM_SH|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_SH64 != (EM_SH|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SH64 (EM_SH|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_SHEL) || (defined(HAVE_DECL_AUDIT_ARCH_SHEL) && HAVE_DECL_AUDIT_ARCH_SHEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SHEL) == ((EM_SH|__AUDIT_ARCH_LE)), "AUDIT_ARCH_SHEL != (EM_SH|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SHEL (EM_SH|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_SHEL64) || (defined(HAVE_DECL_AUDIT_ARCH_SHEL64) && HAVE_DECL_AUDIT_ARCH_SHEL64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SHEL64) == ((EM_SH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_SHEL64 != (EM_SH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SHEL64 (EM_SH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_SPARC) || (defined(HAVE_DECL_AUDIT_ARCH_SPARC) && HAVE_DECL_AUDIT_ARCH_SPARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SPARC) == ((EM_SPARC)), "AUDIT_ARCH_SPARC != (EM_SPARC)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SPARC (EM_SPARC)
#endif
#if defined(AUDIT_ARCH_SPARC64) || (defined(HAVE_DECL_AUDIT_ARCH_SPARC64) && HAVE_DECL_AUDIT_ARCH_SPARC64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SPARC64) == ((EM_SPARCV9|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_SPARC64 != (EM_SPARCV9|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SPARC64 (EM_SPARCV9|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_TILEGX) || (defined(HAVE_DECL_AUDIT_ARCH_TILEGX) && HAVE_DECL_AUDIT_ARCH_TILEGX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_TILEGX) == ((EM_TILEGX|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_TILEGX != (EM_TILEGX|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_TILEGX (EM_TILEGX|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_TILEGX32) || (defined(HAVE_DECL_AUDIT_ARCH_TILEGX32) && HAVE_DECL_AUDIT_ARCH_TILEGX32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_TILEGX32) == ((EM_TILEGX|__AUDIT_ARCH_LE)), "AUDIT_ARCH_TILEGX32 != (EM_TILEGX|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_TILEGX32 (EM_TILEGX|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_TILEPRO) || (defined(HAVE_DECL_AUDIT_ARCH_TILEPRO) && HAVE_DECL_AUDIT_ARCH_TILEPRO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_TILEPRO) == ((EM_TILEPRO|__AUDIT_ARCH_LE)), "AUDIT_ARCH_TILEPRO != (EM_TILEPRO|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_TILEPRO (EM_TILEPRO|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_UNICORE) || (defined(HAVE_DECL_AUDIT_ARCH_UNICORE) && HAVE_DECL_AUDIT_ARCH_UNICORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_UNICORE) == ((EM_UNICORE|__AUDIT_ARCH_LE)), "AUDIT_ARCH_UNICORE != (EM_UNICORE|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_UNICORE (EM_UNICORE|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_V850) || (defined(HAVE_DECL_AUDIT_ARCH_V850) && HAVE_DECL_AUDIT_ARCH_V850)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_V850) == ((EM_V850|__AUDIT_ARCH_LE)), "AUDIT_ARCH_V850 != (EM_V850|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_V850 (EM_V850|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_X86_64) || (defined(HAVE_DECL_AUDIT_ARCH_X86_64) && HAVE_DECL_AUDIT_ARCH_X86_64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_X86_64) == ((EM_X86_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_X86_64 != (EM_X86_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_X86_64 (EM_X86_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_XTENSA) || (defined(HAVE_DECL_AUDIT_ARCH_XTENSA) && HAVE_DECL_AUDIT_ARCH_XTENSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_XTENSA) == ((EM_XTENSA)), "AUDIT_ARCH_XTENSA != (EM_XTENSA)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_XTENSA (EM_XTENSA)
#endif

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

static const struct xlat_data audit_arch_xdata[] = {
#ifndef __AUDIT_ARCH_CONVENTION_MIPS64_N32
# define __AUDIT_ARCH_CONVENTION_MIPS64_N32	0x20000000
#endif
#ifndef __AUDIT_ARCH_64BIT
# define __AUDIT_ARCH_64BIT	0x80000000
#endif
#ifndef __AUDIT_ARCH_LE
# define __AUDIT_ARCH_LE	0x40000000
#endif

 XLAT(AUDIT_ARCH_AARCH64),
 XLAT(AUDIT_ARCH_ALPHA),
 XLAT(AUDIT_ARCH_ARCOMPACT),
 XLAT(AUDIT_ARCH_ARCOMPACTBE),
 XLAT(AUDIT_ARCH_ARCV2),
 XLAT(AUDIT_ARCH_ARCV2BE),
 XLAT(AUDIT_ARCH_ARM),
 XLAT(AUDIT_ARCH_ARMEB),
 XLAT(AUDIT_ARCH_C6X),
 XLAT(AUDIT_ARCH_C6XBE),
 XLAT(AUDIT_ARCH_CRIS),
 XLAT(AUDIT_ARCH_CSKY),
 XLAT(AUDIT_ARCH_FRV),
 XLAT(AUDIT_ARCH_H8300),
 XLAT(AUDIT_ARCH_HEXAGON),
 XLAT(AUDIT_ARCH_I386),
 XLAT(AUDIT_ARCH_IA64),
 XLAT(AUDIT_ARCH_M32R),
 XLAT(AUDIT_ARCH_M68K),
 XLAT(AUDIT_ARCH_MICROBLAZE),
 XLAT(AUDIT_ARCH_MIPS),
 XLAT(AUDIT_ARCH_MIPS64),
 XLAT(AUDIT_ARCH_MIPS64N32),
 XLAT(AUDIT_ARCH_MIPSEL),
 XLAT(AUDIT_ARCH_MIPSEL64),
 XLAT(AUDIT_ARCH_MIPSEL64N32),
 XLAT(AUDIT_ARCH_NDS32),
 XLAT(AUDIT_ARCH_NDS32BE),
 XLAT(AUDIT_ARCH_NIOS2),
 XLAT(AUDIT_ARCH_OPENRISC),
 XLAT(AUDIT_ARCH_PARISC),
 XLAT(AUDIT_ARCH_PARISC64),
 XLAT(AUDIT_ARCH_PPC),
 XLAT(AUDIT_ARCH_PPC64),
 XLAT(AUDIT_ARCH_PPC64LE),
 XLAT(AUDIT_ARCH_RISCV32),
 XLAT(AUDIT_ARCH_RISCV64),
 XLAT(AUDIT_ARCH_S390),
 XLAT(AUDIT_ARCH_S390X),
 XLAT(AUDIT_ARCH_SH),
 XLAT(AUDIT_ARCH_SH64),
 XLAT(AUDIT_ARCH_SHEL),
 XLAT(AUDIT_ARCH_SHEL64),
 XLAT(AUDIT_ARCH_SPARC),
 XLAT(AUDIT_ARCH_SPARC64),
 XLAT(AUDIT_ARCH_TILEGX),
 XLAT(AUDIT_ARCH_TILEGX32),
 XLAT(AUDIT_ARCH_TILEPRO),
 XLAT(AUDIT_ARCH_UNICORE),
 XLAT(AUDIT_ARCH_V850),
 XLAT(AUDIT_ARCH_X86_64),
 XLAT(AUDIT_ARCH_XTENSA),
};
const struct xlat audit_arch[1] = { {
 .data = audit_arch_xdata,
 .size = ARRAY_SIZE(audit_arch_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
