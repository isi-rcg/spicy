/* Generated by ./xlat/gen.sh from ./xlat/bpf_attach_type.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BPF_CGROUP_INET_INGRESS) || (defined(HAVE_DECL_BPF_CGROUP_INET_INGRESS) && HAVE_DECL_BPF_CGROUP_INET_INGRESS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_INET_INGRESS) == (0), "BPF_CGROUP_INET_INGRESS != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_INET_INGRESS 0
#endif
#if defined(BPF_CGROUP_INET_EGRESS) || (defined(HAVE_DECL_BPF_CGROUP_INET_EGRESS) && HAVE_DECL_BPF_CGROUP_INET_EGRESS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_INET_EGRESS) == (1), "BPF_CGROUP_INET_EGRESS != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_INET_EGRESS 1
#endif
#if defined(BPF_CGROUP_INET_SOCK_CREATE) || (defined(HAVE_DECL_BPF_CGROUP_INET_SOCK_CREATE) && HAVE_DECL_BPF_CGROUP_INET_SOCK_CREATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_INET_SOCK_CREATE) == (2), "BPF_CGROUP_INET_SOCK_CREATE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_INET_SOCK_CREATE 2
#endif
#if defined(BPF_CGROUP_SOCK_OPS) || (defined(HAVE_DECL_BPF_CGROUP_SOCK_OPS) && HAVE_DECL_BPF_CGROUP_SOCK_OPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_SOCK_OPS) == (3), "BPF_CGROUP_SOCK_OPS != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_SOCK_OPS 3
#endif
#if defined(BPF_SK_SKB_STREAM_PARSER) || (defined(HAVE_DECL_BPF_SK_SKB_STREAM_PARSER) && HAVE_DECL_BPF_SK_SKB_STREAM_PARSER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_SK_SKB_STREAM_PARSER) == (4), "BPF_SK_SKB_STREAM_PARSER != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_SK_SKB_STREAM_PARSER 4
#endif
#if defined(BPF_SK_SKB_STREAM_VERDICT) || (defined(HAVE_DECL_BPF_SK_SKB_STREAM_VERDICT) && HAVE_DECL_BPF_SK_SKB_STREAM_VERDICT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_SK_SKB_STREAM_VERDICT) == (5), "BPF_SK_SKB_STREAM_VERDICT != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_SK_SKB_STREAM_VERDICT 5
#endif
#if defined(BPF_CGROUP_DEVICE) || (defined(HAVE_DECL_BPF_CGROUP_DEVICE) && HAVE_DECL_BPF_CGROUP_DEVICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_DEVICE) == (6), "BPF_CGROUP_DEVICE != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_DEVICE 6
#endif
#if defined(BPF_SK_MSG_VERDICT) || (defined(HAVE_DECL_BPF_SK_MSG_VERDICT) && HAVE_DECL_BPF_SK_MSG_VERDICT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_SK_MSG_VERDICT) == (7), "BPF_SK_MSG_VERDICT != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_SK_MSG_VERDICT 7
#endif
#if defined(BPF_CGROUP_INET4_BIND) || (defined(HAVE_DECL_BPF_CGROUP_INET4_BIND) && HAVE_DECL_BPF_CGROUP_INET4_BIND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_INET4_BIND) == (8), "BPF_CGROUP_INET4_BIND != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_INET4_BIND 8
#endif
#if defined(BPF_CGROUP_INET6_BIND) || (defined(HAVE_DECL_BPF_CGROUP_INET6_BIND) && HAVE_DECL_BPF_CGROUP_INET6_BIND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_INET6_BIND) == (9), "BPF_CGROUP_INET6_BIND != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_INET6_BIND 9
#endif
#if defined(BPF_CGROUP_INET4_CONNECT) || (defined(HAVE_DECL_BPF_CGROUP_INET4_CONNECT) && HAVE_DECL_BPF_CGROUP_INET4_CONNECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_INET4_CONNECT) == (10), "BPF_CGROUP_INET4_CONNECT != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_INET4_CONNECT 10
#endif
#if defined(BPF_CGROUP_INET6_CONNECT) || (defined(HAVE_DECL_BPF_CGROUP_INET6_CONNECT) && HAVE_DECL_BPF_CGROUP_INET6_CONNECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_INET6_CONNECT) == (11), "BPF_CGROUP_INET6_CONNECT != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_INET6_CONNECT 11
#endif
#if defined(BPF_CGROUP_INET4_POST_BIND) || (defined(HAVE_DECL_BPF_CGROUP_INET4_POST_BIND) && HAVE_DECL_BPF_CGROUP_INET4_POST_BIND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_INET4_POST_BIND) == (12), "BPF_CGROUP_INET4_POST_BIND != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_INET4_POST_BIND 12
#endif
#if defined(BPF_CGROUP_INET6_POST_BIND) || (defined(HAVE_DECL_BPF_CGROUP_INET6_POST_BIND) && HAVE_DECL_BPF_CGROUP_INET6_POST_BIND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_INET6_POST_BIND) == (13), "BPF_CGROUP_INET6_POST_BIND != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_INET6_POST_BIND 13
#endif
#if defined(BPF_CGROUP_UDP4_SENDMSG) || (defined(HAVE_DECL_BPF_CGROUP_UDP4_SENDMSG) && HAVE_DECL_BPF_CGROUP_UDP4_SENDMSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_UDP4_SENDMSG) == (14), "BPF_CGROUP_UDP4_SENDMSG != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_UDP4_SENDMSG 14
#endif
#if defined(BPF_CGROUP_UDP6_SENDMSG) || (defined(HAVE_DECL_BPF_CGROUP_UDP6_SENDMSG) && HAVE_DECL_BPF_CGROUP_UDP6_SENDMSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_UDP6_SENDMSG) == (15), "BPF_CGROUP_UDP6_SENDMSG != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_UDP6_SENDMSG 15
#endif
#if defined(BPF_LIRC_MODE2) || (defined(HAVE_DECL_BPF_LIRC_MODE2) && HAVE_DECL_BPF_LIRC_MODE2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_LIRC_MODE2) == (16), "BPF_LIRC_MODE2 != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_LIRC_MODE2 16
#endif
#if defined(BPF_FLOW_DISSECTOR) || (defined(HAVE_DECL_BPF_FLOW_DISSECTOR) && HAVE_DECL_BPF_FLOW_DISSECTOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_FLOW_DISSECTOR) == (17), "BPF_FLOW_DISSECTOR != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_FLOW_DISSECTOR 17
#endif
#if defined(BPF_CGROUP_SYSCTL) || (defined(HAVE_DECL_BPF_CGROUP_SYSCTL) && HAVE_DECL_BPF_CGROUP_SYSCTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_SYSCTL) == (18), "BPF_CGROUP_SYSCTL != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_SYSCTL 18
#endif
#if defined(BPF_CGROUP_UDP4_RECVMSG) || (defined(HAVE_DECL_BPF_CGROUP_UDP4_RECVMSG) && HAVE_DECL_BPF_CGROUP_UDP4_RECVMSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_UDP4_RECVMSG) == (19), "BPF_CGROUP_UDP4_RECVMSG != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_UDP4_RECVMSG 19
#endif
#if defined(BPF_CGROUP_UDP6_RECVMSG) || (defined(HAVE_DECL_BPF_CGROUP_UDP6_RECVMSG) && HAVE_DECL_BPF_CGROUP_UDP6_RECVMSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_UDP6_RECVMSG) == (20), "BPF_CGROUP_UDP6_RECVMSG != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_UDP6_RECVMSG 20
#endif
#if defined(BPF_CGROUP_GETSOCKOPT) || (defined(HAVE_DECL_BPF_CGROUP_GETSOCKOPT) && HAVE_DECL_BPF_CGROUP_GETSOCKOPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_GETSOCKOPT) == (21), "BPF_CGROUP_GETSOCKOPT != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_GETSOCKOPT 21
#endif
#if defined(BPF_CGROUP_SETSOCKOPT) || (defined(HAVE_DECL_BPF_CGROUP_SETSOCKOPT) && HAVE_DECL_BPF_CGROUP_SETSOCKOPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_CGROUP_SETSOCKOPT) == (22), "BPF_CGROUP_SETSOCKOPT != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_CGROUP_SETSOCKOPT 22
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat bpf_attach_type in mpers mode

# else

static const struct xlat_data bpf_attach_type_xdata[] = {
 [BPF_CGROUP_INET_INGRESS] = XLAT(BPF_CGROUP_INET_INGRESS),
 [BPF_CGROUP_INET_EGRESS] = XLAT(BPF_CGROUP_INET_EGRESS),
 [BPF_CGROUP_INET_SOCK_CREATE] = XLAT(BPF_CGROUP_INET_SOCK_CREATE),
 [BPF_CGROUP_SOCK_OPS] = XLAT(BPF_CGROUP_SOCK_OPS),
 [BPF_SK_SKB_STREAM_PARSER] = XLAT(BPF_SK_SKB_STREAM_PARSER),
 [BPF_SK_SKB_STREAM_VERDICT] = XLAT(BPF_SK_SKB_STREAM_VERDICT),
 [BPF_CGROUP_DEVICE] = XLAT(BPF_CGROUP_DEVICE),
 [BPF_SK_MSG_VERDICT] = XLAT(BPF_SK_MSG_VERDICT),
 [BPF_CGROUP_INET4_BIND] = XLAT(BPF_CGROUP_INET4_BIND),
 [BPF_CGROUP_INET6_BIND] = XLAT(BPF_CGROUP_INET6_BIND),
 [BPF_CGROUP_INET4_CONNECT] = XLAT(BPF_CGROUP_INET4_CONNECT),
 [BPF_CGROUP_INET6_CONNECT] = XLAT(BPF_CGROUP_INET6_CONNECT),
 [BPF_CGROUP_INET4_POST_BIND] = XLAT(BPF_CGROUP_INET4_POST_BIND),
 [BPF_CGROUP_INET6_POST_BIND] = XLAT(BPF_CGROUP_INET6_POST_BIND),
 [BPF_CGROUP_UDP4_SENDMSG] = XLAT(BPF_CGROUP_UDP4_SENDMSG),
 [BPF_CGROUP_UDP6_SENDMSG] = XLAT(BPF_CGROUP_UDP6_SENDMSG),
 [BPF_LIRC_MODE2] = XLAT(BPF_LIRC_MODE2),
 [BPF_FLOW_DISSECTOR] = XLAT(BPF_FLOW_DISSECTOR),
 [BPF_CGROUP_SYSCTL] = XLAT(BPF_CGROUP_SYSCTL),
 [BPF_CGROUP_UDP4_RECVMSG] = XLAT(BPF_CGROUP_UDP4_RECVMSG),
 [BPF_CGROUP_UDP6_RECVMSG] = XLAT(BPF_CGROUP_UDP6_RECVMSG),
 [BPF_CGROUP_GETSOCKOPT] = XLAT(BPF_CGROUP_GETSOCKOPT),
 [BPF_CGROUP_SETSOCKOPT] = XLAT(BPF_CGROUP_SETSOCKOPT),
};
static
const struct xlat bpf_attach_type[1] = { {
 .data = bpf_attach_type_xdata,
 .size = ARRAY_SIZE(bpf_attach_type_xdata),
 .type = XT_INDEXED,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
