/* Generated by ./xlat/gen.sh from ./xlat/mlockall_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined __alpha__ || defined __powerpc__ || defined __powerpc64__ || defined __sparc__
#if defined(MCL_CURRENT) || (defined(HAVE_DECL_MCL_CURRENT) && HAVE_DECL_MCL_CURRENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCL_CURRENT) == (0x2000), "MCL_CURRENT != 0x2000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCL_CURRENT 0x2000
#endif
#if defined(MCL_FUTURE) || (defined(HAVE_DECL_MCL_FUTURE) && HAVE_DECL_MCL_FUTURE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCL_FUTURE) == (0x4000), "MCL_FUTURE != 0x4000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCL_FUTURE 0x4000
#endif
#if defined(MCL_ONFAULT) || (defined(HAVE_DECL_MCL_ONFAULT) && HAVE_DECL_MCL_ONFAULT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCL_ONFAULT) == (0x8000), "MCL_ONFAULT != 0x8000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCL_ONFAULT 0x8000
#endif
#else
#if defined(MCL_CURRENT) || (defined(HAVE_DECL_MCL_CURRENT) && HAVE_DECL_MCL_CURRENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCL_CURRENT) == (1), "MCL_CURRENT != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCL_CURRENT 1
#endif
#if defined(MCL_FUTURE) || (defined(HAVE_DECL_MCL_FUTURE) && HAVE_DECL_MCL_FUTURE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCL_FUTURE) == (2), "MCL_FUTURE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCL_FUTURE 2
#endif
#if defined(MCL_ONFAULT) || (defined(HAVE_DECL_MCL_ONFAULT) && HAVE_DECL_MCL_ONFAULT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCL_ONFAULT) == (4), "MCL_ONFAULT != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCL_ONFAULT 4
#endif
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat mlockall_flags in mpers mode

# else

static const struct xlat_data mlockall_flags_xdata[] = {
#if defined __alpha__ || defined __powerpc__ || defined __powerpc64__ || defined __sparc__
 XLAT(MCL_CURRENT),
 XLAT(MCL_FUTURE),
 XLAT(MCL_ONFAULT),
#else
 XLAT(MCL_CURRENT),
 XLAT(MCL_FUTURE),
 XLAT(MCL_ONFAULT),
#endif
};
static
const struct xlat mlockall_flags[1] = { {
 .data = mlockall_flags_xdata,
 .size = ARRAY_SIZE(mlockall_flags_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
