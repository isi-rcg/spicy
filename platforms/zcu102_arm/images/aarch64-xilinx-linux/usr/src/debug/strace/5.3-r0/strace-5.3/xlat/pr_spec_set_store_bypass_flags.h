/* Generated by ./xlat/gen.sh from ./xlat/pr_spec_set_store_bypass_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PR_SPEC_ENABLE) || (defined(HAVE_DECL_PR_SPEC_ENABLE) && HAVE_DECL_PR_SPEC_ENABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SPEC_ENABLE) == ((1 << 1)), "PR_SPEC_ENABLE != (1 << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SPEC_ENABLE (1 << 1)
#endif
#if defined(PR_SPEC_DISABLE) || (defined(HAVE_DECL_PR_SPEC_DISABLE) && HAVE_DECL_PR_SPEC_DISABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SPEC_DISABLE) == ((1 << 2)), "PR_SPEC_DISABLE != (1 << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SPEC_DISABLE (1 << 2)
#endif
#if defined(PR_SPEC_FORCE_DISABLE) || (defined(HAVE_DECL_PR_SPEC_FORCE_DISABLE) && HAVE_DECL_PR_SPEC_FORCE_DISABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SPEC_FORCE_DISABLE) == ((1 << 3)), "PR_SPEC_FORCE_DISABLE != (1 << 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SPEC_FORCE_DISABLE (1 << 3)
#endif
#if defined(PR_SPEC_DISABLE_NOEXEC) || (defined(HAVE_DECL_PR_SPEC_DISABLE_NOEXEC) && HAVE_DECL_PR_SPEC_DISABLE_NOEXEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SPEC_DISABLE_NOEXEC) == ((1 << 4)), "PR_SPEC_DISABLE_NOEXEC != (1 << 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SPEC_DISABLE_NOEXEC (1 << 4)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat pr_spec_set_store_bypass_flags in mpers mode

# else

static const struct xlat_data pr_spec_set_store_bypass_flags_xdata[] = {
 XLAT(PR_SPEC_ENABLE),
 XLAT(PR_SPEC_DISABLE),
 XLAT(PR_SPEC_FORCE_DISABLE),
 XLAT(PR_SPEC_DISABLE_NOEXEC),
};
static
const struct xlat pr_spec_set_store_bypass_flags[1] = { {
 .data = pr_spec_set_store_bypass_flags_xdata,
 .size = ARRAY_SIZE(pr_spec_set_store_bypass_flags_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
