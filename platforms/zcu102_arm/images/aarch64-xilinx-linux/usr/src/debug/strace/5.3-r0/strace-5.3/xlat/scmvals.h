/* Generated by ./xlat/gen.sh from ./xlat/scmvals.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SCM_RIGHTS) || (defined(HAVE_DECL_SCM_RIGHTS) && HAVE_DECL_SCM_RIGHTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCM_RIGHTS) == (1), "SCM_RIGHTS != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCM_RIGHTS 1
#endif
#if defined(SCM_CREDENTIALS) || (defined(HAVE_DECL_SCM_CREDENTIALS) && HAVE_DECL_SCM_CREDENTIALS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCM_CREDENTIALS) == (2), "SCM_CREDENTIALS != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCM_CREDENTIALS 2
#endif
#if defined(SCM_SECURITY) || (defined(HAVE_DECL_SCM_SECURITY) && HAVE_DECL_SCM_SECURITY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCM_SECURITY) == (3), "SCM_SECURITY != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCM_SECURITY 3
#endif
#if defined __sparc__
#if defined(SCM_TIMESTAMPING_OPT_STATS) || (defined(HAVE_DECL_SCM_TIMESTAMPING_OPT_STATS) && HAVE_DECL_SCM_TIMESTAMPING_OPT_STATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCM_TIMESTAMPING_OPT_STATS) == (0x38), "SCM_TIMESTAMPING_OPT_STATS != 0x38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCM_TIMESTAMPING_OPT_STATS 0x38
#endif
#elif defined __hppa__
#if defined(SCM_TIMESTAMPING_OPT_STATS) || (defined(HAVE_DECL_SCM_TIMESTAMPING_OPT_STATS) && HAVE_DECL_SCM_TIMESTAMPING_OPT_STATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCM_TIMESTAMPING_OPT_STATS) == (0x402f), "SCM_TIMESTAMPING_OPT_STATS != 0x402f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCM_TIMESTAMPING_OPT_STATS 0x402f
#endif
#else
#if defined(SCM_TIMESTAMPING_OPT_STATS) || (defined(HAVE_DECL_SCM_TIMESTAMPING_OPT_STATS) && HAVE_DECL_SCM_TIMESTAMPING_OPT_STATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCM_TIMESTAMPING_OPT_STATS) == (0x36), "SCM_TIMESTAMPING_OPT_STATS != 0x36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCM_TIMESTAMPING_OPT_STATS 0x36
#endif
#endif
#if defined __sparc__
#if defined(SCM_TIMESTAMPING_PKTINFO) || (defined(HAVE_DECL_SCM_TIMESTAMPING_PKTINFO) && HAVE_DECL_SCM_TIMESTAMPING_PKTINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCM_TIMESTAMPING_PKTINFO) == (0x3c), "SCM_TIMESTAMPING_PKTINFO != 0x3c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCM_TIMESTAMPING_PKTINFO 0x3c
#endif
#elif defined __hppa__
#if defined(SCM_TIMESTAMPING_PKTINFO) || (defined(HAVE_DECL_SCM_TIMESTAMPING_PKTINFO) && HAVE_DECL_SCM_TIMESTAMPING_PKTINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCM_TIMESTAMPING_PKTINFO) == (0x4033), "SCM_TIMESTAMPING_PKTINFO != 0x4033");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCM_TIMESTAMPING_PKTINFO 0x4033
#endif
#else
#if defined(SCM_TIMESTAMPING_PKTINFO) || (defined(HAVE_DECL_SCM_TIMESTAMPING_PKTINFO) && HAVE_DECL_SCM_TIMESTAMPING_PKTINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCM_TIMESTAMPING_PKTINFO) == (0x3a), "SCM_TIMESTAMPING_PKTINFO != 0x3a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCM_TIMESTAMPING_PKTINFO 0x3a
#endif
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat scmvals in mpers mode

# else

static const struct xlat_data scmvals_xdata[] = {
 XLAT(SCM_RIGHTS),
 XLAT(SCM_CREDENTIALS),
 XLAT(SCM_SECURITY),

#if defined(SO_WIFI_STATUS) || (defined(HAVE_DECL_SO_WIFI_STATUS) && HAVE_DECL_SO_WIFI_STATUS)
  XLAT(SO_WIFI_STATUS),
#endif
#if defined(SO_TXTIME) || (defined(HAVE_DECL_SO_TXTIME) && HAVE_DECL_SO_TXTIME)
  XLAT(SO_TXTIME),
#endif
#if defined(SO_TIMESTAMP_OLD) || (defined(HAVE_DECL_SO_TIMESTAMP_OLD) && HAVE_DECL_SO_TIMESTAMP_OLD)
  XLAT(SO_TIMESTAMP_OLD),
#endif
#if defined(SO_TIMESTAMPNS_OLD) || (defined(HAVE_DECL_SO_TIMESTAMPNS_OLD) && HAVE_DECL_SO_TIMESTAMPNS_OLD)
  XLAT(SO_TIMESTAMPNS_OLD),
#endif
#if defined(SO_TIMESTAMPING_OLD) || (defined(HAVE_DECL_SO_TIMESTAMPING_OLD) && HAVE_DECL_SO_TIMESTAMPING_OLD)
  XLAT(SO_TIMESTAMPING_OLD),
#endif
#if defined(SO_TIMESTAMP_NEW) || (defined(HAVE_DECL_SO_TIMESTAMP_NEW) && HAVE_DECL_SO_TIMESTAMP_NEW)
  XLAT(SO_TIMESTAMP_NEW),
#endif
#if defined(SO_TIMESTAMPNS_NEW) || (defined(HAVE_DECL_SO_TIMESTAMPNS_NEW) && HAVE_DECL_SO_TIMESTAMPNS_NEW)
  XLAT(SO_TIMESTAMPNS_NEW),
#endif
#if defined(SO_TIMESTAMPING_NEW) || (defined(HAVE_DECL_SO_TIMESTAMPING_NEW) && HAVE_DECL_SO_TIMESTAMPING_NEW)
  XLAT(SO_TIMESTAMPING_NEW),
#endif


#if defined __sparc__
 XLAT(SCM_TIMESTAMPING_OPT_STATS),
#elif defined __hppa__
 XLAT(SCM_TIMESTAMPING_OPT_STATS),
#else
 XLAT(SCM_TIMESTAMPING_OPT_STATS),
#endif
#if defined __sparc__
 XLAT(SCM_TIMESTAMPING_PKTINFO),
#elif defined __hppa__
 XLAT(SCM_TIMESTAMPING_PKTINFO),
#else
 XLAT(SCM_TIMESTAMPING_PKTINFO),
#endif
};
static
const struct xlat scmvals[1] = { {
 .data = scmvals_xdata,
 .size = ARRAY_SIZE(scmvals_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
