/* Generated by ./xlat/gen.sh from ./xlat/netlink_protocols.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NETLINK_ROUTE) || (defined(HAVE_DECL_NETLINK_ROUTE) && HAVE_DECL_NETLINK_ROUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_ROUTE) == (0), "NETLINK_ROUTE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_ROUTE 0
#endif
#if defined(NETLINK_UNUSED) || (defined(HAVE_DECL_NETLINK_UNUSED) && HAVE_DECL_NETLINK_UNUSED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_UNUSED) == (1), "NETLINK_UNUSED != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_UNUSED 1
#endif
#if defined(NETLINK_USERSOCK) || (defined(HAVE_DECL_NETLINK_USERSOCK) && HAVE_DECL_NETLINK_USERSOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_USERSOCK) == (2), "NETLINK_USERSOCK != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_USERSOCK 2
#endif
#if defined(NETLINK_FIREWALL) || (defined(HAVE_DECL_NETLINK_FIREWALL) && HAVE_DECL_NETLINK_FIREWALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_FIREWALL) == (3), "NETLINK_FIREWALL != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_FIREWALL 3
#endif
#if defined(NETLINK_SOCK_DIAG) || (defined(HAVE_DECL_NETLINK_SOCK_DIAG) && HAVE_DECL_NETLINK_SOCK_DIAG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_SOCK_DIAG) == (4), "NETLINK_SOCK_DIAG != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_SOCK_DIAG 4
#endif
#if defined(NETLINK_NFLOG) || (defined(HAVE_DECL_NETLINK_NFLOG) && HAVE_DECL_NETLINK_NFLOG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_NFLOG) == (5), "NETLINK_NFLOG != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_NFLOG 5
#endif
#if defined(NETLINK_XFRM) || (defined(HAVE_DECL_NETLINK_XFRM) && HAVE_DECL_NETLINK_XFRM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_XFRM) == (6), "NETLINK_XFRM != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_XFRM 6
#endif
#if defined(NETLINK_SELINUX) || (defined(HAVE_DECL_NETLINK_SELINUX) && HAVE_DECL_NETLINK_SELINUX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_SELINUX) == (7), "NETLINK_SELINUX != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_SELINUX 7
#endif
#if defined(NETLINK_ISCSI) || (defined(HAVE_DECL_NETLINK_ISCSI) && HAVE_DECL_NETLINK_ISCSI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_ISCSI) == (8), "NETLINK_ISCSI != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_ISCSI 8
#endif
#if defined(NETLINK_AUDIT) || (defined(HAVE_DECL_NETLINK_AUDIT) && HAVE_DECL_NETLINK_AUDIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_AUDIT) == (9), "NETLINK_AUDIT != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_AUDIT 9
#endif
#if defined(NETLINK_FIB_LOOKUP) || (defined(HAVE_DECL_NETLINK_FIB_LOOKUP) && HAVE_DECL_NETLINK_FIB_LOOKUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_FIB_LOOKUP) == (10), "NETLINK_FIB_LOOKUP != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_FIB_LOOKUP 10
#endif
#if defined(NETLINK_CONNECTOR) || (defined(HAVE_DECL_NETLINK_CONNECTOR) && HAVE_DECL_NETLINK_CONNECTOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_CONNECTOR) == (11), "NETLINK_CONNECTOR != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_CONNECTOR 11
#endif
#if defined(NETLINK_NETFILTER) || (defined(HAVE_DECL_NETLINK_NETFILTER) && HAVE_DECL_NETLINK_NETFILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_NETFILTER) == (12), "NETLINK_NETFILTER != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_NETFILTER 12
#endif
#if defined(NETLINK_IP6_FW) || (defined(HAVE_DECL_NETLINK_IP6_FW) && HAVE_DECL_NETLINK_IP6_FW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_IP6_FW) == (13), "NETLINK_IP6_FW != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_IP6_FW 13
#endif
#if defined(NETLINK_DNRTMSG) || (defined(HAVE_DECL_NETLINK_DNRTMSG) && HAVE_DECL_NETLINK_DNRTMSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_DNRTMSG) == (14), "NETLINK_DNRTMSG != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_DNRTMSG 14
#endif
#if defined(NETLINK_KOBJECT_UEVENT) || (defined(HAVE_DECL_NETLINK_KOBJECT_UEVENT) && HAVE_DECL_NETLINK_KOBJECT_UEVENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_KOBJECT_UEVENT) == (15), "NETLINK_KOBJECT_UEVENT != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_KOBJECT_UEVENT 15
#endif
#if defined(NETLINK_GENERIC) || (defined(HAVE_DECL_NETLINK_GENERIC) && HAVE_DECL_NETLINK_GENERIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_GENERIC) == (16), "NETLINK_GENERIC != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_GENERIC 16
#endif
#if defined(NETLINK_SCSITRANSPORT) || (defined(HAVE_DECL_NETLINK_SCSITRANSPORT) && HAVE_DECL_NETLINK_SCSITRANSPORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_SCSITRANSPORT) == (18), "NETLINK_SCSITRANSPORT != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_SCSITRANSPORT 18
#endif
#if defined(NETLINK_ECRYPTFS) || (defined(HAVE_DECL_NETLINK_ECRYPTFS) && HAVE_DECL_NETLINK_ECRYPTFS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_ECRYPTFS) == (19), "NETLINK_ECRYPTFS != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_ECRYPTFS 19
#endif
#if defined(NETLINK_RDMA) || (defined(HAVE_DECL_NETLINK_RDMA) && HAVE_DECL_NETLINK_RDMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_RDMA) == (20), "NETLINK_RDMA != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_RDMA 20
#endif
#if defined(NETLINK_CRYPTO) || (defined(HAVE_DECL_NETLINK_CRYPTO) && HAVE_DECL_NETLINK_CRYPTO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_CRYPTO) == (21), "NETLINK_CRYPTO != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_CRYPTO 21
#endif
#if defined(NETLINK_SMC) || (defined(HAVE_DECL_NETLINK_SMC) && HAVE_DECL_NETLINK_SMC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NETLINK_SMC) == (22), "NETLINK_SMC != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NETLINK_SMC 22
#endif

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

static const struct xlat_data netlink_protocols_xdata[] = {
 [NETLINK_ROUTE] = XLAT(NETLINK_ROUTE),
 [NETLINK_UNUSED] = XLAT(NETLINK_UNUSED),
 [NETLINK_USERSOCK] = XLAT(NETLINK_USERSOCK),
 [NETLINK_FIREWALL] = XLAT(NETLINK_FIREWALL),
 [NETLINK_SOCK_DIAG] = XLAT(NETLINK_SOCK_DIAG),
 [NETLINK_NFLOG] = XLAT(NETLINK_NFLOG),
 [NETLINK_XFRM] = XLAT(NETLINK_XFRM),
 [NETLINK_SELINUX] = XLAT(NETLINK_SELINUX),
 [NETLINK_ISCSI] = XLAT(NETLINK_ISCSI),
 [NETLINK_AUDIT] = XLAT(NETLINK_AUDIT),
 [NETLINK_FIB_LOOKUP] = XLAT(NETLINK_FIB_LOOKUP),
 [NETLINK_CONNECTOR] = XLAT(NETLINK_CONNECTOR),
 [NETLINK_NETFILTER] = XLAT(NETLINK_NETFILTER),
 [NETLINK_IP6_FW] = XLAT(NETLINK_IP6_FW),
 [NETLINK_DNRTMSG] = XLAT(NETLINK_DNRTMSG),
 [NETLINK_KOBJECT_UEVENT] = XLAT(NETLINK_KOBJECT_UEVENT),
 [NETLINK_GENERIC] = XLAT(NETLINK_GENERIC),
 [NETLINK_SCSITRANSPORT] = XLAT(NETLINK_SCSITRANSPORT),
 [NETLINK_ECRYPTFS] = XLAT(NETLINK_ECRYPTFS),
 [NETLINK_RDMA] = XLAT(NETLINK_RDMA),
 [NETLINK_CRYPTO] = XLAT(NETLINK_CRYPTO),
 [NETLINK_SMC] = XLAT(NETLINK_SMC),
};
const struct xlat netlink_protocols[1] = { {
 .data = netlink_protocols_xdata,
 .size = ARRAY_SIZE(netlink_protocols_xdata),
 .type = XT_INDEXED,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
