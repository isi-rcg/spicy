/* Generated by ./xlat/gen.sh from ./xlat/uring_enter_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(IORING_ENTER_GETEVENTS) || (defined(HAVE_DECL_IORING_ENTER_GETEVENTS) && HAVE_DECL_IORING_ENTER_GETEVENTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_ENTER_GETEVENTS) == (1U), "IORING_ENTER_GETEVENTS != 1U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_ENTER_GETEVENTS 1U
#endif
#if defined(IORING_ENTER_SQ_WAKEUP) || (defined(HAVE_DECL_IORING_ENTER_SQ_WAKEUP) && HAVE_DECL_IORING_ENTER_SQ_WAKEUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_ENTER_SQ_WAKEUP) == (2U), "IORING_ENTER_SQ_WAKEUP != 2U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_ENTER_SQ_WAKEUP 2U
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat uring_enter_flags in mpers mode

# else

static const struct xlat_data uring_enter_flags_xdata[] = {
 XLAT(IORING_ENTER_GETEVENTS),
 XLAT(IORING_ENTER_SQ_WAKEUP),
};
static
const struct xlat uring_enter_flags[1] = { {
 .data = uring_enter_flags_xdata,
 .size = ARRAY_SIZE(uring_enter_flags_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
