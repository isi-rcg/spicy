.\" Copyright (C) 2005, 2013 Michael Kerrisk <mtk.manpages@gmail.com>
.\" a few fragments from an earlier (1996) version by
.\" Andries Brouwer (aeb@cwi.nl) remain.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Rewritten old page, 960210, aeb@cwi.nl
.\" Updated, added strtok_r. 2000-02-13 Nicol√°s Lichtmaier <nick@debian.org>
.\" 2005-11-17, mtk: Substantial parts rewritten
.\" 2013-05-19, mtk: added much further detail on the operation of strtok()
.\"
.TH STRTOK 3  2019-03-06 "GNU" "Linux Programmer's Manual"
.SH NAME
strtok, strtok_r \- extract tokens from strings
.SH SYNOPSIS
.nf
.B #include <string.h>
.PP
.BI "char *strtok(char *" str ", const char *" delim );
.PP
.BI "char *strtok_r(char *" str ", const char *" delim ", char **" saveptr );
.fi
.PP
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.PP
.ad l
.BR strtok_r ():
_POSIX_C_SOURCE
    || /* Glibc versions <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE
.ad b
.SH DESCRIPTION
The
.BR strtok ()
function breaks a string into a sequence of zero or more nonempty tokens.
On the first call to
.BR strtok (),
the string to be parsed should be
specified in
.IR str .
In each subsequent call that should parse the same string,
.I str
must be NULL.
.PP
The
.I delim
argument specifies a set of bytes that
delimit the tokens in the parsed string.
The caller may specify different strings in
.I delim
in successive
calls that parse the same string.
.PP
Each call to
.BR strtok ()
returns a pointer to a
null-terminated string containing the next token.
This string does not include the delimiting byte.
If no more tokens are found,
.BR strtok ()
returns NULL.
.PP
A sequence of calls to
.BR strtok ()
that operate on the same string maintains a pointer
that determines the point from which to start searching for the next token.
The first call to
.BR strtok ()
sets this pointer to point to the first byte of the string.
The start of the next token is determined by scanning forward
for the next nondelimiter byte in
.IR str .
If such a byte is found, it is taken as the start of the next token.
If no such byte is found,
then there are no more tokens, and
.BR strtok ()
returns NULL.
(A string that is empty or that contains only delimiters
will thus cause
.BR strtok ()
to return NULL on the first call.)
.PP
The end of each token is found by scanning forward until either
the next delimiter byte is found or until the
terminating null byte (\(aq\e0\(aq) is encountered.
If a delimiter byte is found, it is overwritten with
a null byte to terminate the current token, and
.BR strtok ()
saves a pointer to the following byte;
that pointer will be used as the starting point
when searching for the next token.
In this case,
.BR strtok ()
returns a pointer to the start of the found token.
.PP
From the above description,
it follows that a sequence of two or more contiguous delimiter bytes in
the parsed string is considered to be a single delimiter, and that
delimiter bytes at the start or end of the string are ignored.
Put another way: the tokens returned by
.BR strtok ()
are always nonempty strings.
Thus, for example, given the string "\fIaaa;;bbb,\fP",
successive calls to
.BR strtok ()
that specify the delimiter string "\fI;,\fP"
would return the strings "\fIaaa\fP" and "\fIbbb\fP",
and then a null pointer.
.PP
The
.BR strtok_r ()
function is a reentrant version
.BR strtok ().
The
.I saveptr
argument is a pointer to a
.IR "char\ *"
variable that is used internally by
.BR strtok_r ()
in order to maintain context between successive calls that parse the
same string.
.PP
On the first call to
.BR strtok_r (),
.I str
should point to the string to be parsed, and the value of
.I saveptr
is ignored.
In subsequent calls,
.I str
should be NULL, and
.I saveptr
should be unchanged since the previous call.
.PP
Different strings may be parsed concurrently using sequences of calls to
.BR strtok_r ()
that specify different
.I saveptr
arguments.
.SH RETURN VALUE
The
.BR strtok ()
and
.BR strtok_r ()
functions return a pointer to
the next token, or NULL if there are no more tokens.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strtok ()
T}	Thread safety	MT-Unsafe race:strtok
T{
.BR strtok_r ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.TP
.BR strtok ()
POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD.
.TP
.BR strtok_r ()
POSIX.1-2001, POSIX.1-2008.
.SH BUGS
Be cautious when using these functions.
If you do use them, note that:
.IP * 2
These functions modify their first argument.
.IP *
These functions cannot be used on constant strings.
.IP *
The identity of the delimiting byte is lost.
.IP *
The
.BR strtok ()
function uses a static buffer while parsing, so it's not thread safe.
Use
.BR strtok_r ()
if this matters to you.
.SH EXAMPLE
The program below uses nested loops that employ
.BR strtok_r ()
to break a string into a two-level hierarchy of tokens.
The first command-line argument specifies the string to be parsed.
The second argument specifies the delimiter byte(s)
to be used to separate that string into "major" tokens.
The third argument specifies the delimiter byte(s)
to be used to separate the "major" tokens into subtokens.
.PP
An example of the output produced by this program is the following:
.PP
.in +4n
.EX
.RB "$" " ./a.out \(aqa/bbb///cc;xxx:yyy:\(aq \(aq:;\(aq \(aq/\(aq"
1: a/bbb///cc
         \-\-> a
         \-\-> bbb
         \-\-> cc
2: xxx
         \-\-> xxx
3: yyy
         \-\-> yyy
.EE
.in
.SS Program source
\&
.EX
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    char *str1, *str2, *token, *subtoken;
    char *saveptr1, *saveptr2;
    int j;

    if (argc != 4) {
        fprintf(stderr, "Usage: %s string delim subdelim\en",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    for (j = 1, str1 = argv[1]; ; j++, str1 = NULL) {
        token = strtok_r(str1, argv[2], &saveptr1);
        if (token == NULL)
            break;
        printf("%d: %s\en", j, token);

        for (str2 = token; ; str2 = NULL) {
            subtoken = strtok_r(str2, argv[3], &saveptr2);
            if (subtoken == NULL)
                break;
            printf("\t \-\-> %s\en", subtoken);
        }
    }

    exit(EXIT_SUCCESS);
}
.EE
.PP
Another example program using
.BR strtok ()
can be found in
.BR getaddrinfo_a (3).
.SH SEE ALSO
.BR index (3),
.BR memchr (3),
.BR rindex (3),
.BR strchr (3),
.BR string (3),
.BR strpbrk (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3),
.BR wcstok (3)
.SH COLOPHON
This page is part of release 5.01 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
