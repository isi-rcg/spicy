.\" Copyright (C) 2017, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume.
.\" no responsibility for errors or omissions, or for damages resulting.
.\" from the use of the information contained herein.  The author(s) may.
.\" not have taken the same level of care in the production of this.
.\" manual, which is licensed free of charge, as they might when working.
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETENTROPY 3 2017-09-15 "Linux" "Linux Programmer's Manual"
.SH NAME
getentropy \- fill a buffer with random bytes
.SH SYNOPSIS
.B #include <unistd.h>
.PP
.BI "int getentropy(void *" buffer ", size_t " length );
.PP
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.PP
.BR getentropy ():
.br
.RS 4
.ad l
_DEFAULT_SOURCE
.RE
.ad
.SH DESCRIPTION
The
.BR getentropy ()
function writes
.I length
bytes of high-quality random data to the buffer starting
at the location pointed to by
.IR buffer .
The maximum permitted value for the
.I length
argument is 256.
.PP
A successful call to
.BR getentropy ()
always provides the requested number of bytes of entropy.
.SH RETURN VALUE
On success, this function returns zero.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
Part or all of the buffer specified by
.I buffer
and
.I length
is not in valid addressable memory.
.TP
.B EIO
.I length
is greater than 256.
.TP
.B EIO
An unspecified error occurred while trying to overwrite
.I buffer
with random data.
.TP
.B ENOSYS
This kernel version does not implement the
.BR getrandom (2)
system call required to implement this function.
.SH VERSIONS
The
.BR getentropy ()
function first appeared in glibc 2.25.
.SH CONFORMING TO
This function is nonstandard.
It is also present on OpenBSD.
.SH NOTES
The
.BR getentropy ()
function is implemented using
.BR getrandom (2).
.PP
Whereas the glibc wrapper makes
.BR getrandom (2)
a cancellation point,
.BR getentropy ()
is not a cancellation point.
.PP
.BR getentropy ()
is also declared in
.BR <sys/random.h> .
(No feature test macro need be defined to obtain the declaration from
that header file.)
.PP
A call to
.BR getentropy ()
may block if the system has just booted and the kernel has
not yet collected enough randomness to initialize the entropy pool.
In this case,
.BR getentropy ()
will keep blocking even if a signal is handled,
and will return only once the entropy pool has been initialized.
.SH SEE ALSO
.BR getrandom (2),
.BR urandom (4),
.BR random (7)
.SH COLOPHON
This page is part of release 5.01 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
