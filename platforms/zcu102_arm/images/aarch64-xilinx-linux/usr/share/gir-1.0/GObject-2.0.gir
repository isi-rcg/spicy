<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <package name="gobject-2.0"/>
  <c:include name="glib-object.h"/>
  <namespace name="GObject"
             version="2.0"
             shared-library="libgobject-2.0.so.0"
             c:identifier-prefixes="G"
             c:symbol-prefixes="g">
    <alias name="SignalCMarshaller" c:type="GSignalCMarshaller">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="34">This is the signature of marshaller functions, required to marshall
arrays of parameter values to signal emissions into C language callback
invocations. It is merely an alias to #GClosureMarshal since the #GClosure
mechanism takes over responsibility of actual function invocation for the
signal system.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="43"/>
      <type name="ClosureMarshal" c:type="GClosureMarshal"/>
    </alias>
    <alias name="SignalCVaMarshaller" c:type="GSignalCVaMarshaller">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="44">This is the signature of va_list marshaller functions, an optional
marshaller that can be used in some situations to avoid
marshalling the signal argument into GValues.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="51"/>
      <type name="VaClosureMarshal" c:type="GVaClosureMarshal"/>
    </alias>
    <alias name="Type" c:type="GType">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="375">A numerical value which represents the unique identifier of a registered
type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="382"/>
      <type name="gsize" c:type="gsize"/>
    </alias>
    <callback name="BaseFinalizeFunc" c:type="GBaseFinalizeFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="768">A callback function used by the type system to finalize those portions
of a derived types class structure that were setup from the corresponding
GBaseInitFunc() function. Class finalization basically works the inverse
way in which class initialization is performed.
See GClassInitFunc() for a discussion of the class initialization process.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="778"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="770">The #GTypeClass structure to finalize</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BaseInitFunc" c:type="GBaseInitFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="754">A callback function used by the type system to do base initialization
of the class structures of derived types. It is called as part of the
initialization process of all derived classes and should reallocate
or reset all dynamic class members copied over from the parent class.
For example, class members (such as strings) that are not sufficiently
handled by a plain memory copy of the parent class into the derived class
have to be altered. See GClassInitFunc() for a discussion of the class
initialization process.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="767"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="756">The #GTypeClass structure to initialize</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Binding"
           c:symbol-prefix="binding"
           c:type="GBinding"
           version="2.26"
           parent="Object"
           glib:type-name="GBinding"
           glib:get-type="g_binding_get_type">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="156">#GBinding is the representation of a binding between a property on a
#GObject instance (or source) and another property on another #GObject
instance (or target). Whenever the source property changes, the same
value is applied to the target property; for instance, the following
binding:

|[&lt;!-- language="C" --&gt;
  g_object_bind_property (object1, "property-a",
                          object2, "property-b",
                          G_BINDING_DEFAULT);
]|

will cause the property named "property-b" of @object2 to be updated
every time g_object_set() or the specific accessor changes the value of
the property "property-a" of @object1.

It is possible to create a bidirectional binding between two properties
of two #GObject instances, so that if either property changes, the
other is updated as well, for instance:

|[&lt;!-- language="C" --&gt;
  g_object_bind_property (object1, "property-a",
                          object2, "property-b",
                          G_BINDING_BIDIRECTIONAL);
]|

will keep the two properties in sync.

It is also possible to set a custom transformation function (in both
directions, in case of a bidirectional binding) to apply a custom
transformation from the source value to the target value before
applying it; for instance, the following binding:

|[&lt;!-- language="C" --&gt;
  g_object_bind_property_full (adjustment1, "value",
                               adjustment2, "value",
                               G_BINDING_BIDIRECTIONAL,
                               celsius_to_fahrenheit,
                               fahrenheit_to_celsius,
                               NULL, NULL);
]|

will keep the "value" property of the two adjustments in sync; the
@celsius_to_fahrenheit function will be called whenever the "value"
property of @adjustment1 changes and will transform the current value
of the property before applying it to the "value" property of @adjustment2.

Vice versa, the @fahrenheit_to_celsius function will be called whenever
the "value" property of @adjustment2 changes, and will transform the
current value of the property before applying it to the "value" property
of @adjustment1.

Note that #GBinding does not resolve cycles by itself; a cycle like

|[
  object1:propertyA -&gt; object2:propertyB
  object2:propertyB -&gt; object3:propertyC
  object3:propertyC -&gt; object1:propertyA
]|

might lead to an infinite loop. The loop, in this particular case,
can be avoided if the objects emit the #GObject::notify signal only
if the value has effectively been changed. A binding is implemented
using the #GObject::notify signal, so it is susceptible to all the
various ways of blocking a signal emission, like g_signal_stop_emission()
or g_signal_handler_block().

A binding will be severed, and the resources it allocates freed, whenever
either one of the #GObject instances it refers to are finalized, or when
the #GBinding instance loses its last reference.

Bindings for languages with garbage collection can use
g_binding_unbind() to explicitly release a binding between the source
and target properties, instead of relying on the last reference on the
binding, source, and target instances to drop.

#GBinding is available since GObject 2.26</doc>
      <method name="get_flags"
              c:identifier="g_binding_get_flags"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="763">Retrieves the flags passed when constructing the #GBinding.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="769">the #GBindingFlags used by the #GBinding</doc>
          <type name="BindingFlags" c:type="GBindingFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="765">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source"
              c:identifier="g_binding_get_source"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="774">Retrieves the #GObject instance used as the source of the binding.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="780">the source #GObject</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="776">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_property"
              c:identifier="g_binding_get_source_property"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="785">Retrieves the name of the property of #GBinding:source used as the source
of the binding.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="792">the name of the source property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="787">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target"
              c:identifier="g_binding_get_target"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="797">Retrieves the #GObject instance used as the target of the binding.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="803">the target #GObject</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="799">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_property"
              c:identifier="g_binding_get_target_property"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="808">Retrieves the name of the property of #GBinding:target used as the target
of the binding.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="815">the name of the target property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="810">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unbind" c:identifier="g_binding_unbind" version="2.38">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="820">Explicitly releases the binding between the source and the target
property expressed by @binding.

This function will release the reference that is being held on
the @binding instance; if you want to hold on to the #GBinding instance
after calling g_binding_unbind(), you will need to hold a reference
to it.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="822">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="flags"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5">Flags to be used to control the #GBinding</doc>
        <type name="BindingFlags"/>
      </property>
      <property name="source"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="14">The #GObject that should be used as the source of the binding</doc>
        <type name="Object"/>
      </property>
      <property name="source-property"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="23">The name of the property of #GBinding:source that should be used
as the source of the binding</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="target"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="33">The #GObject that should be used as the target of the binding</doc>
        <type name="Object"/>
      </property>
      <property name="target-property"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="42">The name of the property of #GBinding:target that should be used
as the target of the binding</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <bitfield name="BindingFlags"
              version="2.26"
              glib:type-name="GBindingFlags"
              glib:get-type="g_binding_flags_get_type"
              c:type="GBindingFlags">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
           line="73">Flags to be passed to g_object_bind_property() or
g_object_bind_property_full().

This enumeration can be extended at later date.</doc>
      <member name="default"
              value="0"
              c:identifier="G_BINDING_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
             line="75">The default binding; if the source property
  changes, the target property is updated with its value.</doc>
      </member>
      <member name="bidirectional"
              value="1"
              c:identifier="G_BINDING_BIDIRECTIONAL"
              glib:nick="bidirectional">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
             line="77">Bidirectional binding; if either the
  property of the source or the property of the target changes,
  the other is updated.</doc>
      </member>
      <member name="sync_create"
              value="2"
              c:identifier="G_BINDING_SYNC_CREATE"
              glib:nick="sync-create">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
             line="80">Synchronize the values of the source and
  target properties when creating the binding; the direction of
  the synchronization is always from the source to the target.</doc>
      </member>
      <member name="invert_boolean"
              value="4"
              c:identifier="G_BINDING_INVERT_BOOLEAN"
              glib:nick="invert-boolean">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
             line="83">If the two properties being bound are
  booleans, setting one to %TRUE will result in the other being
  set to %FALSE and vice versa. This flag will only work for
  boolean properties, and cannot be used when passing custom
  transformation functions to g_object_bind_property_full().</doc>
      </member>
    </bitfield>
    <callback name="BindingTransformFunc"
              c:type="GBindingTransformFunc"
              version="2.26">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
           line="49">A function to be called to transform @from_value to @to_value. If
this is the @transform_to function of a binding, then @from_value
is the @source_property on the @source object, and @to_value is the
@target_property on the @target object. If this is the
@transform_from function of a %G_BINDING_BIDIRECTIONAL binding,
then those roles are reversed.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                       line="68"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
             line="63">%TRUE if the transformation was successful, and %FALSE
  otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="binding" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
               line="51">a #GBinding</doc>
          <type name="Binding" c:type="GBinding*"/>
        </parameter>
        <parameter name="from_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
               line="52">the #GValue containing the value to transform</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="to_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
               line="53">the #GValue in which to store the transformed value</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
               line="54">data passed to the transform function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BoxedCopyFunc" c:type="GBoxedCopyFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
           line="47">This function is provided by the user and should produce a copy
of the passed in boxed structure.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                       line="56"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
             line="54">The newly created copy of the boxed structure.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="boxed" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
               line="49">The boxed structure to be copied.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BoxedFreeFunc" c:type="GBoxedFreeFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
           line="58">This function is provided by the user and should free the boxed
structure passed.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                       line="65"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="boxed" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
               line="60">The boxed structure to be freed.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="CClosure" c:type="GCClosure">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
           line="150">A #GCClosure is a specialization of #GClosure for C function callbacks.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="220"/>
      <field name="closure" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
             line="152">the #GClosure</doc>
        <type name="Closure" c:type="GClosure"/>
      </field>
      <field name="callback" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
             line="153">the callback function</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <function name="marshal_BOOLEAN__BOXED_BOXED"
                c:identifier="g_cclosure_marshal_BOOLEAN__BOXED_BOXED">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="871">A #GClosureMarshal function for use with signals with handlers that
take two boxed pointers as arguments and return a boolean.  If you
have such a signal, you will probably also need to use an
accumulator, such as g_signal_accumulator_true_handled().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="399"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="873">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="874">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="876">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="877">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="879">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="881">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_BOOLEAN__BOXED_BOXEDv"
                c:identifier="g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="892">The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__BOXED_BOXED().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="406"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="894">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="895">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="898">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="899">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="900">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="903">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="904">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_BOOLEAN__FLAGS"
                c:identifier="g_cclosure_marshal_BOOLEAN__FLAGS">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="911">A marshaller for a #GCClosure with a callback of type
`gboolean (*callback) (gpointer instance, gint arg1, gpointer user_data)` where the #gint parameter
denotes a flags type.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="347"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="913">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="914">a #GValue which can store the returned #gboolean</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="915">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="916">a #GValue array holding instance and arg1</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="917">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="919">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_BOOLEAN__FLAGSv"
                c:identifier="g_cclosure_marshal_BOOLEAN__FLAGSv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="927">The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__FLAGS().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="929">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="930">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="933">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="934">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="935">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="938">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="939">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_STRING__OBJECT_POINTER"
                c:identifier="g_cclosure_marshal_STRING__OBJECT_POINTER">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="970">A marshaller for a #GCClosure with a callback of type
`gchar* (*callback) (gpointer instance, GObject *arg1, gpointer arg2, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="382"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="972">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="973">a #GValue, which can store the returned string</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="974">3</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="975">a #GValue array holding instance, arg1 and arg2</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="976">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="978">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_STRING__OBJECT_POINTERv"
                c:identifier="g_cclosure_marshal_STRING__OBJECT_POINTERv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="985">The #GVaClosureMarshal equivalent to g_cclosure_marshal_STRING__OBJECT_POINTER().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="389"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="987">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="988">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="991">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="992">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="993">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="996">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="997">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__BOOLEAN"
                c:identifier="g_cclosure_marshal_VOID__BOOLEAN">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1004">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gboolean arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1006">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1007">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1008">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1009">a #GValue array holding the instance and the #gboolean parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1010">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1012">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__BOOLEANv"
                c:identifier="g_cclosure_marshal_VOID__BOOLEANv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1019">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOOLEAN().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1021">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1022">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1025">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1026">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1027">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1030">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1031">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__BOXED"
                c:identifier="g_cclosure_marshal_VOID__BOXED">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1038">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GBoxed *arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1040">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1041">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1042">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1043">a #GValue array holding the instance and the #GBoxed* parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1044">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1046">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__BOXEDv"
                c:identifier="g_cclosure_marshal_VOID__BOXEDv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1053">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOXED().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1055">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1056">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1059">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1060">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1061">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1064">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1065">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__CHAR"
                c:identifier="g_cclosure_marshal_VOID__CHAR">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1072">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gchar arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1074">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1075">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1076">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1077">a #GValue array holding the instance and the #gchar parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1078">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1080">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__CHARv"
                c:identifier="g_cclosure_marshal_VOID__CHARv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1087">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__CHAR().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1089">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1090">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1093">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1094">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1095">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1098">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1099">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__DOUBLE"
                c:identifier="g_cclosure_marshal_VOID__DOUBLE">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1106">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gdouble arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1108">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1109">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1110">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1111">a #GValue array holding the instance and the #gdouble parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1112">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1114">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__DOUBLEv"
                c:identifier="g_cclosure_marshal_VOID__DOUBLEv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1121">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__DOUBLE().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1123">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1124">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1127">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1128">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1129">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1132">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1133">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__ENUM"
                c:identifier="g_cclosure_marshal_VOID__ENUM">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1140">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gint arg1, gpointer user_data)` where the #gint parameter denotes an enumeration type..</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1142">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1143">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1144">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1145">a #GValue array holding the instance and the enumeration parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1146">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1148">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__ENUMv"
                c:identifier="g_cclosure_marshal_VOID__ENUMv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1155">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ENUM().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1157">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1158">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1161">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1162">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1163">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1166">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1167">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__FLAGS"
                c:identifier="g_cclosure_marshal_VOID__FLAGS">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1174">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gint arg1, gpointer user_data)` where the #gint parameter denotes a flags type.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1176">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1177">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1178">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1179">a #GValue array holding the instance and the flags parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1180">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1182">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__FLAGSv"
                c:identifier="g_cclosure_marshal_VOID__FLAGSv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1189">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLAGS().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1191">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1192">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1195">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1196">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1197">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1200">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1201">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__FLOAT"
                c:identifier="g_cclosure_marshal_VOID__FLOAT">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1208">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gfloat arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1210">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1211">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1212">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1213">a #GValue array holding the instance and the #gfloat parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1214">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1216">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__FLOATv"
                c:identifier="g_cclosure_marshal_VOID__FLOATv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1223">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLOAT().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1225">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1226">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1229">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1230">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1231">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1234">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1235">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__INT"
                c:identifier="g_cclosure_marshal_VOID__INT">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1242">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gint arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1244">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1245">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1246">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1247">a #GValue array holding the instance and the #gint parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1248">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1250">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__INTv"
                c:identifier="g_cclosure_marshal_VOID__INTv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1257">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__INT().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1259">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1260">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1263">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1264">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1265">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1268">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1269">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__LONG"
                c:identifier="g_cclosure_marshal_VOID__LONG">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1276">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, glong arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1278">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1279">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1280">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1281">a #GValue array holding the instance and the #glong parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1282">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1284">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__LONGv"
                c:identifier="g_cclosure_marshal_VOID__LONGv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1291">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__LONG().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1293">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1294">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1297">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1298">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1299">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1302">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1303">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__OBJECT"
                c:identifier="g_cclosure_marshal_VOID__OBJECT">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1310">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GObject *arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="296"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1312">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1313">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1314">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1315">a #GValue array holding the instance and the #GObject* parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1316">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1318">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__OBJECTv"
                c:identifier="g_cclosure_marshal_VOID__OBJECTv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1325">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__OBJECT().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="303"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1327">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1328">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1331">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1332">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1333">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1336">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1337">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__PARAM"
                c:identifier="g_cclosure_marshal_VOID__PARAM">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1344">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GParamSpec *arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1346">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1347">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1348">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1349">a #GValue array holding the instance and the #GParamSpec* parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1350">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1352">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__PARAMv"
                c:identifier="g_cclosure_marshal_VOID__PARAMv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1359">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__PARAM().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1361">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1362">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1365">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1366">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1367">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1370">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1371">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__POINTER"
                c:identifier="g_cclosure_marshal_VOID__POINTER">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1378">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gpointer arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1380">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1381">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1382">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1383">a #GValue array holding the instance and the #gpointer parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1384">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1386">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__POINTERv"
                c:identifier="g_cclosure_marshal_VOID__POINTERv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1393">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__POINTER().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1395">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1396">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1399">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1400">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1401">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1404">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1405">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__STRING"
                c:identifier="g_cclosure_marshal_VOID__STRING">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1412">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, const gchar *arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="228"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1414">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1415">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1416">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1417">a #GValue array holding the instance and the #gchar* parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1418">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1420">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__STRINGv"
                c:identifier="g_cclosure_marshal_VOID__STRINGv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1427">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__STRING().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1429">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1430">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1433">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1434">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1435">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1438">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1439">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UCHAR"
                c:identifier="g_cclosure_marshal_VOID__UCHAR">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1446">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, guchar arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1448">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1449">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1450">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1451">a #GValue array holding the instance and the #guchar parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1452">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1454">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UCHARv"
                c:identifier="g_cclosure_marshal_VOID__UCHARv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1461">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UCHAR().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1463">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1464">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1467">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1468">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1469">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1472">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1473">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UINT"
                c:identifier="g_cclosure_marshal_VOID__UINT">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1480">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, guint arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1482">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1483">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1484">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1485">a #GValue array holding the instance and the #guint parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1486">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1488">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UINT_POINTER"
                c:identifier="g_cclosure_marshal_VOID__UINT_POINTER">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1495">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, guint arg1, gpointer arg2, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="330"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1497">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1498">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1499">3</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1500">a #GValue array holding instance, arg1 and arg2</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1501">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1503">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UINT_POINTERv"
                c:identifier="g_cclosure_marshal_VOID__UINT_POINTERv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1510">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT_POINTER().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="337"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1512">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1513">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1516">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1517">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1518">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1521">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1522">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UINTv"
                c:identifier="g_cclosure_marshal_VOID__UINTv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1529">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1531">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1532">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1535">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1536">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1537">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1540">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1541">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__ULONG"
                c:identifier="g_cclosure_marshal_VOID__ULONG">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1548">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gulong arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1550">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1551">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1552">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1553">a #GValue array holding the instance and the #gulong parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1554">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1556">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__ULONGv"
                c:identifier="g_cclosure_marshal_VOID__ULONGv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1563">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ULONG().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1565">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1566">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1569">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1570">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1571">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1574">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1575">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__VARIANT"
                c:identifier="g_cclosure_marshal_VOID__VARIANT"
                version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1582">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GVariant *arg1, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="313"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1584">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1585">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1586">2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1587">a #GValue array holding the instance and the #GVariant* parameter</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1588">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1590">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__VARIANTv"
                c:identifier="g_cclosure_marshal_VOID__VARIANTv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1599">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VARIANT().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="320"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1601">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1602">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1605">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1606">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1607">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1610">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1611">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__VOID"
                c:identifier="g_cclosure_marshal_VOID__VOID">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1618">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gpointer user_data)`.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1620">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1621">ignored</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1622">1</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1623">a #GValue array holding only the instance</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1624">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1626">additional data specified when registering the marshaller</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__VOIDv"
                c:identifier="g_cclosure_marshal_VOID__VOIDv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1633">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VOID().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1635">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1636">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1639">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1640">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1641">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1644">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1645">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_generic"
                c:identifier="g_cclosure_marshal_generic"
                version="2.30">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1652">A generic marshaller function implemented via
[libffi](http://sourceware.org/libffi/).

Normally this function is not passed explicitly to g_signal_new(),
but used automatically by GLib when specifying a %NULL marshaller.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="298"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1654">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_gvalue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1655">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1657">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1658">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1660">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1662">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_generic_va"
                c:identifier="g_cclosure_marshal_generic_va"
                version="2.30"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1676">A generic #GVaClosureMarshal function implemented via
[libffi](http://sourceware.org/libffi/).</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="306"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1678">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1679">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1682">the instance on which the closure is
 invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1684">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1685">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1688">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1689">the #GType of each argument from
 @args_list.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="g_cclosure_new" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1699">Creates a new closure which invokes @callback_func with @user_data as
the last parameter.

@destroy_data will be called as a finalize notifier on the #GClosure.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="225"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1710">a floating reference to a new #GCClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="callback_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1701">the function to invoke</doc>
            <type name="Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="0">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1702">user data to pass to @callback_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1703">destroy notify to be called when @user_data is no longer used</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_object"
                c:identifier="g_cclosure_new_object"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1714">A variant of g_cclosure_new() which uses @object as @user_data and
calls g_object_watch_closure() on @object and the created
closure. This function is useful when you have a callback closely
associated with a #GObject, and want the callback to no longer run
after the object is is freed.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="604"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1725">a new #GCClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="callback_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1716">the function to invoke</doc>
            <type name="Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1717">a #GObject pointer to pass to @callback_func</doc>
            <type name="Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_object_swap"
                c:identifier="g_cclosure_new_object_swap"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1729">A variant of g_cclosure_new_swap() which uses @object as @user_data
and calls g_object_watch_closure() on @object and the created
closure. This function is useful when you have a callback closely
associated with a #GObject, and want the callback to no longer run
after the object is is freed.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="607"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1740">a new #GCClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="callback_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1731">the function to invoke</doc>
            <type name="Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1732">a #GObject pointer to pass to @callback_func</doc>
            <type name="Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_swap"
                c:identifier="g_cclosure_new_swap"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1744">Creates a new closure which invokes @callback_func with @user_data as
the first parameter.

@destroy_data will be called as a finalize notifier on the #GClosure.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="229"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1755">a floating reference to a new #GCClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="callback_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1746">the function to invoke</doc>
            <type name="Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="0">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1747">user data to pass to @callback_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1748">destroy notify to be called when @user_data is no longer used</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="Callback" c:type="GCallback">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
           line="77">The type used for callback functions in structure definitions and function
signatures. This doesn't mean that all callback functions must take no
parameters and return void. The required signature of a callback function
is determined by the context in which is used (e.g. the signal to which it
is connected). Use G_CALLBACK() to cast the callback function to a #GCallback.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="86"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </callback>
    <callback name="ClassFinalizeFunc" c:type="GClassFinalizeFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="882">A callback function used by the type system to finalize a class.
This function is rarely needed, as dynamically allocated class resources
should be handled by GBaseInitFunc() and GBaseFinalizeFunc().
Also, specification of a GClassFinalizeFunc() in the #GTypeInfo
structure of a static type is invalid, because classes of static types
will never be finalized (they are artificially kept alive when their
reference count drops to zero).</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="895"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="884">The #GTypeClass structure to finalize</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
        <parameter name="class_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="885">The @class_data member supplied via the #GTypeInfo structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClassInitFunc" c:type="GClassInitFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="779">A callback function used by the type system to initialize the class
of a specific type. This function should initialize all static class
members.

The initialization process of a class involves:

- Copying common members from the parent class over to the
  derived class structure.
- Zero initialization of the remaining members not copied
  over from the parent class.
- Invocation of the GBaseInitFunc() initializers of all parent
  types and the class' type.
- Invocation of the class' GClassInitFunc() initializer.

Since derived classes are partially initialized through a memory copy
of the parent class, the general rule is that GBaseInitFunc() and
GBaseFinalizeFunc() should take care of necessary reinitialization
and release of those class members that were introduced by the type
that specified these GBaseInitFunc()/GBaseFinalizeFunc().
GClassInitFunc() should only care about initializing static
class members, while dynamic class members (such as allocated strings
or reference counted resources) are better handled by a GBaseInitFunc()
for this type, so proper initialization of the dynamic class members
is performed for class initialization of derived types as well.

An example may help to correspond the intend of the different class
initializers:

|[&lt;!-- language="C" --&gt;
typedef struct {
  GObjectClass parent_class;
  gint         static_integer;
  gchar       *dynamic_string;
} TypeAClass;
static void
type_a_base_class_init (TypeAClass *class)
{
  class-&gt;dynamic_string = g_strdup ("some string");
}
static void
type_a_base_class_finalize (TypeAClass *class)
{
  g_free (class-&gt;dynamic_string);
}
static void
type_a_class_init (TypeAClass *class)
{
  class-&gt;static_integer = 42;
}

typedef struct {
  TypeAClass   parent_class;
  gfloat       static_float;
  GString     *dynamic_gstring;
} TypeBClass;
static void
type_b_base_class_init (TypeBClass *class)
{
  class-&gt;dynamic_gstring = g_string_new ("some other string");
}
static void
type_b_base_class_finalize (TypeBClass *class)
{
  g_string_free (class-&gt;dynamic_gstring);
}
static void
type_b_class_init (TypeBClass *class)
{
  class-&gt;static_float = 3.14159265358979323846;
}
]|
Initialization of TypeBClass will first cause initialization of
TypeAClass (derived classes reference their parent classes, see
g_type_class_ref() on this).

Initialization of TypeAClass roughly involves zero-initializing its fields,
then calling its GBaseInitFunc() type_a_base_class_init() to allocate
its dynamic members (dynamic_string), and finally calling its GClassInitFunc()
type_a_class_init() to initialize its static members (static_integer).
The first step in the initialization process of TypeBClass is then
a plain memory copy of the contents of TypeAClass into TypeBClass and
zero-initialization of the remaining fields in TypeBClass.
The dynamic members of TypeAClass within TypeBClass now need
reinitialization which is performed by calling type_a_base_class_init()
with an argument of TypeBClass.

After that, the GBaseInitFunc() of TypeBClass, type_b_base_class_init()
is called to allocate the dynamic members of TypeBClass (dynamic_gstring),
and finally the GClassInitFunc() of TypeBClass, type_b_class_init(),
is called to complete the initialization process with the static members
(static_float).

Corresponding finalization counter parts to the GBaseInitFunc() functions
have to be provided to release allocated resources at class finalization
time.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="880"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="781">The #GTypeClass structure to initialize.</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
        <parameter name="class_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="782">The @class_data member supplied via the #GTypeInfo structure.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Closure"
            c:type="GClosure"
            glib:type-name="GClosure"
            glib:get-type="g_closure_get_type"
            c:symbol-prefix="closure">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="258">A #GClosure represents a callback supplied by the programmer. It
will generally comprise a function of some kind and a marshaller
used to call it. It is the responsibility of the marshaller to
convert the arguments for the invocation from #GValues into
a suitable form, perform the callback on the converted arguments,
and transform the return value back into a #GValue.

In the case of C programs, a closure usually just holds a pointer
to a function and maybe a data argument, and the marshaller
converts between #GValue and native C types. The GObject
library provides the #GCClosure type for this purpose. Bindings for
other languages need marshallers which convert between #GValues
and suitable representations in the runtime of the language in
order to use functions written in that language as callbacks. Use
g_closure_set_marshal() to set the marshaller on such a custom
closure implementation.

Within GObject, closures play an important role in the
implementation of signals. When a signal is registered, the
@c_marshaller argument to g_signal_new() specifies the default C
marshaller for any closure which is connected to this
signal. GObject provides a number of C marshallers for this
purpose, see the g_cclosure_marshal_*() functions. Additional C
marshallers can be generated with the [glib-genmarshal][glib-genmarshal]
utility.  Closures can be explicitly connected to signals with
g_signal_connect_closure(), but it usually more convenient to let
GObject create a closure automatically by using one of the
g_signal_connect_*() functions which take a callback function/user
data pair.

Using closures has a number of important advantages over a simple
callback function/data pointer combination:

- Closures allow the callee to get the types of the callback parameters,
  which means that language bindings don't have to write individual glue
  for each callback type.

- The reference counting of #GClosure makes it easy to handle reentrancy
  right; if a callback is removed while it is being invoked, the closure
  and its parameters won't be freed until the invocation finishes.

- g_closure_invalidate() and invalidation notifiers allow callbacks to be
  automatically removed when the objects they point to go away.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="213"/>
      <field name="ref_count" readable="0" bits="15" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="meta_marshal_nouse" readable="0" bits="1" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="n_guards" readable="0" bits="1" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="n_fnotifiers" readable="0" bits="2" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="n_inotifiers" readable="0" bits="8" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="in_inotify" readable="0" bits="1" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="floating" readable="0" bits="1" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="derivative_flag" readable="0" bits="1" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="in_marshal" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
             line="168">Indicates whether the closure is currently being invoked with
 g_closure_invoke()</doc>
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="is_invalid" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
             line="170">Indicates whether the closure has been invalidated by
 g_closure_invalidate()</doc>
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="marshal">
        <callback name="marshal">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                           line="193"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="closure" transfer-ownership="none">
              <type name="Closure" c:type="GClosure*"/>
            </parameter>
            <parameter name="return_value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
            <parameter name="n_param_values" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="param_values" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="invocation_hint" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="marshal_data" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="data" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="notifiers" readable="0" private="1">
        <type name="ClosureNotifyData" c:type="GClosureNotifyData*"/>
      </field>
      <constructor name="new_object" c:identifier="g_closure_new_object">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1859">A variant of g_closure_new_simple() which stores @object in the
@data field of the closure and calls g_object_watch_closure() on
@object and the created closure. This function is mainly useful
when implementing new types of closures.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="610"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1871">a newly allocated #GClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="sizeof_closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1861">the size of the structure to allocate, must be at least
 `sizeof (GClosure)`</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1863">a #GObject pointer to store in the @data field of the newly
 allocated #GClosure</doc>
            <type name="Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_simple" c:identifier="g_closure_new_simple">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1875">Allocates a struct of the given size and initializes the initial
part as a #GClosure. This function is mainly useful when
implementing new types of closures.

|[&lt;!-- language="C" --&gt;
typedef struct _MyClosure MyClosure;
struct _MyClosure
{
  GClosure closure;
  // extra data goes here
};

static void
my_closure_finalize (gpointer  notify_data,
                     GClosure *closure)
{
  MyClosure *my_closure = (MyClosure *)closure;

  // free extra data here
}

MyClosure *my_closure_new (gpointer data)
{
  GClosure *closure;
  MyClosure *my_closure;

  closure = g_closure_new_simple (sizeof (MyClosure), data);
  my_closure = (MyClosure *) closure;

  // initialize extra data here

  g_closure_add_finalize_notifier (closure, notify_data,
                                   my_closure_finalize);
  return my_closure;
}
]|</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1918">a floating reference to a new #GClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="sizeof_closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1877">the size of the structure to allocate, must be at least
                 `sizeof (GClosure)`</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1879">data to store in the @data field of the newly allocated #GClosure</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_finalize_notifier"
              c:identifier="g_closure_add_finalize_notifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1778">Registers a finalization notifier which will be called when the
reference count of @closure goes down to 0. Multiple finalization
notifiers on a single closure are invoked in unspecified order. If
a single call to g_closure_unref() results in the closure being
both invalidated and finalized, then the invalidate notifiers will
be run before the finalize notifiers.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1780">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="notify_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1781">data to pass to @notify_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1782">the callback function to register</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_invalidate_notifier"
              c:identifier="g_closure_add_invalidate_notifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1793">Registers an invalidation notifier which will be called when the
@closure is invalidated with g_closure_invalidate(). Invalidation
notifiers are invoked before finalization notifiers, in an
unspecified order.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="257"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1795">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="notify_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1796">data to pass to @notify_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1797">the callback function to register</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_marshal_guards"
              c:identifier="g_closure_add_marshal_guards"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1806">Adds a pair of notifiers which get invoked before and after the
closure callback, respectively. This is typically used to protect
the extra arguments for the duration of the callback. See
g_object_watch_closure() for an example of marshal guards.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1808">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="pre_marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1809">data to pass
 to @pre_marshal_notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="pre_marshal_notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1811">a function to call before the closure callback</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
          <parameter name="post_marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1812">data to pass
 to @post_marshal_notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="post_marshal_notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1814">a function to call after the closure callback</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="g_closure_invalidate">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1823">Sets a flag on the closure to indicate that its calling
environment has become invalid, and thus causes any future
invocations of g_closure_invoke() on this @closure to be
ignored. Also, invalidation notifiers installed on the closure will
be called at this point. Note that unless you are holding a
reference to the closure yourself, the invalidation notifiers may
unref the closure and cause it to be destroyed, so if you need to
access the closure after calling g_closure_invalidate(), make sure
that you've previously called g_closure_ref().

Note that g_closure_invalidate() will also be called when the
reference count of a closure drops to zero (unless it has already
been invalidated before).</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="278"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1825">#GClosure to invalidate</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invoke" c:identifier="g_closure_invoke">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1843">Invokes the closure, i.e. executes the callback represented by the @closure.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="280"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1845">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="return_value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1846">a #GValue to store the return
               value. May be %NULL if the callback of @closure
               doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1849">the length of the @param_values array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1850">an array of
               #GValues holding the arguments on which to
               invoke the callback of @closure</doc>
            <array length="1" zero-terminated="0" c:type="const GValue*">
              <type name="Value" c:type="GValue"/>
            </array>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1853">a context-dependent invocation hint</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_closure_ref">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1922">Increments the reference count on a closure to force it staying
alive while the caller holds a pointer to it.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1929">The @closure passed in, for convenience</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1924">#GClosure to increment the reference count on</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_finalize_notifier"
              c:identifier="g_closure_remove_finalize_notifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1933">Removes a finalization notifier.

Notice that notifiers are automatically removed after they are run.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1935">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="notify_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1936">data which was passed to g_closure_add_finalize_notifier()
 when registering @notify_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1938">the callback function to remove</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_invalidate_notifier"
              c:identifier="g_closure_remove_invalidate_notifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1946">Removes an invalidation notifier.

Notice that notifiers are automatically removed after they are run.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1948">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="notify_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1949">data which was passed to g_closure_add_invalidate_notifier()
              when registering @notify_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1951">the callback function to remove</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_marshal"
              c:identifier="g_closure_set_marshal"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1959">Sets the marshaller of @closure. The `marshal_data`
of @marshal provides a way for a meta marshaller to provide additional
information to the marshaller. (See g_closure_set_meta_marshal().) For
GObject's C predefined marshallers (the g_cclosure_marshal_*()
functions), what it provides is a callback function to use instead of
@closure-&gt;callback.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1961">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="marshal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1962">a #GClosureMarshal function</doc>
            <type name="ClosureMarshal" c:type="GClosureMarshal"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_meta_marshal"
              c:identifier="g_closure_set_meta_marshal"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1973">Sets the meta marshaller of @closure.  A meta marshaller wraps
@closure-&gt;marshal and modifies the way it is called in some
fashion. The most common use of this facility is for C callbacks.
The same marshallers (generated by [glib-genmarshal][glib-genmarshal]),
are used everywhere, but the way that we get the callback function
differs. In most cases we want to use @closure-&gt;callback, but in
other cases we want to use some different technique to retrieve the
callback function.

For example, class closures for signals (see
g_signal_type_cclosure_new()) retrieve the callback function from a
fixed offset in the class structure.  The meta marshaller retrieves
the right callback and passes it to the marshaller as the
@marshal_data argument.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="274"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1975">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1976">context-dependent data to pass
 to @meta_marshal</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="meta_marshal"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1978">a #GClosureMarshal function</doc>
            <type name="ClosureMarshal" c:type="GClosureMarshal"/>
          </parameter>
        </parameters>
      </method>
      <method name="sink" c:identifier="g_closure_sink">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1997">Takes over the initial ownership of a closure.  Each closure is
initially created in a "floating" state, which means that the initial
reference count is not owned by any caller. g_closure_sink() checks
to see if the object is still floating, and if so, unsets the
floating state and decreases the reference count. If the closure
is not floating, g_closure_sink() does nothing. The reason for the
existence of the floating state is to prevent cumbersome code
sequences like:
|[&lt;!-- language="C" --&gt;
closure = g_cclosure_new (cb_func, cb_data);
g_source_set_closure (source, closure);
g_closure_unref (closure); // GObject doesn't really need this
]|
Because g_source_set_closure() (and similar functions) take ownership of the
initial reference count, if it is unowned, we instead can write:
|[&lt;!-- language="C" --&gt;
g_source_set_closure (source, g_cclosure_new (cb_func, cb_data));
]|

Generally, this function is used together with g_closure_ref(). Ane example
of storing a closure for later notification looks like:
|[&lt;!-- language="C" --&gt;
static GClosure *notify_closure = NULL;
void
foo_notify_set_closure (GClosure *closure)
{
  if (notify_closure)
    g_closure_unref (notify_closure);
  notify_closure = closure;
  if (notify_closure)
    {
      g_closure_ref (notify_closure);
      g_closure_sink (notify_closure);
    }
}
]|

Because g_closure_sink() may decrement the reference count of a closure
(if it hasn't been called on @closure yet) just like g_closure_unref(),
g_closure_ref() should be called prior to this function.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="1999">#GClosure to decrement the initial reference count on, if it's
          still being held</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="g_closure_unref">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2045">Decrements the reference count of a closure after it was previously
incremented by the same caller. If no other callers are using the
closure, then the closure will be destroyed and freed.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                         line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2047">#GClosure to decrement the reference count on</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="ClosureMarshal" c:type="GClosureMarshal">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
           line="97">The type used for marshaller functions.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="115"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="99">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="100">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="103">the length of the @param_values array</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="104">an array of
 #GValues holding the arguments on which to invoke the
 callback of @closure</doc>
          <array length="2" zero-terminated="0" c:type="const GValue*">
            <type name="Value" c:type="GValue"/>
          </array>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="107">the invocation hint given as the
 last argument to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="109">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClosureNotify" c:type="GClosureNotify">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
           line="87">The type used for the various notification callbacks which can be registered
on closures.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="95"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="89">data specified when registering the notification callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="90">the #GClosure on which the notification is emitted</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ClosureNotifyData" c:type="GClosureNotifyData">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="165"/>
      <field name="data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="notify" writable="1">
        <type name="ClosureNotify" c:type="GClosureNotify"/>
      </field>
    </record>
    <bitfield name="ConnectFlags" c:type="GConnectFlags">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="145">The connection flags are used to specify the behaviour of a signal's
connection.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="159"/>
      <member name="after" value="1" c:identifier="G_CONNECT_AFTER">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="147">whether the handler should be called before or after the
 default handler of the signal.</doc>
      </member>
      <member name="swapped" value="2" c:identifier="G_CONNECT_SWAPPED">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="149">whether the instance and data should be swapped when
 calling the handler; see g_signal_connect_swapped() for an example.</doc>
      </member>
    </bitfield>
    <record name="EnumClass" c:type="GEnumClass">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
           line="143">The class of an enumeration type holds information about its
possible values.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="164"/>
      <field name="g_type_class" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="145">the parent class</doc>
        <type name="TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="minimum" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="146">the smallest possible value.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="maximum" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="147">the largest possible value.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="n_values" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="148">the number of possible values.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="values" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="149">an array of #GEnumValue structs describing the
 individual values.</doc>
        <type name="EnumValue" c:type="GEnumValue*"/>
      </field>
    </record>
    <record name="EnumValue" c:type="GEnumValue">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
           line="185">A structure which contains a single enum value, its name, and its
nickname.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="199"/>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="187">the enum value</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="value_name" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="188">the name of the value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value_nick" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="189">the nickname of the value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <record name="FlagsClass" c:type="GFlagsClass">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
           line="165">The class of a flags type holds information about its
possible values.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="184"/>
      <field name="g_type_class" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="167">the parent class</doc>
        <type name="TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="mask" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="168">a mask covering all possible values.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_values" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="169">the number of possible values.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="values" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="170">an array of #GFlagsValue structs describing the
 individual values.</doc>
        <type name="FlagsValue" c:type="GFlagsValue*"/>
      </field>
    </record>
    <record name="FlagsValue" c:type="GFlagsValue">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
           line="200">A structure which contains a single flags value, its name, and its
nickname.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="214"/>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="202">the flags value</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="value_name" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="203">the name of the value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value_nick" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
             line="204">the nickname of the value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <class name="InitiallyUnowned"
           c:symbol-prefix="initially_unowned"
           c:type="GInitiallyUnowned"
           parent="Object"
           glib:type-name="GInitiallyUnowned"
           glib:get-type="g_initially_unowned_get_type"
           glib:type-struct="InitiallyUnownedClass">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="370">All the fields in the GInitiallyUnowned structure
are private to the #GInitiallyUnowned implementation and should never be
accessed directly.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="190"/>
      <field name="g_type_instance">
        <type name="TypeInstance" c:type="GTypeInstance"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="qdata" readable="0" private="1">
        <type name="GLib.Data" c:type="GData*"/>
      </field>
    </class>
    <record name="InitiallyUnownedClass"
            c:type="GInitiallyUnownedClass"
            glib:is-gtype-struct-for="InitiallyUnowned">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="377">The class structure for the GInitiallyUnowned type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="190"/>
      <field name="g_type_class">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
             line="255">the parent class</doc>
        <type name="TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="construct_properties" readable="0" private="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="constructor" introspectable="0">
        <callback name="constructor" introspectable="0">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="324"/>
          <return-value>
            <type name="Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="type" transfer-ownership="none">
              <type name="GType" c:type="GType"/>
            </parameter>
            <parameter name="n_construct_properties" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="construct_properties" transfer-ownership="none">
              <type name="ObjectConstructParam"
                    c:type="GObjectConstructParam*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_property">
        <callback name="set_property">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="328"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_property">
        <callback name="get_property">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="332"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dispose">
        <callback name="dispose">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="336"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finalize">
        <callback name="finalize">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="337"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dispatch_properties_changed">
        <callback name="dispatch_properties_changed">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="339"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="n_pspecs" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="pspecs" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notify">
        <callback name="notify">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="343"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                   line="2959">a #GObject</doc>
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="constructed">
        <callback name="constructed">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="347"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="flags" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="pdummy" readable="0" private="1">
        <array zero-terminated="0" fixed-size="6">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="InstanceInitFunc" c:type="GInstanceInitFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="897">A callback function used by the type system to initialize a new
instance of a type. This function initializes all instance members and
allocates any resources required by it.

Initialization of a derived instance involves calling all its parent
types instance initializers, so the class member of the instance
is altered during its initialization to always point to the class that
belongs to the type the current initializer was introduced for.

The extended members of @instance are guaranteed to have been filled with
zeros before this function is called.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="915"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="899">The instance to initialize</doc>
          <type name="TypeInstance" c:type="GTypeInstance*"/>
        </parameter>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="900">The class of the type the instance is
   created for</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="InterfaceFinalizeFunc" c:type="GInterfaceFinalizeFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="931">A callback function used by the type system to finalize an interface.
This function should destroy any internal data and release any resources
allocated by the corresponding GInterfaceInitFunc() function.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="940"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="933">The interface structure to finalize</doc>
          <type name="TypeInterface" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="934">The @interface_data supplied via the #GInterfaceInfo structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="InterfaceInfo" c:type="GInterfaceInfo">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="1071">A structure that provides information to the type system which is
used specifically for managing interface types.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1085"/>
      <field name="interface_init" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1073">location of the interface initialization function</doc>
        <type name="InterfaceInitFunc" c:type="GInterfaceInitFunc"/>
      </field>
      <field name="interface_finalize" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1074">location of the interface finalization function</doc>
        <type name="InterfaceFinalizeFunc" c:type="GInterfaceFinalizeFunc"/>
      </field>
      <field name="interface_data" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1075">user-supplied data passed to the interface init/finalize functions</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <callback name="InterfaceInitFunc" c:type="GInterfaceInitFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="917">A callback function used by the type system to initialize a new
interface.  This function should initialize all internal data and
allocate any resources required by the interface.

The members of @iface_data are guaranteed to have been filled with
zeros before this function is called.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="929"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="919">The interface structure to initialize</doc>
          <type name="TypeInterface" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="920">The @interface_data supplied via the #GInterfaceInfo structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="GObject"
           glib:type-name="GObject"
           glib:get-type="g_object_get_type"
           glib:type-struct="ObjectClass">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="239">All the fields in the GObject structure are private
to the #GObject implementation and should never be accessed directly.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="354"/>
      <constructor name="new" c:identifier="g_object_new" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2886">Creates a new instance of a #GObject subtype and sets its properties.

Construction parameters (see #G_PARAM_CONSTRUCT, #G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="419"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2898">a new instance of
  @object_type</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2888">the type id of the #GObject subtype to instantiate</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2889">the name of the first property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2890">the value of the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_valist"
                   c:identifier="g_object_new_valist"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2903">Creates a new instance of a #GObject subtype and sets its properties.

Construction parameters (see #G_PARAM_CONSTRUCT, #G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="432"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2915">a new instance of @object_type</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2905">the type id of the #GObject subtype to instantiate</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2906">the name of the first property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2907">the value of the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_properties"
                   c:identifier="g_object_new_with_properties"
                   version="2.54"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2919">Creates a new instance of a #GObject subtype and sets its properties using
the provided arrays. Both arrays must have exactly @n_properties elements,
and the names and values correspond by index.

Construction parameters (see %G_PARAM_CONSTRUCT, %G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="423"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2933">a new instance of
@object_type</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2921">the object type to instantiate</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="n_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2922">the number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2923">the names of each property to be set</doc>
            <array length="1" zero-terminated="0" c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2924">the values of each property to be set</doc>
            <array length="1" zero-terminated="0" c:type="const GValue*">
              <type name="Value" c:type="GValue"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="newv"
                   c:identifier="g_object_newv"
                   deprecated="1"
                   deprecated-version="2.54">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2939">Creates a new instance of a #GObject subtype and sets its properties.

Construction parameters (see #G_PARAM_CONSTRUCT, #G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_new_with_properties() instead.
deprecated. See #GParameter for more information.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="428"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2950">a new instance of
@object_type</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2941">the type id of the #GObject subtype to instantiate</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="n_parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2942">the length of the @parameters array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2943">an array of #GParameter</doc>
            <array length="1" zero-terminated="0" c:type="GParameter*">
              <type name="Parameter" c:type="GParameter"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <function name="compat_control" c:identifier="g_object_compat_control">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="641"/>
        <return-value transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <parameter name="what" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="interface_find_property"
                c:identifier="g_object_interface_find_property"
                version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2808">Find the #GParamSpec with the given name for an
interface. Generally, the interface vtable passed in as @g_iface
will be the default vtable from g_type_default_interface_ref(), or,
if you know the interface has already been loaded,
g_type_default_interface_peek().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="410"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2821">the #GParamSpec for the property of the
         interface with the name @property_name, or %NULL if no
         such property exists.</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <parameter name="g_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2810">any interface vtable for the
 interface, or the default vtable for the interface</doc>
            <type name="TypeInterface" c:type="gpointer"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2812">name of a property to lookup.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="interface_install_property"
                c:identifier="g_object_interface_install_property"
                version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2827">Add a property to an interface; this is only useful for interfaces
that are added to GObject-derived types. Adding a property to an
interface forces all objects classes with that interface to have a
compatible property. The compatible property could be a newly
created #GParamSpec, but normally
g_object_class_override_property() will be used so that the object
class only needs to provide an implementation and inherits the
property description, default value, bounds, and so forth from the
interface property.

This function is meant to be called from the interface's default
vtable initialization function (the @class_init member of
#GTypeInfo.) It must not be called after after @class_init has
been called for any object types implementing this interface.

If @pspec is a floating reference, it will be consumed.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="407"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="g_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2829">any interface vtable for the
   interface, or the default
 vtable for the interface.</doc>
            <type name="TypeInterface" c:type="gpointer"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2832">the #GParamSpec for the new property</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <function name="interface_list_properties"
                c:identifier="g_object_interface_list_properties"
                version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2855">Lists the properties of an interface.Generally, the interface
vtable passed in as @g_iface will be the default vtable from
g_type_default_interface_ref(), or, if you know the interface has
already been loaded, g_type_default_interface_peek().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="413"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2867">a
         pointer to an array of pointers to #GParamSpec
         structures. The paramspecs are owned by GLib, but the
         array should be freed with g_free() when you are done with
         it.</doc>
          <array length="1" zero-terminated="0" c:type="GParamSpec**">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="g_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2857">any interface vtable for the
 interface, or the default vtable for the interface</doc>
            <type name="TypeInterface" c:type="gpointer"/>
          </parameter>
          <parameter name="n_properties_p"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2859">location to store number of properties returned.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="constructed">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="347"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dispatch_properties_changed">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="339"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="n_pspecs" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pspecs" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dispose">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="336"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="finalize">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="337"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_property">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="332"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notify" invoker="notify">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2957">Emits a "notify" signal for the property @property_name on @object.

When possible, eg. when signaling a property change from within the class
that registered the property, you should use g_object_notify_by_pspec()
instead.

Note that emission of the notify signal may be blocked with
g_object_freeze_notify(). In this case, the signal emissions are queued
and will be emitted (in reverse order) when g_object_thaw_notify() is
called.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="343"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2959">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_property">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="328"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_toggle_ref"
              c:identifier="g_object_add_toggle_ref"
              version="2.8"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2240">Increases the reference count of the object by one and sets a
callback to be called when all other references to the object are
dropped, or when this is already the last reference to the object
and another reference is established.

This functionality is intended for binding @object to a proxy
object managed by another memory manager. This is done with two
paired references: the strong reference added by
g_object_add_toggle_ref() and a reverse reference to the proxy
object which is either a strong reference or weak reference.

The setup is that when there are no other references to @object,
only a weak reference is held in the reverse direction from @object
to the proxy object, but when there are other references held to
@object, a strong reference is held. The @notify callback is called
when the reference from @object to the proxy object should be
"toggled" from strong to weak (@is_last_ref true) or weak to strong
(@is_last_ref false).

Since a (normal) reference must be held to the object before
calling g_object_add_toggle_ref(), the initial state of the reverse
link is always strong.

Multiple toggle references may be added to the same gobject,
however if there are multiple toggle references to an object, none
of them will ever be notified until all but one are removed.  For
this reason, you should only ever use a toggle reference if there
is important state in the proxy object.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="533"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2242">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="notify" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2243">a function to call when this reference is the
 last reference to the object, or is no longer
 the last reference.</doc>
            <type name="ToggleNotify" c:type="GToggleNotify"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2246">data to pass to @notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_weak_pointer"
              c:identifier="g_object_add_weak_pointer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2281">Adds a weak reference from weak_pointer to @object to indicate that
the pointer located at @weak_pointer_location is only valid during
the lifetime of @object. When the @object is finalized,
@weak_pointer will be set to %NULL.

Note that as with g_object_weak_ref(), the weak references created by
this method are not thread-safe: they cannot safely be used in one
thread if the object's last g_object_unref() might happen in another
thread. Use #GWeakRef if thread-safety is required.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="504"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2283">The object that should be weak referenced.</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="weak_pointer_location"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2284">The memory address
   of a pointer.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_property"
              c:identifier="g_object_bind_property"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2299">Creates a binding between @source_property on @source and @target_property
on @target. Whenever the @source_property is changed the @target_property is
updated using the same value. For instance:

|[
  g_object_bind_property (action, "active", widget, "sensitive", 0);
]|

Will result in the "sensitive" property of the widget #GObject instance to be
updated with the same value of the "active" property of the action #GObject
instance.

If @flags contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
if @target_property on @target changes then the @source_property on @source
will be updated as well.

The binding will automatically be removed when either the @source or the
@target instances are finalized. To remove the binding without affecting the
@source and the @target you can just call g_object_unref() on the returned
#GBinding instance.

A #GObject can have multiple bindings.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2330">the #GBinding instance representing the
    binding between the two #GObject instances. The binding is released
    whenever the #GBinding reference count reaches zero.</doc>
          <type name="Binding" c:type="GBinding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2301">the source #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2302">the property on @source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2303">the target #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2304">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2305">flags to pass to #GBinding</doc>
            <type name="BindingFlags" c:type="GBindingFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_property_full"
              c:identifier="g_object_bind_property_full"
              shadowed-by="bind_property_with_closures"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2337">Complete version of g_object_bind_property().

Creates a binding between @source_property on @source and @target_property
on @target, allowing you to set the transformation functions to be used by
the binding.

If @flags contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
if @target_property on @target changes then the @source_property on @source
will be updated as well. The @transform_from function is only used in case
of bidirectional bindings, otherwise it will be ignored

The binding will automatically be removed when either the @source or the
@target instances are finalized. This will release the reference that is
being held on the #GBinding instance; if you want to hold on to the
#GBinding instance, you will need to hold a reference to it.

To remove the binding, call g_binding_unbind().

A #GObject can have multiple bindings.

The same @user_data parameter will be used for both @transform_to
and @transform_from transformation functions; the @notify function will
be called once, when the binding is removed. If you need different data
for each transformation function, please use
g_object_bind_property_with_closures() instead.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2379">the #GBinding instance representing the
    binding between the two #GObject instances. The binding is released
    whenever the #GBinding reference count reaches zero.</doc>
          <type name="Binding" c:type="GBinding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2339">the source #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2340">the property on @source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2341">the target #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2342">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2343">flags to pass to #GBinding</doc>
            <type name="BindingFlags" c:type="GBindingFlags"/>
          </parameter>
          <parameter name="transform_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2344">the transformation function
    from the @source to the @target, or %NULL to use the default</doc>
            <type name="BindingTransformFunc" c:type="GBindingTransformFunc"/>
          </parameter>
          <parameter name="transform_from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2346">the transformation function
    from the @target to the @source, or %NULL to use the default</doc>
            <type name="BindingTransformFunc" c:type="GBindingTransformFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2348">custom data to be passed to the transformation functions,
    or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2350">a function to call when disposing the binding, to free
    resources used by the transformation functions, or %NULL if not required</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_property_with_closures"
              c:identifier="g_object_bind_property_with_closures"
              shadows="bind_property_full"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2386">Creates a binding between @source_property on @source and @target_property
on @target, allowing you to set the transformation functions to be used by
the binding.

This function is the language bindings friendly version of
g_object_bind_property_full(), using #GClosures instead of
function pointers.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gbinding.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2406">the #GBinding instance representing the
    binding between the two #GObject instances. The binding is released
    whenever the #GBinding reference count reaches zero.</doc>
          <type name="Binding" c:type="GBinding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2388">the source #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2389">the property on @source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2390">the target #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2391">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2392">flags to pass to #GBinding</doc>
            <type name="BindingFlags" c:type="GBindingFlags"/>
          </parameter>
          <parameter name="transform_to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2393">a #GClosure wrapping the transformation function
    from the @source to the @target, or %NULL to use the default</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="transform_from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2395">a #GClosure wrapping the transformation function
    from the @target to the @source, or %NULL to use the default</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect"
              c:identifier="g_object_connect"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2557">A convenience function to connect multiple signals at once.

The signal specs expected by this function have the form
"modifier::signal_name", where modifier can be one of the following:
* - signal: equivalent to g_signal_connect_data (..., NULL, 0)
- object-signal, object_signal: equivalent to g_signal_connect_object (..., 0)
- swapped-signal, swapped_signal: equivalent to g_signal_connect_data (..., NULL, G_CONNECT_SWAPPED)
- swapped_object_signal, swapped-object-signal: equivalent to g_signal_connect_object (..., G_CONNECT_SWAPPED)
- signal_after, signal-after: equivalent to g_signal_connect_data (..., NULL, G_CONNECT_AFTER)
- object_signal_after, object-signal-after: equivalent to g_signal_connect_object (..., G_CONNECT_AFTER)
- swapped_signal_after, swapped-signal-after: equivalent to g_signal_connect_data (..., NULL, G_CONNECT_SWAPPED | G_CONNECT_AFTER)
- swapped_object_signal_after, swapped-object-signal-after: equivalent to g_signal_connect_object (..., G_CONNECT_SWAPPED | G_CONNECT_AFTER)

|[&lt;!-- language="C" --&gt;
  menu-&gt;toplevel = g_object_connect (g_object_new (GTK_TYPE_WINDOW,
						   "type", GTK_WINDOW_POPUP,
						   "child", menu,
						   NULL),
				     "signal::event", gtk_menu_window_event, menu,
				     "signal::size_request", gtk_menu_window_size_request, menu,
				     "signal::destroy", gtk_widget_destroyed, &amp;menu-&gt;toplevel,
				     NULL);
]|</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="444"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2589">@object</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2559">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="signal_spec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2560">the spec for the first signal</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2561">#GCallback for the first signal, followed by data for the
      first signal, followed optionally by more signal
      spec/callback/data triples, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect"
              c:identifier="g_object_disconnect"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2593">A convenience function to disconnect multiple signals at once.

The signal specs expected by this function have the form
"any_signal", which means to disconnect any signal with matching
callback and data, or "any_signal::signal_name", which only
disconnects the signal named "signal_name".</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="448"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2595">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="signal_spec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2596">the spec for the first signal</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2597">#GCallback for the first signal, followed by data for the first signal,
 followed optionally by more signal spec/callback/data triples,
 followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_data"
              c:identifier="g_object_dup_data"
              version="2.34"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2610">This is a variant of g_object_get_data() which returns
a 'duplicate' of the value. @dup_func defines the
meaning of 'duplicate' in this context, it could e.g.
take a reference on a ref-counted object.

If the @key is not set on the object then @dup_func
will be called with a %NULL argument.

Note that @dup_func is called while user data of @object
is locked.

This function can be useful to avoid races when multiple
threads are using object data on the same key on the same
object.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="587"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2632">the result of calling @dup_func on the value
    associated with @key on @object, or %NULL if not set.
    If @dup_func is %NULL, the value is returned
    unmodified.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2612">the #GObject to store user data on</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2613">a string, naming the user data pointer</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dup_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2614">function to dup the value</doc>
            <type name="GLib.DuplicateFunc" c:type="GDuplicateFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2615">passed as user_data to @dup_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_qdata"
              c:identifier="g_object_dup_qdata"
              version="2.34"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2640">This is a variant of g_object_get_qdata() which returns
a 'duplicate' of the value. @dup_func defines the
meaning of 'duplicate' in this context, it could e.g.
take a reference on a ref-counted object.

If the @quark is not set on the object then @dup_func
will be called with a %NULL argument.

Note that @dup_func is called while user data of @object
is locked.

This function can be useful to avoid races when multiple
threads are using object data on the same key on the same
object.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="558"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2662">the result of calling @dup_func on the value
    associated with @quark on @object, or %NULL if not set.
    If @dup_func is %NULL, the value is returned
    unmodified.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2642">the #GObject to store user data on</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2643">a #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="dup_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2644">function to dup the value</doc>
            <type name="GLib.DuplicateFunc" c:type="GDuplicateFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2645">passed as user_data to @dup_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="force_floating"
              c:identifier="g_object_force_floating"
              version="2.10">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2670">This function is intended for #GObject implementations to re-enforce
a [floating][floating-ref] object reference. Doing this is seldom
required: all #GInitiallyUnowneds are created with a floating reference
which usually just needs to be sunken by calling g_object_ref_sink().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2672">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="freeze_notify" c:identifier="g_object_freeze_notify">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2683">Increases the freeze count on @object. If the freeze count is
non-zero, the emission of "notify" signals on @object is
stopped. The signals are queued until the freeze count is decreased
to zero. Duplicate notifications are squashed so that at most one
#GObject::notify signal is emitted for each property modified while the
object is frozen.

This is necessary for accessors that modify multiple properties to prevent
premature notification while the object is still being modified.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="478"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2685">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="g_object_get" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2699">Gets properties of an object.

In general, a copy is made of the property contents and the caller
is responsible for freeing the memory in the appropriate manner for
the type, for instance by calling g_free() or g_object_unref().

Here is an example of using g_object_get() to get the contents
of three properties: an integer, a string and an object:
|[&lt;!-- language="C" --&gt;
 gint intval;
 gchar *strval;
 GObject *objval;

 g_object_get (my_object,
               "int-property", &amp;intval,
               "str-property", &amp;strval,
               "obj-property", &amp;objval,
               NULL);

 // Do something with intval, strval, objval

 g_free (strval);
 g_object_unref (objval);
 ]|</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="440"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2701">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2702">name of the first property to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2703">return location for the first property, followed optionally by more
 name/return location pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="g_object_get_data">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2733">Gets a named field from the objects table of associations (see g_object_set_data()).</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="571"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2740">the data if found,
         or %NULL if no such data exists.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2735">#GObject containing the associations</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2736">name of the key for that association</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property" c:identifier="g_object_get_property">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2745">Gets a property of an object. @value must have been initialized to the
expected type of the property (or a type to which the expected type can be
transformed) using g_value_init().

In general, a copy is made of the property contents and the caller is
responsible for freeing the memory by calling g_value_unset().

Note that g_object_get_property() is really intended for language
bindings, g_object_get() is much more convenient for C programming.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="474"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2747">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2748">the name of the property to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2749">return location for the property value</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_qdata" c:identifier="g_object_get_qdata">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2763">This function gets back user data pointers stored via
g_object_set_qdata().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="542"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2771">The user data pointer set, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2765">The GObject to get a stored user data pointer from</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2766">A #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_valist"
              c:identifier="g_object_get_valist"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2775">Gets properties of an object.

In general, a copy is made of the property contents and the caller
is responsible for freeing the memory in the appropriate manner for
the type, for instance by calling g_free() or g_object_unref().

See g_object_get().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="466"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2777">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2778">name of the first property to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2779">return location for the first property, followed optionally by more
 name/return location pairs, followed by %NULL</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="getv" c:identifier="g_object_getv" version="2.54">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2792">Gets @n_properties properties for an @object.
Obtained properties will be set to @values. All properties must be valid.
Warnings will be emitted and undefined behaviour may result if invalid
properties are passed in.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="461"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2794">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="n_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2795">the number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2796">the names of each property to get</doc>
            <array length="0" zero-terminated="0" c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2797">the values of each property to get</doc>
            <array length="0" zero-terminated="0" c:type="GValue*">
              <type name="Value" c:type="GValue"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="is_floating"
              c:identifier="g_object_is_floating"
              version="2.10">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2875">Checks whether @object has a [floating][floating-ref] reference.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="488"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2882">%TRUE if @object has a floating reference</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2877">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify" c:identifier="g_object_notify">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2957">Emits a "notify" signal for the property @property_name on @object.

When possible, eg. when signaling a property change from within the class
that registered the property, you should use g_object_notify_by_pspec()
instead.

Note that emission of the notify signal may be blocked with
g_object_freeze_notify(). In this case, the signal emissions are queued
and will be emitted (in reverse order) when g_object_thaw_notify() is
called.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="480"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2959">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2960">the name of a property installed on the class of @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_by_pspec"
              c:identifier="g_object_notify_by_pspec"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2975">Emits a "notify" signal for the property specified by @pspec on @object.

This function omits the property name lookup, hence it is faster than
g_object_notify().

One way to avoid using g_object_notify() from within the
class that registered the properties, and using g_object_notify_by_pspec()
instead, is to store the GParamSpec used with
g_object_class_install_property() inside a static array, e.g.:

|[&lt;!-- language="C" --&gt;
  enum
  {
    PROP_0,
    PROP_FOO,
    PROP_LAST
  };

  static GParamSpec *properties[PROP_LAST];

  static void
  my_object_class_init (MyObjectClass *klass)
  {
    properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
                                             0, 100,
                                             50,
                                             G_PARAM_READWRITE);
    g_object_class_install_property (gobject_class,
                                     PROP_FOO,
                                     properties[PROP_FOO]);
  }
]|

and then notify a change on the "foo" property with:

|[&lt;!-- language="C" --&gt;
  g_object_notify_by_pspec (self, properties[PROP_FOO]);
]|</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="483"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2977">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2978">the #GParamSpec of a property installed on the class of @object.</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_object_ref">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3023">Increases the reference count of @object.

Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
of @object will be propagated to the return type (using the GCC typeof()
extension), so any casting the caller needs to do on the return type must be
explicit.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="492"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3034">the same @object</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3025">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_sink" c:identifier="g_object_ref_sink" version="2.10">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3038">Increase the reference count of @object, and possibly remove the
[floating][floating-ref] reference, if @object has a floating reference.

In other words, if the object is floating, then this call "assumes
ownership" of the floating reference, converting it to a normal
reference by clearing the floating flag while leaving the reference
count unchanged.  If the object is not floating, then this call
adds a new normal reference increasing the reference count by one.

Since GLib 2.56, the type of @object will be propagated to the return type
under the same conditions as for g_object_ref().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="490"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3055">@object</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3040">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_toggle_ref"
              c:identifier="g_object_remove_toggle_ref"
              version="2.8"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3059">Removes a reference added with g_object_add_toggle_ref(). The
reference count of the object is decreased by one.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="537"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3061">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="notify" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3062">a function to call when this reference is the
 last reference to the object, or is no longer
 the last reference.</doc>
            <type name="ToggleNotify" c:type="GToggleNotify"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3065">data to pass to @notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_weak_pointer"
              c:identifier="g_object_remove_weak_pointer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3074">Removes a weak reference from @object that was previously added
using g_object_add_weak_pointer(). The @weak_pointer_location has
to match the one used with g_object_add_weak_pointer().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="507"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3076">The object that is weak referenced.</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="weak_pointer_location"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3077">The memory address
   of a pointer.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_data"
              c:identifier="g_object_replace_data"
              version="2.34"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3086">Compares the user data for the key @key on @object with
@oldval, and if they are the same, replaces @oldval with
@newval.

This is like a typical atomic compare-and-exchange
operation, for user data on an object.

If the previous value was replaced then ownership of the
old value (@oldval) is passed to the caller, including
the registered destroy notify for it (passed out in @old_destroy).
It’s up to the caller to free this as needed, which may
or may not include using @old_destroy as sometimes replacement
should not destroy the object in the normal way.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="592"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3109">%TRUE if the existing value for @key was replaced
 by @newval, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3088">the #GObject to store user data on</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3089">a string, naming the user data pointer</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="oldval"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3090">the old value to compare against</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="newval"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3091">the new value</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3092">a destroy notify for the new value</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="old_destroy"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3093">destroy notify for the existing value</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_qdata"
              c:identifier="g_object_replace_qdata"
              version="2.34"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3115">Compares the user data for the key @quark on @object with
@oldval, and if they are the same, replaces @oldval with
@newval.

This is like a typical atomic compare-and-exchange
operation, for user data on an object.

If the previous value was replaced then ownership of the
old value (@oldval) is passed to the caller, including
the registered destroy notify for it (passed out in @old_destroy).
It’s up to the caller to free this as needed, which may
or may not include using @old_destroy as sometimes replacement
should not destroy the object in the normal way.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="563"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3138">%TRUE if the existing value for @quark was replaced
 by @newval, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3117">the #GObject to store user data on</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3118">a #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="oldval"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3119">the old value to compare against</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="newval"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3120">the new value</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3121">a destroy notify for the new value</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="old_destroy"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3122">destroy notify for the existing value</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_dispose" c:identifier="g_object_run_dispose">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3144">Releases all references to other objects. This can be used to break
reference cycles.

This function should only be called from object system implementations.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="630"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3146">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="g_object_set" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3155">Sets properties on an object.

Note that the "notify" signals are queued and only emitted (in
reverse order) after all properties have been set. See
g_object_freeze_notify().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="436"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3157">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3158">name of the first property to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3159">value for the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="g_object_set_data">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3170">Each object carries around a table of associations from
strings to pointers.  This function lets you set an association.

If the object already had an association with that name,
the old association will be destroyed.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="574"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3172">#GObject containing the associations.</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3173">name of the key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3174">data to associate with that key</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_full"
              c:identifier="g_object_set_data_full"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3184">Like g_object_set_data() except it adds notification
for when the association is destroyed, either by setting it
to a different value or when the object is destroyed.

Note that the @destroy callback is not called if @data is %NULL.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="578"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3186">#GObject containing the associations</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3187">name of the key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3188">data to associate with that key</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3189">function to call when the association is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property" c:identifier="g_object_set_property">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3199">Sets a property on an object.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="470"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3201">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3202">the name of the property to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3203">the value</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_qdata"
              c:identifier="g_object_set_qdata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3209">This sets an opaque, named pointer on an object.
The name is specified through a #GQuark (retrived e.g. via
g_quark_from_static_string()), and the pointer
can be gotten back from the @object with g_object_get_qdata()
until the @object is finalized.
Setting a previously set user data pointer, overrides (frees)
the old pointer set, using #NULL as pointer essentially
removes the data stored.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="545"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3211">The GObject to set store a user data pointer</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3212">A #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3213">An opaque user data pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_qdata_full"
              c:identifier="g_object_set_qdata_full"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3226">This function works like g_object_set_qdata(), but in addition,
a void (*destroy) (gpointer) function may be specified which is
called with @data as argument when the @object is finalized, or
the data is being overwritten by a call to g_object_set_qdata()
with the same @quark.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="549"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3228">The GObject to set store a user data pointer</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3229">A #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3230">An opaque user data pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3231">Function to invoke with @data as argument, when @data
          needs to be freed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valist"
              c:identifier="g_object_set_valist"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3242">Sets properties on an object.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="457"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3244">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3245">name of the first property to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3246">value for the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="setv"
              c:identifier="g_object_setv"
              version="2.54"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3253">Sets @n_properties properties for an @object.
Properties to be set will be taken from @values. All properties must be
valid. Warnings will be emitted and undefined behaviour may result if invalid
properties are passed in.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="452"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3255">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="n_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3256">the number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3257">the names of each property to be set</doc>
            <array length="0" zero-terminated="0" c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3258">the values of each property to be set</doc>
            <array length="0" zero-terminated="0" c:type="const GValue*">
              <type name="Value" c:type="GValue"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="steal_data" c:identifier="g_object_steal_data">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3269">Remove a specified datum from the object's data associations,
without invoking the association's destroy handler.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="583"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3277">the data if found, or %NULL
         if no such data exists.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3271">#GObject containing the associations</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3272">name of the key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="steal_qdata" c:identifier="g_object_steal_qdata">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3282">This function gets back user data pointers stored via
g_object_set_qdata() and removes the @data from object
without invoking its destroy() function (if any was
set).
Usually, calling this function is only required to update
user data pointers with a destroy notifier, for example:
|[&lt;!-- language="C" --&gt;
void
object_add_to_user_list (GObject     *object,
                         const gchar *new_string)
{
  // the quark, naming the object data
  GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
  // retrive the old string list
  GList *list = g_object_steal_qdata (object, quark_string_list);

  // prepend new string
  list = g_list_prepend (list, g_strdup (new_string));
  // this changed 'list', so we need to set it again
  g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
}
static void
free_string_list (gpointer data)
{
  GList *node, *list = data;

  for (node = list; node; node = node-&gt;next)
    g_free (node-&gt;data);
  g_list_free (list);
}
]|
Using g_object_get_qdata() in the above example, instead of
g_object_steal_qdata() would have left the destroy function set,
and thus the partial string list would have been freed upon
g_object_set_qdata_full().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="554"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3323">The user data pointer set, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3284">The GObject to get a stored user data pointer from</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3285">A #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="thaw_notify" c:identifier="g_object_thaw_notify">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3327">Reverts the effect of a previous call to
g_object_freeze_notify(). The freeze count is decreased on @object
and when it reaches zero, queued "notify" signals are emitted.

Duplicate notifications for each property are squashed so that at most one
#GObject::notify signal is emitted for each property, in the reverse order
in which they have been queued.

It is an error to call this function when the freeze count is zero.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="486"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3329">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="g_object_unref">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3343">Decreases the reference count of @object. When its reference count
drops to 0, the object is finalized (i.e. its memory is freed).

If the pointer to the #GObject may be reused in future (for example, if it is
an instance variable of another object), it is recommended to clear the
pointer to %NULL rather than retain a dangling pointer to a potentially
invalid #GObject instance. Use g_clear_object() for this.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="494"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3345">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="watch_closure" c:identifier="g_object_watch_closure">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3357">This function essentially limits the life time of the @closure to
the life time of the object. That is, when the object is finalized,
the @closure is invalidated by calling g_closure_invalidate() on
it, in order to prevent invocations of the closure with a finalized
(nonexisting) object. Also, g_object_ref() and g_object_unref() are
added as marshal guards to the @closure, to ensure that an extra
reference count is held on @object during invocation of the
@closure.  Usually, this function will be called on closures that
use this @object as closure data.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="601"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3359">#GObject restricting lifetime of @closure</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3360">#GClosure to watch</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="weak_ref"
              c:identifier="g_object_weak_ref"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3374">Adds a weak reference callback to an object. Weak references are
used for notification when an object is finalized. They are called
"weak references" because they allow you to safely hold a pointer
to an object without calling g_object_ref() (g_object_ref() adds a
strong reference, that is, forces the object to stay alive).

Note that the weak references created by this method are not
thread-safe: they cannot safely be used in one thread if the
object's last g_object_unref() might happen in another thread.
Use #GWeakRef if thread-safety is required.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="496"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3376">#GObject to reference weakly</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="notify" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3377">callback to invoke before the object is freed</doc>
            <type name="WeakNotify" c:type="GWeakNotify"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3378">extra data to pass to notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="weak_unref"
              c:identifier="g_object_weak_unref"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3393">Removes a weak reference callback to an object.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="500"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3395">#GObject to remove a weak reference from</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="notify" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3396">callback to search for</doc>
            <type name="WeakNotify" c:type="GWeakNotify"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3397">data to search for</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <field name="g_type_instance">
        <type name="TypeInstance" c:type="GTypeInstance"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="volatile guint"/>
      </field>
      <field name="qdata" readable="0" private="1">
        <type name="GLib.Data" c:type="GData*"/>
      </field>
      <glib:signal name="notify"
                   when="first"
                   no-recurse="1"
                   detailed="1"
                   action="1"
                   no-hooks="1">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="52">The notify signal is emitted on an object when one of its properties has
its value set through g_object_set_property(), g_object_set(), et al.

Note that getting this signal doesn’t itself guarantee that the value of
the property has actually changed. When it is emitted is determined by the
derived GObject class. If the implementor did not create the property with
%G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
in ::notify being emitted, even if the new value is the same as the old.
If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
and common practice is to do that only when the value has actually changed.

This signal is typically used to obtain change notification for a
single property, by specifying the property name as a detail in the
g_signal_connect() call, like this:
|[&lt;!-- language="C" --&gt;
g_signal_connect (text_view-&gt;buffer, "notify::paste-target-list",
                  G_CALLBACK (gtk_text_view_target_list_notify),
                  text_view)
]|
It is important to note that you must use
[canonical parameter names][canonical-parameter-names] as
detail strings for the notify signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="55">the #GParamSpec of the property which changed.</doc>
            <type name="ParamSpec"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ObjectClass"
            c:type="GObjectClass"
            glib:is-gtype-struct-for="Object">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="253">The class structure for the GObject type.

|[&lt;!-- language="C" --&gt;
// Example of implementing a singleton using a constructor.
static MySingleton *the_singleton = NULL;

static GObject*
my_singleton_constructor (GType                  type,
                          guint                  n_construct_params,
                          GObjectConstructParam *construct_params)
{
  GObject *object;
  
  if (!the_singleton)
    {
      object = G_OBJECT_CLASS (parent_class)-&gt;constructor (type,
                                                           n_construct_params,
                                                           construct_params);
      the_singleton = MY_SINGLETON (object);
    }
  else
    object = g_object_ref (G_OBJECT (the_singleton));

  return object;
}
]|</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="354"/>
      <field name="g_type_class">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
             line="255">the parent class</doc>
        <type name="TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="construct_properties" readable="0" private="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="constructor" introspectable="0">
        <callback name="constructor" introspectable="0">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="324"/>
          <return-value>
            <type name="Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="type" transfer-ownership="none">
              <type name="GType" c:type="GType"/>
            </parameter>
            <parameter name="n_construct_properties" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="construct_properties" transfer-ownership="none">
              <type name="ObjectConstructParam"
                    c:type="GObjectConstructParam*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_property">
        <callback name="set_property">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="328"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_property">
        <callback name="get_property">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="332"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dispose">
        <callback name="dispose">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="336"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finalize">
        <callback name="finalize">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="337"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dispatch_properties_changed">
        <callback name="dispatch_properties_changed">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="339"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="n_pspecs" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="pspecs" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notify">
        <callback name="notify">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="343"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                   line="2959">a #GObject</doc>
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="constructed">
        <callback name="constructed">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                           line="347"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="flags" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="pdummy" readable="0" private="1">
        <array zero-terminated="0" fixed-size="6">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <method name="find_property" c:identifier="g_object_class_find_property">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2413">Looks up the #GParamSpec for a property of a class.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="392"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2420">the #GParamSpec for the property, or
         %NULL if the class doesn't have a property of that name</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2415">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2416">the name of the property to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_properties"
              c:identifier="g_object_class_install_properties"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2425">Installs new properties from an array of #GParamSpecs.

All properties should be installed during the class initializer.  It
is possible to install properties after that, but doing so is not
recommend, and specifically, is not guaranteed to be thread-safe vs.
use of properties on the same type on other threads.

The property id of each property is the index of each #GParamSpec in
the @pspecs array.

The property id of 0 is treated specially by #GObject and it should not
be used to store a #GParamSpec.

This function should be used if you plan to use a static array of
#GParamSpecs and g_object_notify_by_pspec(). For instance, this
class initialization:

|[&lt;!-- language="C" --&gt;
enum {
  PROP_0, PROP_FOO, PROP_BAR, N_PROPERTIES
};

static GParamSpec *obj_properties[N_PROPERTIES] = { NULL, };

static void
my_object_class_init (MyObjectClass *klass)
{
  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);

  obj_properties[PROP_FOO] =
    g_param_spec_int ("foo", "Foo", "Foo",
                      -1, G_MAXINT,
                      0,
                      G_PARAM_READWRITE);

  obj_properties[PROP_BAR] =
    g_param_spec_string ("bar", "Bar", "Bar",
                         NULL,
                         G_PARAM_READWRITE);

  gobject_class-&gt;set_property = my_object_set_property;
  gobject_class-&gt;get_property = my_object_get_property;
  g_object_class_install_properties (gobject_class,
                                     N_PROPERTIES,
                                     obj_properties);
}
]|

allows calling g_object_notify_by_pspec() to notify of property changes:

|[&lt;!-- language="C" --&gt;
void
my_object_set_foo (MyObject *self, gint foo)
{
  if (self-&gt;foo != foo)
    {
      self-&gt;foo = foo;
      g_object_notify_by_pspec (G_OBJECT (self), obj_properties[PROP_FOO]);
    }
 }
]|</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="402"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2427">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="n_pspecs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2428">the length of the #GParamSpecs array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pspecs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2429">the #GParamSpecs array
  defining the new properties</doc>
            <array length="0" zero-terminated="0" c:type="GParamSpec**">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="install_property"
              c:identifier="g_object_class_install_property">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2498">Installs a new property.

All properties should be installed during the class initializer.  It
is possible to install properties after that, but doing so is not
recommend, and specifically, is not guaranteed to be thread-safe vs.
use of properties on the same type on other threads.

Note that it is possible to redefine a property in a derived class,
by installing a property with the same name. This can be useful at times,
e.g. to change the range of allowed values or the default value.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2500">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="property_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2501">the id for the new property</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2502">the #GParamSpec for the new property</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_properties"
              c:identifier="g_object_class_list_properties">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2517">Get an array of #GParamSpec* for all properties of a class.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="395"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2524">an array of
         #GParamSpec* which should be freed after use</doc>
          <array length="0" zero-terminated="0" c:type="GParamSpec**">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2519">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="n_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2520">return location for the length of the returned array</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="override_property"
              c:identifier="g_object_class_override_property"
              version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2529">Registers @property_id as referring to a property with the name
@name in a parent class or in an interface implemented by @oclass.
This allows this class to "override" a property implementation in
a parent class or to provide the implementation of a property from
an interface.

Internally, overriding is implemented by creating a property of type
#GParamSpecOverride; generally operations that query the properties of
the object class, such as g_object_class_find_property() or
g_object_class_list_properties() will return the overridden
property. However, in one case, the @construct_properties argument of
the @constructor virtual function, the #GParamSpecOverride is passed
instead, so that the @param_id field of the #GParamSpec will be
correct.  For virtually all uses, this makes no difference. If you
need to get the overridden property, you can call
g_param_spec_get_redirect_target().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="398"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2531">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="property_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2532">the new property ID</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="2533">the name of a property registered in a parent class or
 in an interface of this class.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="ObjectConstructParam" c:type="GObjectConstructParam">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="355">The GObjectConstructParam struct is an auxiliary
structure used to hand #GParamSpec/#GValue pairs to the @constructor of
a #GObjectClass.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="368"/>
      <field name="pspec" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
             line="357">the #GParamSpec of the construct parameter</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
             line="358">the value to set the parameter to</doc>
        <type name="Value" c:type="GValue*"/>
      </field>
    </record>
    <callback name="ObjectFinalizeFunc" c:type="GObjectFinalizeFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="220">The type of the @finalize function of #GObjectClass.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="226"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="222">the #GObject being finalized</doc>
          <type name="Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ObjectGetPropertyFunc" c:type="GObjectGetPropertyFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="192">The type of the @get_property function of #GObjectClass.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="202"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="194">a #GObject</doc>
          <type name="Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="195">the numeric id under which the property was registered with
 g_object_class_install_property().</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="197">a #GValue to return the property value in</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="198">the #GParamSpec describing the property</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ObjectSetPropertyFunc" c:type="GObjectSetPropertyFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="206">The type of the @set_property function of #GObjectClass.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="216"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="208">a #GObject</doc>
          <type name="Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="209">the numeric id under which the property was registered with
 g_object_class_install_property().</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="211">the new value for the property</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="212">the #GParamSpec describing the property</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="PARAM_MASK" value="255" c:type="G_PARAM_MASK">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
           line="179">Mask containing the bits of #GParamSpec.flags which are reserved for GLib.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="184"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARAM_STATIC_STRINGS"
              value="224"
              c:type="G_PARAM_STATIC_STRINGS">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
           line="170">#GParamFlags value alias for %G_PARAM_STATIC_NAME | %G_PARAM_STATIC_NICK | %G_PARAM_STATIC_BLURB.

Since 2.13.0</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="177"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARAM_USER_SHIFT" value="8" c:type="G_PARAM_USER_SHIFT">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
           line="185">Minimum shift count to be used for user defined flags, to be stored in
#GParamSpec.flags. The maximum allowed is 10.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="191"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <bitfield name="ParamFlags" c:type="GParamFlags">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
           line="116">Through the #GParamFlags flag values, certain aspects of parameters
can be configured. See also #G_PARAM_STATIC_STRINGS.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="168"/>
      <member name="readable" value="1" c:identifier="G_PARAM_READABLE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="118">the parameter is readable</doc>
      </member>
      <member name="writable" value="2" c:identifier="G_PARAM_WRITABLE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="119">the parameter is writable</doc>
      </member>
      <member name="readwrite" value="3" c:identifier="G_PARAM_READWRITE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="120">alias for %G_PARAM_READABLE | %G_PARAM_WRITABLE</doc>
      </member>
      <member name="construct" value="4" c:identifier="G_PARAM_CONSTRUCT">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="121">the parameter will be set upon object construction</doc>
      </member>
      <member name="construct_only"
              value="8"
              c:identifier="G_PARAM_CONSTRUCT_ONLY">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="122">the parameter can only be set upon object construction</doc>
      </member>
      <member name="lax_validation"
              value="16"
              c:identifier="G_PARAM_LAX_VALIDATION">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="123">upon parameter conversion (see g_param_value_convert())
 strict validation is not required</doc>
      </member>
      <member name="static_name" value="32" c:identifier="G_PARAM_STATIC_NAME">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="125">the string used as name when constructing the
 parameter is guaranteed to remain valid and
 unmodified for the lifetime of the parameter.
 Since 2.8</doc>
      </member>
      <member name="private" value="32" c:identifier="G_PARAM_PRIVATE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="141">internal</doc>
      </member>
      <member name="static_nick" value="64" c:identifier="G_PARAM_STATIC_NICK">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="129">the string used as nick when constructing the
 parameter is guaranteed to remain valid and
 unmmodified for the lifetime of the parameter.
 Since 2.8</doc>
      </member>
      <member name="static_blurb"
              value="128"
              c:identifier="G_PARAM_STATIC_BLURB">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="133">the string used as blurb when constructing the
 parameter is guaranteed to remain valid and
 unmodified for the lifetime of the parameter.
 Since 2.8</doc>
      </member>
      <member name="explicit_notify"
              value="1073741824"
              c:identifier="G_PARAM_EXPLICIT_NOTIFY">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="137">calls to g_object_set_property() for this
  property will not automatically result in a "notify" signal being
  emitted: the implementation must call g_object_notify() themselves
  in case the property actually changes.  Since: 2.42.</doc>
      </member>
      <member name="deprecated"
              value="2147483648"
              c:identifier="G_PARAM_DEPRECATED">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="142">the parameter is deprecated and will be removed
 in a future version. A warning will be generated if it is used
 while running with G_ENABLE_DIAGNOSTIC=1.
 Since 2.26</doc>
      </member>
    </bitfield>
    <class name="ParamSpec"
           c:symbol-prefix="param_spec"
           c:type="GParamSpec"
           abstract="1"
           glib:type-name="GParam"
           glib:get-type="intern"
           glib:type-struct="ParamSpecClass"
           glib:fundamental="1"
           glib:ref-func="g_param_spec_ref_sink"
           glib:unref-func="g_param_spec_uref"
           glib:set-value-func="g_value_set_param"
           glib:get-value-func="g_value_get_param">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="392">#GParamSpec is an object structure that encapsulates the metadata
required to specify parameters, such as e.g. #GObject properties.

## Parameter names # {#canonical-parameter-names}

Parameter names need to start with a letter (a-z or A-Z).
Subsequent characters can be letters, numbers or a '-'.
All other characters are replaced by a '-' during construction.
The result of this replacement is called the canonical name of
the parameter.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="262"/>
      <function name="internal"
                c:identifier="g_param_spec_internal"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3670">Creates a new #GParamSpec instance.

A property name consists of segments consisting of ASCII letters and
digits, separated by either the '-' or '_' character. The first
character of a property name must be a letter. Names which violate these
rules lead to undefined behaviour.

When creating and looking up a #GParamSpec, either separator can be
used, but they cannot be mixed. Using '-' is considerably more
efficient and in fact required when using property names as detail
strings for signals.

Beyond the name, #GParamSpecs have two more descriptive
strings associated with them, the @nick, which should be suitable
for use as a label for the property in a property editor, and the
@blurb, which should be a somewhat longer description, suitable for
e.g. a tooltip. The @nick and @blurb should ideally be localized.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="408"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3696">a newly allocated #GParamSpec instance</doc>
          <type name="ParamSpec" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="param_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3672">the #GType for the property; must be derived from #G_TYPE_PARAM</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3673">the canonical name of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3674">the nickname of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3675">a short description of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3676">a combination of #GParamFlags</doc>
            <type name="ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="finalize">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="250"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="value_set_default">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="value_validate">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="255"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="values_cmp">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="257"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
          <parameter name="value1" transfer-ownership="none">
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="value2" transfer-ownership="none">
            <type name="Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_blurb" c:identifier="g_param_spec_get_blurb">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3529">Get the short description of a #GParamSpec.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="330"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3535">the short description of @pspec.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3531">a valid #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_value"
              c:identifier="g_param_spec_get_default_value"
              version="2.38">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3539">Gets the default value of @pspec as a pointer to a #GValue.

The #GValue will remain valid for the life of @pspec.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3547">a pointer to a #GValue which must not be modified</doc>
          <type name="Value" c:type="const GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3541">a #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="g_param_spec_get_name">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3552">Get the name of a #GParamSpec.

The name is always an "interned" string (as per g_intern_string()).
This allows for pointer-value comparisons.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="326"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3561">the name of @pspec.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3554">a valid #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name_quark"
              c:identifier="g_param_spec_get_name_quark"
              version="2.46">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3565">Gets the GQuark for the name.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="350"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3571">the GQuark for @pspec-&gt;name.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3567">a #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nick" c:identifier="g_param_spec_get_nick">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3576">Get the nickname of a #GParamSpec.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="328"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3582">the nickname of @pspec.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3578">a valid #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_qdata" c:identifier="g_param_spec_get_qdata">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3586">Gets back user data pointers stored via g_param_spec_set_qdata().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="290"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3593">the user data pointer set, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3588">a valid #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3589">a #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_redirect_target"
              c:identifier="g_param_spec_get_redirect_target"
              version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3597">If the paramspec redirects operations to another paramspec,
returns that paramspec. Redirect is used typically for
providing a new implementation of a property in a derived
type while preserving all the properties from the parent
type. Redirection is established by creating a property
of type #GParamSpecOverride. See g_object_class_override_property()
for an example of the use of this capability.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="305"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3610">paramspec to which requests on this
         paramspec should be redirected, or %NULL if none.</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3599">a #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_param_spec_ref" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3861">Increments the reference count of @pspec.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="282"/>
        <return-value>
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3867">the #GParamSpec that was passed into this function</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3863">a valid #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_sink"
              c:identifier="g_param_spec_ref_sink"
              version="2.10"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3871">Convenience function to ref and sink a #GParamSpec.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="288"/>
        <return-value>
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3878">the #GParamSpec that was passed into this function</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3873">a valid #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_qdata" c:identifier="g_param_spec_set_qdata">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3882">Sets an opaque, named pointer on a #GParamSpec. The name is
specified through a #GQuark (retrieved e.g. via
g_quark_from_static_string()), and the pointer can be gotten back
from the @pspec with g_param_spec_get_qdata().  Setting a
previously set user data pointer, overrides (frees) the old pointer
set, using %NULL as pointer essentially removes the data stored.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="293"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3884">the #GParamSpec to set store a user data pointer</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3885">a #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3886">an opaque user data pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_qdata_full"
              c:identifier="g_param_spec_set_qdata_full"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3897">This function works like g_param_spec_set_qdata(), but in addition,
a `void (*destroy) (gpointer)` function may be
specified which is called with @data as argument when the @pspec is
finalized, or the data is being overwritten by a call to
g_param_spec_set_qdata() with the same @quark.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="297"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3899">the #GParamSpec to set store a user data pointer</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3900">a #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3901">an opaque user data pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3902">function to invoke with @data as argument, when @data needs to
 be freed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="sink" c:identifier="g_param_spec_sink">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3913">The initial reference count of a newly created #GParamSpec is 1,
even though no one has explicitly called g_param_spec_ref() on it
yet. So the initial reference count is flagged as "floating", until
someone calls `g_param_spec_ref (pspec); g_param_spec_sink
(pspec);` in sequence on it, taking over the initial
reference count (thus ending up with a @pspec that has a reference
count of 1 still, but is not flagged "floating" anymore).</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3915">a valid #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="steal_qdata" c:identifier="g_param_spec_steal_qdata">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3927">Gets back user data pointers stored via g_param_spec_set_qdata()
and removes the @data from @pspec without invoking its destroy()
function (if any was set).  Usually, calling this function is only
required to update user data pointers with a destroy notifier.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="302"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3937">the user data pointer set, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3929">the #GParamSpec to get a stored user data pointer from</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3930">a #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="g_param_spec_unref"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4047">Decrements the reference count of a @pspec.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="284"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="4049">a valid #GParamSpec</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="g_type_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="200">private #GTypeInstance portion</doc>
        <type name="TypeInstance" c:type="GTypeInstance"/>
      </field>
      <field name="name">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="201">name of this parameter: always an interned string</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="flags">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="202">#GParamFlags flags for this parameter</doc>
        <type name="ParamFlags" c:type="GParamFlags"/>
      </field>
      <field name="value_type">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="203">the #GValue type for this parameter</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="owner_type">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="204">#GType type that uses (introduces) this parameter</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="_nick" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="_blurb" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="qdata" readable="0" private="1">
        <type name="GLib.Data" c:type="GData*"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="param_id" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <class name="ParamSpecBoolean"
           c:symbol-prefix="param_spec_boolean"
           c:type="GParamSpecBoolean"
           parent="ParamSpec"
           glib:type-name="GParamBoolean"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="644">A #GParamSpec derived structure that contains the meta data for boolean properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="646">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="647">default value for the property specified</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <class name="ParamSpecBoxed"
           c:symbol-prefix="param_spec_boxed"
           c:type="GParamSpecBoxed"
           parent="ParamSpec"
           glib:type-name="GParamBoxed"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="879">A #GParamSpec derived structure that contains the meta data for boxed properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="881">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
    </class>
    <class name="ParamSpecChar"
           c:symbol-prefix="param_spec_char"
           c:type="GParamSpecChar"
           parent="ParamSpec"
           glib:type-name="GParamChar"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="610">A #GParamSpec derived structure that contains the meta data for character properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="612">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="613">minimum value for the property specified</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="614">maximum value for the property specified</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="615">default value for the property specified</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
    </class>
    <record name="ParamSpecClass"
            c:type="GParamSpecClass"
            glib:is-gtype-struct-for="ParamSpec">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
           line="225">The class structure for the GParamSpec type.
Normally, GParamSpec classes are filled by
g_param_type_register_static().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="262"/>
      <field name="g_type_class">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="227">the parent class</doc>
        <type name="TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="value_type">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="228">the #GValue type for this parameter</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="finalize">
        <callback name="finalize">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                           line="250"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_set_default">
        <callback name="value_set_default">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                           line="253"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_validate">
        <callback name="value_validate">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                           line="255"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="values_cmp">
        <callback name="values_cmp">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                           line="257"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
            <parameter name="value1" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="value2" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dummy" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ParamSpecDouble"
           c:symbol-prefix="param_spec_double"
           c:type="GParamSpecDouble"
           parent="ParamSpec"
           glib:type-name="GParamDouble"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="824">A #GParamSpec derived structure that contains the meta data for double properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="826">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="827">minimum value for the property specified</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="828">maximum value for the property specified</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="829">default value for the property specified</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="epsilon">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="830">values closer than @epsilon will be considered identical
 by g_param_values_cmp(); the default value is 1e-90.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <class name="ParamSpecEnum"
           c:symbol-prefix="param_spec_enum"
           c:type="GParamSpecEnum"
           parent="ParamSpec"
           glib:type-name="GParamEnum"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="772">A #GParamSpec derived structure that contains the meta data for enum
properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="774">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="enum_class">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="775">the #GEnumClass for the enum</doc>
        <type name="EnumClass" c:type="GEnumClass*"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="776">default value for the property specified</doc>
        <type name="gint" c:type="gint"/>
      </field>
    </class>
    <class name="ParamSpecFlags"
           c:symbol-prefix="param_spec_flags"
           c:type="GParamSpecFlags"
           parent="ParamSpec"
           glib:type-name="GParamFlags"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="788">A #GParamSpec derived structure that contains the meta data for flags
properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="790">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="flags_class">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="791">the #GFlagsClass for the flags</doc>
        <type name="FlagsClass" c:type="GFlagsClass*"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="792">default value for the property specified</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <class name="ParamSpecFloat"
           c:symbol-prefix="param_spec_float"
           c:type="GParamSpecFloat"
           parent="ParamSpec"
           glib:type-name="GParamFloat"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="804">A #GParamSpec derived structure that contains the meta data for float properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="806">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="807">minimum value for the property specified</doc>
        <type name="gfloat" c:type="gfloat"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="808">maximum value for the property specified</doc>
        <type name="gfloat" c:type="gfloat"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="809">default value for the property specified</doc>
        <type name="gfloat" c:type="gfloat"/>
      </field>
      <field name="epsilon">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="810">values closer than @epsilon will be considered identical
 by g_param_values_cmp(); the default value is 1e-30.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </field>
    </class>
    <class name="ParamSpecGType"
           c:symbol-prefix="param_spec_gtype"
           c:type="GParamSpecGType"
           version="2.10"
           parent="ParamSpec"
           glib:type-name="GParamGType"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="943">A #GParamSpec derived structure that contains the meta data for #GType properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="945">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="is_a_type">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="946">a #GType whose subtypes can occur as values</doc>
        <type name="GType" c:type="GType"/>
      </field>
    </class>
    <class name="ParamSpecInt"
           c:symbol-prefix="param_spec_int"
           c:type="GParamSpecInt"
           parent="ParamSpec"
           glib:type-name="GParamInt"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="657">A #GParamSpec derived structure that contains the meta data for integer properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="659">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="660">minimum value for the property specified</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="661">maximum value for the property specified</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="662">default value for the property specified</doc>
        <type name="gint" c:type="gint"/>
      </field>
    </class>
    <class name="ParamSpecInt64"
           c:symbol-prefix="param_spec_int64"
           c:type="GParamSpecInt64"
           parent="ParamSpec"
           glib:type-name="GParamInt64"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="725">A #GParamSpec derived structure that contains the meta data for 64bit integer properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="727">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="728">minimum value for the property specified</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="729">maximum value for the property specified</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="730">default value for the property specified</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
    </class>
    <class name="ParamSpecLong"
           c:symbol-prefix="param_spec_long"
           c:type="GParamSpecLong"
           parent="ParamSpec"
           glib:type-name="GParamLong"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="691">A #GParamSpec derived structure that contains the meta data for long integer properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="693">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="694">minimum value for the property specified</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="695">maximum value for the property specified</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="696">default value for the property specified</doc>
        <type name="glong" c:type="glong"/>
      </field>
    </class>
    <class name="ParamSpecObject"
           c:symbol-prefix="param_spec_object"
           c:type="GParamSpecObject"
           parent="ParamSpec"
           glib:type-name="GParamObject"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="913">A #GParamSpec derived structure that contains the meta data for object properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="915">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
    </class>
    <class name="ParamSpecOverride"
           c:symbol-prefix="param_spec_override"
           c:type="GParamSpecOverride"
           version="2.4"
           parent="ParamSpec"
           glib:type-name="GParamOverride"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="923">This is a type of #GParamSpec type that simply redirects operations to
another paramspec.  All operations other than getting or
setting the value are redirected, including accessing the nick and
blurb, validating a value, and so forth. See
g_param_spec_get_redirect_target() for retrieving the overidden
property. #GParamSpecOverride is used in implementing
g_object_class_override_property(), and will not be directly useful
unless you are implementing a new base type similar to GObject.</doc>
      <field name="parent_instance" readable="0" private="1">
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="overridden" readable="0" private="1">
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </field>
    </class>
    <class name="ParamSpecParam"
           c:symbol-prefix="param_spec_param"
           c:type="GParamSpecParam"
           parent="ParamSpec"
           glib:type-name="GParamParam"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="868">A #GParamSpec derived structure that contains the meta data for %G_TYPE_PARAM
properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="870">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
    </class>
    <class name="ParamSpecPointer"
           c:symbol-prefix="param_spec_pointer"
           c:type="GParamSpecPointer"
           parent="ParamSpec"
           glib:type-name="GParamPointer"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="889">A #GParamSpec derived structure that contains the meta data for pointer properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="891">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
    </class>
    <record name="ParamSpecPool" c:type="GParamSpecPool" disguised="1">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="83">A #GParamSpecPool maintains a collection of #GParamSpecs which can be
quickly accessed by owner and name. The implementation of the #GObject property
system uses such a pool to store the #GParamSpecs of the properties all object
types.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="197"/>
      <method name="insert" c:identifier="g_param_spec_pool_insert">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3783">Inserts a #GParamSpec in the pool.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="416"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3785">a #GParamSpecPool.</doc>
            <type name="ParamSpecPool" c:type="GParamSpecPool*"/>
          </instance-parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3786">the #GParamSpec to insert</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
          <parameter name="owner_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3787">a #GType identifying the owner of @pspec</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="list" c:identifier="g_param_spec_pool_list">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3793">Gets an array of all #GParamSpecs owned by @owner_type in
the pool.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="431"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3802">a newly
         allocated array containing pointers to all #GParamSpecs
         owned by @owner_type in the pool</doc>
          <array length="1" zero-terminated="0" c:type="GParamSpec**">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3795">a #GParamSpecPool</doc>
            <type name="ParamSpecPool" c:type="GParamSpecPool*"/>
          </instance-parameter>
          <parameter name="owner_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3796">the owner to look for</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="n_pspecs_p"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3797">return location for the length of the returned array</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_owned" c:identifier="g_param_spec_pool_list_owned">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3808">Gets an #GList of all #GParamSpecs owned by @owner_type in
the pool.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="428"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3816">a
         #GList of all #GParamSpecs owned by @owner_type in
         the pool#GParamSpecs.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ParamSpec"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3810">a #GParamSpecPool</doc>
            <type name="ParamSpecPool" c:type="GParamSpecPool*"/>
          </instance-parameter>
          <parameter name="owner_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3811">the owner to look for</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="g_param_spec_pool_lookup">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3822">Looks up a #GParamSpec in the pool.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="423"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3832">The found #GParamSpec, or %NULL if no
matching #GParamSpec was found.</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3824">a #GParamSpecPool</doc>
            <type name="ParamSpecPool" c:type="GParamSpecPool*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3825">the name to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="owner_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3826">the owner to look for</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="walk_ancestors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3827">If %TRUE, also try to find a #GParamSpec with @param_name
 owned by an ancestor of @owner_type.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="g_param_spec_pool_remove">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3852">Removes a #GParamSpec from the pool.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="420"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3854">a #GParamSpecPool</doc>
            <type name="ParamSpecPool" c:type="GParamSpecPool*"/>
          </instance-parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3855">the #GParamSpec to remove</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <function name="new" c:identifier="g_param_spec_pool_new">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3837">Creates a new #GParamSpecPool.

If @type_prefixing is %TRUE, lookups in the newly created pool will
allow to specify the owner as a colon-separated prefix of the
property name, like "GtkContainer:border-width". This feature is
deprecated, so you should always set @type_prefixing to %FALSE.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="414"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3848">a newly allocated #GParamSpecPool.</doc>
          <type name="ParamSpecPool" c:type="GParamSpecPool*"/>
        </return-value>
        <parameters>
          <parameter name="type_prefixing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="3839">Whether the pool will support type-prefixed property names.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="ParamSpecString"
           c:symbol-prefix="param_spec_string"
           c:type="GParamSpecString"
           parent="ParamSpec"
           glib:type-name="GParamString"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="844">A #GParamSpec derived structure that contains the meta data for string
properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="846">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="847">default value for the property specified</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="cset_first">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="848">a string containing the allowed values for the first byte</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="cset_nth">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="849">a string containing the allowed values for the subsequent bytes</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="substitutor">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="850">the replacement byte for bytes which don't match @cset_first or @cset_nth.</doc>
        <type name="gchar" c:type="gchar"/>
      </field>
      <field name="null_fold_if_empty" bits="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="851">replace empty string by %NULL</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ensure_non_null" bits="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="852">replace %NULL strings by an empty string</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="ParamSpecTypeInfo" c:type="GParamSpecTypeInfo">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
           line="354">This structure is used to provide the type system with the information
required to initialize and destruct (finalize) a parameter's class and
instances thereof.
The initialized structure is passed to the g_param_type_register_static()
The type system will perform a deep copy of this structure, so its memory
does not need to be persistent across invocation of
g_param_type_register_static().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="395"/>
      <field name="instance_size" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="356">Size of the instance (object) structure.</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="n_preallocs" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="357">Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now.</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="instance_init">
        <callback name="instance_init">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                           line="383"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_type" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="359">The #GType of values conforming to this #GParamSpec</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="finalize">
        <callback name="finalize">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                           line="387"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_set_default">
        <callback name="value_set_default">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                           line="388"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_validate">
        <callback name="value_validate">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                           line="390"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="values_cmp">
        <callback name="values_cmp">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                           line="392"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
            <parameter name="value1" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="value2" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ParamSpecUChar"
           c:symbol-prefix="param_spec_uchar"
           c:type="GParamSpecUChar"
           parent="ParamSpec"
           glib:type-name="GParamUChar"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="627">A #GParamSpec derived structure that contains the meta data for unsigned character properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="629">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="630">minimum value for the property specified</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="631">maximum value for the property specified</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="632">default value for the property specified</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
    </class>
    <class name="ParamSpecUInt"
           c:symbol-prefix="param_spec_uint"
           c:type="GParamSpecUInt"
           parent="ParamSpec"
           glib:type-name="GParamUInt"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="674">A #GParamSpec derived structure that contains the meta data for unsigned integer properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="676">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="677">minimum value for the property specified</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="678">maximum value for the property specified</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="679">default value for the property specified</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <class name="ParamSpecUInt64"
           c:symbol-prefix="param_spec_uint64"
           c:type="GParamSpecUInt64"
           parent="ParamSpec"
           glib:type-name="GParamUInt64"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="742">A #GParamSpec derived structure that contains the meta data for unsigned 64bit integer properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="744">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="745">minimum value for the property specified</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="746">maximum value for the property specified</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="747">default value for the property specified</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
    </class>
    <class name="ParamSpecULong"
           c:symbol-prefix="param_spec_ulong"
           c:type="GParamSpecULong"
           parent="ParamSpec"
           glib:type-name="GParamULong"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="708">A #GParamSpec derived structure that contains the meta data for unsigned long integer properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="710">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="minimum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="711">minimum value for the property specified</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="maximum">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="712">maximum value for the property specified</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="713">default value for the property specified</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
    </class>
    <class name="ParamSpecUnichar"
           c:symbol-prefix="param_spec_unichar"
           c:type="GParamSpecUnichar"
           parent="ParamSpec"
           glib:type-name="GParamUnichar"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="759">A #GParamSpec derived structure that contains the meta data for unichar (unsigned integer) properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="761">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="762">default value for the property specified</doc>
        <type name="gunichar" c:type="gunichar"/>
      </field>
    </class>
    <class name="ParamSpecValueArray"
           c:symbol-prefix="param_spec_value_array"
           c:type="GParamSpecValueArray"
           parent="ParamSpec"
           glib:type-name="GParamValueArray"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="899">A #GParamSpec derived structure that contains the meta data for #GValueArray properties.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="901">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="element_spec">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="902">a #GParamSpec describing the elements contained in arrays of this property, may be %NULL</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </field>
      <field name="fixed_n_elements">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="903">if greater than 0, arrays of this property will always have this many elements</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <class name="ParamSpecVariant"
           c:symbol-prefix="param_spec_variant"
           c:type="GParamSpecVariant"
           version="2.26"
           parent="ParamSpec"
           glib:type-name="GParamVariant"
           glib:get-type="intern"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
           line="957">A #GParamSpec derived structure that contains the meta data for #GVariant properties.

When comparing values with g_param_values_cmp(), scalar values with the same
type will be compared with g_variant_compare(). Other non-%NULL variants will
be checked for equality with g_variant_equal(), and their sort order is
otherwise undefined. %NULL is ordered before non-%NULL variants. Two %NULL
values compare equal.</doc>
      <field name="parent_instance">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="959">private #GParamSpec portion</doc>
        <type name="ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="type">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="960">a #GVariantType, or %NULL</doc>
        <type name="GLib.VariantType" c:type="GVariantType*"/>
      </field>
      <field name="default_value">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
             line="961">a #GVariant, or %NULL</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="Parameter"
            c:type="GParameter"
            deprecated="1"
            deprecated-version="2.54">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
           line="263">The GParameter struct is an auxiliary structure used
to hand parameter name/value pairs to g_object_newv().</doc>
      <doc-deprecated xml:space="preserve">This type is not introspectable.</doc-deprecated>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="277"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="265">the parameter name</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
             line="266">the parameter value</doc>
        <type name="Value" c:type="GValue"/>
      </field>
    </record>
    <constant name="SIGNAL_FLAGS_MASK"
              value="511"
              c:type="G_SIGNAL_FLAGS_MASK">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="139">A mask for all #GSignalFlags bits.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="144"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SIGNAL_MATCH_MASK" value="63" c:type="G_SIGNAL_MATCH_MASK">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="182">A mask for all #GSignalMatchType bits.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="187"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <callback name="SignalAccumulator" c:type="GSignalAccumulator">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="74">The signal accumulator is a special callback function that can be used
to collect return values of the various callbacks that are called
during a signal emission. The signal accumulator is specified at signal
creation time, if it is left %NULL, no accumulation of callback return
values is performed. The return value of signal emissions is then the
value returned by the last callback.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="93"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="89">The accumulator function returns whether the signal emission
 should be aborted. Returning %FALSE means to abort the
 current emission and %TRUE is returned for continuation.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ihint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
               line="76">Signal invocation hint, see #GSignalInvocationHint.</doc>
          <type name="SignalInvocationHint" c:type="GSignalInvocationHint*"/>
        </parameter>
        <parameter name="return_accu" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
               line="77">Accumulator to collect callback return values in, this
 is the return value of the current signal emission.</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="handler_return" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
               line="79">A #GValue holding the return value of the signal handler.</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
               line="80">Callback data that was specified when creating the signal.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SignalEmissionHook" c:type="GSignalEmissionHook">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="52">A simple function pointer to get invoked when the signal is emitted. This
allows you to tie a hook to the signal type, so that it will trap all
emissions of that signal, from any object.

You may not attach these to signals created with the #G_SIGNAL_NO_HOOKS flag.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="70"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="67">whether it wants to stay connected. If it returns %FALSE, the signal
 hook is disconnected (and destroyed).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ihint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
               line="54">Signal invocation hint, see #GSignalInvocationHint.</doc>
          <type name="SignalInvocationHint" c:type="GSignalInvocationHint*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
               line="55">the number of parameters to the function, including
 the instance on which the signal was emitted.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
               line="57">the instance on which
 the signal was emitted, followed by the parameters of the emission.</doc>
          <array length="1" zero-terminated="0" c:type="const GValue*">
            <type name="Value" c:type="GValue"/>
          </array>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
               line="59">user data associated with the hook.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="SignalFlags" c:type="GSignalFlags">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="100">The signal flags are used to specify a signal's behaviour, the overall
signal description outlines how especially the RUN flags control the
stages of a signal emission.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="138"/>
      <member name="run_first" value="1" c:identifier="G_SIGNAL_RUN_FIRST">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="102">Invoke the object method handler in the first emission stage.</doc>
      </member>
      <member name="run_last" value="2" c:identifier="G_SIGNAL_RUN_LAST">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="103">Invoke the object method handler in the third emission stage.</doc>
      </member>
      <member name="run_cleanup" value="4" c:identifier="G_SIGNAL_RUN_CLEANUP">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="104">Invoke the object method handler in the last emission stage.</doc>
      </member>
      <member name="no_recurse" value="8" c:identifier="G_SIGNAL_NO_RECURSE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="105">Signals being emitted for an object while currently being in
 emission for this very object will not be emitted recursively,
 but instead cause the first emission to be restarted.</doc>
      </member>
      <member name="detailed" value="16" c:identifier="G_SIGNAL_DETAILED">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="108">This signal supports "::detail" appendices to the signal name
 upon handler connections and emissions.</doc>
      </member>
      <member name="action" value="32" c:identifier="G_SIGNAL_ACTION">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="110">Action signals are signals that may freely be emitted on alive
 objects from user code via g_signal_emit() and friends, without
 the need of being embedded into extra code that performs pre or
 post emission adjustments on the object. They can also be thought
 of as object methods which can be called generically by
 third-party code.</doc>
      </member>
      <member name="no_hooks" value="64" c:identifier="G_SIGNAL_NO_HOOKS">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="116">No emissions hooks are supported for this signal.</doc>
      </member>
      <member name="must_collect"
              value="128"
              c:identifier="G_SIGNAL_MUST_COLLECT">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="117">Varargs signal emission will always collect the
  arguments, even if there are no signal handlers connected.  Since 2.30.</doc>
      </member>
      <member name="deprecated" value="256" c:identifier="G_SIGNAL_DEPRECATED">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="119">The signal is deprecated and will be removed
  in a future version. A warning will be generated if it is connected while
  running with G_ENABLE_DIAGNOSTIC=1.  Since 2.32.</doc>
      </member>
    </bitfield>
    <record name="SignalInvocationHint" c:type="GSignalInvocationHint">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="212">The #GSignalInvocationHint structure is used to pass on additional information
to callbacks during a signal emission.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="228"/>
      <field name="signal_id" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="214">The signal id of the signal invoking the callback</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="detail" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="215">The detail passed on for this emission</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
      <field name="run_type" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="216">The stage the signal emission is currently in, this
 field will contain one of %G_SIGNAL_RUN_FIRST,
 %G_SIGNAL_RUN_LAST or %G_SIGNAL_RUN_CLEANUP.</doc>
        <type name="SignalFlags" c:type="GSignalFlags"/>
      </field>
    </record>
    <bitfield name="SignalMatchType" c:type="GSignalMatchType">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="160">The match types specify what g_signal_handlers_block_matched(),
g_signal_handlers_unblock_matched() and g_signal_handlers_disconnect_matched()
match signals by.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="181"/>
      <member name="id" value="1" c:identifier="G_SIGNAL_MATCH_ID">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="162">The signal id must be equal.</doc>
      </member>
      <member name="detail" value="2" c:identifier="G_SIGNAL_MATCH_DETAIL">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="163">The signal detail be equal.</doc>
      </member>
      <member name="closure" value="4" c:identifier="G_SIGNAL_MATCH_CLOSURE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="164">The closure must be the same.</doc>
      </member>
      <member name="func" value="8" c:identifier="G_SIGNAL_MATCH_FUNC">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="165">The C closure callback must be the same.</doc>
      </member>
      <member name="data" value="16" c:identifier="G_SIGNAL_MATCH_DATA">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="166">The closure data must be the same.</doc>
      </member>
      <member name="unblocked"
              value="32"
              c:identifier="G_SIGNAL_MATCH_UNBLOCKED">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="167">Only unblocked signals may matched.</doc>
      </member>
    </bitfield>
    <record name="SignalQuery" c:type="GSignalQuery">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
           line="229">A structure holding in-depth information for a specific signal. It is
filled in by the g_signal_query() function.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="258"/>
      <field name="signal_id" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="231">The signal id of the signal being queried, or 0 if the
 signal to be queried was unknown.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_name" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="233">The signal name.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="itype" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="234">The interface/instance type that this signal can be emitted for.</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="signal_flags" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="235">The signal flags as passed in to g_signal_new().</doc>
        <type name="SignalFlags" c:type="GSignalFlags"/>
      </field>
      <field name="return_type" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="236">The return type for user callbacks.</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="n_params" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="237">The number of parameters that user callbacks take.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="param_types" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
             line="238">The individual parameter types for
 user callbacks, note that the effective callback signature is:
 |[&lt;!-- language="C" --&gt;
 @return_type callback (#gpointer     data1,
 [param_types param_names,]
 gpointer     data2);
 ]|</doc>
        <array length="5" zero-terminated="0" c:type="const GType*">
          <type name="GType" c:type="GType"/>
        </array>
      </field>
    </record>
    <constant name="TYPE_FLAG_RESERVED_ID_BIT"
              value="1"
              c:type="G_TYPE_FLAG_RESERVED_ID_BIT">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="2325">A bit in the type number that's supposed to be left untouched.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2330"/>
      <type name="GLib.Type" c:type="GType"/>
    </constant>
    <constant name="TYPE_FUNDAMENTAL_MAX"
              value="255"
              c:type="G_TYPE_FUNDAMENTAL_MAX">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="39">An integer constant that represents the number of identifiers reserved
for types that are assigned at compile-time.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="TYPE_FUNDAMENTAL_SHIFT"
              value="2"
              c:type="G_TYPE_FUNDAMENTAL_SHIFT">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="203">Shift value used in converting numbers to type IDs.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="208"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="TYPE_RESERVED_BSE_FIRST"
              value="32"
              c:type="G_TYPE_RESERVED_BSE_FIRST">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="233">First fundamental type number to create a new fundamental type id with
G_TYPE_MAKE_FUNDAMENTAL() reserved for BSE.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="239"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="TYPE_RESERVED_BSE_LAST"
              value="48"
              c:type="G_TYPE_RESERVED_BSE_LAST">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="240">Last fundamental type number reserved for BSE.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="245"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="TYPE_RESERVED_GLIB_FIRST"
              value="22"
              c:type="G_TYPE_RESERVED_GLIB_FIRST">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="220">First fundamental type number to create a new fundamental type id with
G_TYPE_MAKE_FUNDAMENTAL() reserved for GLib.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="226"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="TYPE_RESERVED_GLIB_LAST"
              value="31"
              c:type="G_TYPE_RESERVED_GLIB_LAST">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="227">Last fundamental type number reserved for GLib.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="232"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="TYPE_RESERVED_USER_FIRST"
              value="49"
              c:type="G_TYPE_RESERVED_USER_FIRST">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="246">First available fundamental type number to create new fundamental
type id with G_TYPE_MAKE_FUNDAMENTAL().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="252"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <callback name="ToggleNotify" c:type="GToggleNotify">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="516">A callback function used for notification when the state
of a toggle reference changes. See g_object_add_toggle_ref().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="528"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="518">Callback data passed to g_object_add_toggle_ref()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="519">The object on which g_object_add_toggle_ref() was called.</doc>
          <type name="Object" c:type="GObject*"/>
        </parameter>
        <parameter name="is_last_ref" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="520">%TRUE if the toggle reference is now the
 last reference to the object. %FALSE if the toggle
 reference was the last reference and there are now other
 references.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </callback>
    <union name="TypeCValue" c:type="GTypeCValue">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="387"/>
    </union>
    <record name="TypeClass" c:type="GTypeClass">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="401">An opaque structure used as the base of all classes.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="410"/>
      <field name="g_type" readable="0" private="1">
        <type name="GType" c:type="GType"/>
      </field>
      <method name="add_private"
              c:identifier="g_type_class_add_private"
              version="2.4"
              deprecated="1"
              deprecated-version="2.58">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5090">Registers a private structure for an instantiatable type.

When an object is allocated, the private structures for
the type and all of its parent types are allocated
sequentially in the same memory block as the public
structures, and are zero-filled.

Note that the accumulated size of the private structures of
a type and all its parent types cannot exceed 64 KiB.

This function should be called in the type's class_init() function.
The private structure can be retrieved using the
G_TYPE_INSTANCE_GET_PRIVATE() macro.

The following example shows attaching a private structure
MyObjectPrivate to an object MyObject defined in the standard
GObject fashion in the type's class_init() function.

Note the use of a structure member "priv" to avoid the overhead
of repeatedly calling MY_OBJECT_GET_PRIVATE().

|[&lt;!-- language="C" --&gt;
typedef struct _MyObject        MyObject;
typedef struct _MyObjectPrivate MyObjectPrivate;

struct _MyObject {
 GObject parent;

 MyObjectPrivate *priv;
};

struct _MyObjectPrivate {
  int some_field;
};

static void
my_object_class_init (MyObjectClass *klass)
{
  g_type_class_add_private (klass, sizeof (MyObjectPrivate));
}

static void
my_object_init (MyObject *my_object)
{
  my_object-&gt;priv = G_TYPE_INSTANCE_GET_PRIVATE (my_object,
                                                 MY_TYPE_OBJECT,
                                                 MyObjectPrivate);
  // my_object-&gt;priv-&gt;some_field will be automatically initialised to 0
}

static int
my_object_get_some_field (MyObject *my_object)
{
  MyObjectPrivate *priv;

  g_return_val_if_fail (MY_IS_OBJECT (my_object), 0);

  priv = my_object-&gt;priv;

  return priv-&gt;some_field;
}
]|</doc>
        <doc-deprecated xml:space="preserve">Use the G_ADD_PRIVATE() macro with the `G_DEFINE_*`
  family of macros to add instance private data to a type</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="1303"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="g_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5092">class structure for an instantiatable
   type</doc>
            <type name="TypeClass" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="private_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5094">size of private structure</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_instance_private_offset"
              c:identifier="g_type_class_get_instance_private_offset"
              version="2.38"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5165">Gets the offset of the private data for instances of @g_class.

This is how many bytes you should add to the instance pointer of a
class in order to get the private data for the type represented by
@g_class.

You can only call this function after you have registered a private
data area for @g_class using g_type_class_add_private().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="1322"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5178">the offset, in bytes</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="g_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5167">a #GTypeClass</doc>
            <type name="TypeClass" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private" c:identifier="g_type_class_get_private">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="1319"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="klass" transfer-ownership="none">
            <type name="TypeClass" c:type="GTypeClass*"/>
          </instance-parameter>
          <parameter name="private_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_parent" c:identifier="g_type_class_peek_parent">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5199">This is a convenience function often needed in class initializers.
It returns the class structure of the immediate parent type of the
class passed in.  Since derived classes hold a reference count on
their parent classes as long as they are instantiated, the returned
class will always exist.

This function is essentially equivalent to:
g_type_class_peek (g_type_parent (G_TYPE_FROM_CLASS (g_class)))</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="716"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5213">the parent class
    of @g_class</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="g_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5201">the #GTypeClass structure to
    retrieve the parent class for</doc>
            <type name="TypeClass" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="g_type_class_unref">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5245">Decrements the reference count of the class structure being passed in.
Once the last reference count of a class has been released, classes
may be finalized by the type system, so further dereferencing of a
class pointer after g_type_class_unref() are invalid.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="714"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="g_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5247">a #GTypeClass structure to unref</doc>
            <type name="TypeClass" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref_uncached"
              c:identifier="g_type_class_unref_uncached"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5256">A variant of g_type_class_unref() for use in #GTypeClassCacheFunc
implementations. It unreferences a class without consulting the chain
of #GTypeClassCacheFuncs, avoiding the recursion which would occur
otherwise.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="2224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="g_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5258">a #GTypeClass structure to unref</doc>
            <type name="TypeClass" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="adjust_private_offset"
                c:identifier="g_type_class_adjust_private_offset">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="1312"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="g_class"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="private_size_or_offset" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="peek" c:identifier="g_type_class_peek">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5183">This function is essentially the same as g_type_class_ref(),
except that the classes reference count isn't incremented.
As a consequence, this function may return %NULL if the class
of the type passed in does not currently exist (hasn't been
referenced before).</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="710"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5193">the #GTypeClass
    structure for the given type ID or %NULL if the class does not
    currently exist</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5185">type ID of a classed type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="peek_static"
                c:identifier="g_type_class_peek_static"
                version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5218">A more efficient version of g_type_class_peek() which works only for
static types.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="712"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5225">the #GTypeClass
    structure for the given type ID or %NULL if the class does not
    currently exist or is dynamically loaded</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5220">type ID of a classed type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="ref" c:identifier="g_type_class_ref">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5232">Increments the reference count of the class structure belonging to
@type. This function will demand-create the class if it doesn't
exist already.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="708"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5240">the #GTypeClass
    structure for the given type ID</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5234">type ID of a classed type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="TypeClassCacheFunc" c:type="GTypeClassCacheFunc">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="942">A callback function which is called when the reference count of a class
drops to zero. It may use g_type_class_ref() to prevent the class from
being freed. You should not call g_type_class_unref() from a
#GTypeClassCacheFunc function to prevent infinite recursion, use
g_type_class_unref_uncached() instead.

The functions have to check the class id passed in to figure
whether they actually want to cache the class of this type, since all
classes are routed through the same #GTypeClassCacheFunc chain.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="961"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="958">%TRUE to stop further #GTypeClassCacheFuncs from being
 called, %FALSE to continue</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cache_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="944">data that was given to the g_type_add_class_cache_func() call</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="945">The #GTypeClass structure which is
   unreferenced</doc>
          <type name="TypeClass" c:type="GTypeClass*"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="TypeDebugFlags"
              deprecated="1"
              deprecated-version="2.36"
              c:type="GTypeDebugFlags">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="660">These flags used to be passed to g_type_init_with_debug_flags() which
is now deprecated.

If you need to enable debugging features, use the GOBJECT_DEBUG
environment variable.</doc>
      <doc-deprecated xml:space="preserve">g_type_init() is now done automatically</doc-deprecated>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="683"/>
      <member name="none" value="0" c:identifier="G_TYPE_DEBUG_NONE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="662">Print no messages</doc>
      </member>
      <member name="objects" value="1" c:identifier="G_TYPE_DEBUG_OBJECTS">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="663">Print messages about object bookkeeping</doc>
      </member>
      <member name="signals" value="2" c:identifier="G_TYPE_DEBUG_SIGNALS">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="664">Print messages about signal emissions</doc>
      </member>
      <member name="instance_count"
              value="4"
              c:identifier="G_TYPE_DEBUG_INSTANCE_COUNT">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="666">Keep a count of instances of each type</doc>
      </member>
      <member name="mask" value="7" c:identifier="G_TYPE_DEBUG_MASK">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="665">Mask covering all debug flags</doc>
      </member>
    </bitfield>
    <bitfield name="TypeFlags" c:type="GTypeFlags">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="993">Bit masks used to check or determine characteristics of a type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1007"/>
      <member name="abstract" value="16" c:identifier="G_TYPE_FLAG_ABSTRACT">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="995">Indicates an abstract type. No instances can be
 created for an abstract type</doc>
      </member>
      <member name="value_abstract"
              value="32"
              c:identifier="G_TYPE_FLAG_VALUE_ABSTRACT">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="997">Indicates an abstract value type, i.e. a type
 that introduces a value table, but can't be used for
 g_value_init()</doc>
      </member>
    </bitfield>
    <bitfield name="TypeFundamentalFlags" c:type="GTypeFundamentalFlags">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="976">Bit masks used to check or determine specific characteristics of a
fundamental type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="992"/>
      <member name="classed" value="1" c:identifier="G_TYPE_FLAG_CLASSED">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="978">Indicates a classed type</doc>
      </member>
      <member name="instantiatable"
              value="2"
              c:identifier="G_TYPE_FLAG_INSTANTIATABLE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="979">Indicates an instantiable type (implies classed)</doc>
      </member>
      <member name="derivable" value="4" c:identifier="G_TYPE_FLAG_DERIVABLE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="980">Indicates a flat derivable type</doc>
      </member>
      <member name="deep_derivable"
              value="8"
              c:identifier="G_TYPE_FLAG_DEEP_DERIVABLE">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="981">Indicates a deep derivable type (implies derivable)</doc>
      </member>
    </bitfield>
    <record name="TypeFundamentalInfo" c:type="GTypeFundamentalInfo">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="1060">A structure that provides information to the type system which is
used specifically for managing fundamental types.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1070"/>
      <field name="type_flags" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1062">#GTypeFundamentalFlags describing the characteristics of the fundamental type</doc>
        <type name="TypeFundamentalFlags" c:type="GTypeFundamentalFlags"/>
      </field>
    </record>
    <record name="TypeInfo" c:type="GTypeInfo">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="1008">This structure is used to provide the type system with the information
required to initialize and destruct (finalize) a type's class and
its instances.

The initialized structure is passed to the g_type_register_static() function
(or is copied into the provided #GTypeInfo structure in the
g_type_plugin_complete_type_info()). The type system will perform a deep
copy of this structure, so its memory does not need to be persistent
across invocation of g_type_register_static().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1059"/>
      <field name="class_size" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1010">Size of the class structure (required for interface, classed and instantiatable types)</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="base_init" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1011">Location of the base initialization function (optional)</doc>
        <type name="BaseInitFunc" c:type="GBaseInitFunc"/>
      </field>
      <field name="base_finalize" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1012">Location of the base finalization function (optional)</doc>
        <type name="BaseFinalizeFunc" c:type="GBaseFinalizeFunc"/>
      </field>
      <field name="class_init" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1013">Location of the class initialization function for
 classed and instantiatable types. Location of the default vtable
 inititalization function for interface types. (optional) This function
 is used both to fill in virtual functions in the class or default vtable,
 and to do type-specific setup such as registering signals and object
 properties.</doc>
        <type name="ClassInitFunc" c:type="GClassInitFunc"/>
      </field>
      <field name="class_finalize" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1019">Location of the class finalization function for
 classed and instantiatable types. Location of the default vtable
 finalization function for interface types. (optional)</doc>
        <type name="ClassFinalizeFunc" c:type="GClassFinalizeFunc"/>
      </field>
      <field name="class_data" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1022">User-supplied data passed to the class init/finalize functions</doc>
        <type name="gpointer" c:type="gconstpointer"/>
      </field>
      <field name="instance_size" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1023">Size of the instance (object) structure (required for instantiatable types only)</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="n_preallocs" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1024">Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now.</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="instance_init" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1025">Location of the instance initialization function (optional, for instantiatable types only)</doc>
        <type name="InstanceInitFunc" c:type="GInstanceInitFunc"/>
      </field>
      <field name="value_table" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1026">A #GTypeValueTable function table for generic handling of GValues
 of this type (usually only useful for fundamental types)</doc>
        <type name="TypeValueTable" c:type="const GTypeValueTable*"/>
      </field>
    </record>
    <record name="TypeInstance" c:type="GTypeInstance">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="411">An opaque structure used as the base of all type instances.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="420"/>
      <field name="g_class" readable="0" private="1">
        <type name="TypeClass" c:type="GTypeClass*"/>
      </field>
      <method name="get_private" c:identifier="g_type_instance_get_private">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="1309"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="instance" transfer-ownership="none">
            <type name="TypeInstance" c:type="GTypeInstance*"/>
          </instance-parameter>
          <parameter name="private_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="TypeInterface" c:type="GTypeInterface">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="421">An opaque structure used as the base of all interface types.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="431"/>
      <field name="g_type" readable="0" private="1">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="g_instance_type" readable="0" private="1">
        <type name="GType" c:type="GType"/>
      </field>
      <method name="peek_parent" c:identifier="g_type_interface_peek_parent">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5550">Returns the corresponding #GTypeInterface structure of the parent type
of the instance type to which @g_iface belongs. This is useful when
deriving the implementation of an interface from the parent type and
then possibly overriding some methods.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="721"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5559">the
    corresponding #GTypeInterface structure of the parent type of the
    instance type to which @g_iface belongs, or %NULL if the parent
    type doesn't conform to the interface</doc>
          <type name="TypeInterface" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="g_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5552">a #GTypeInterface structure</doc>
            <type name="TypeInterface" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="add_prerequisite"
                c:identifier="g_type_interface_add_prerequisite">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5508">Adds @prerequisite_type to the list of prerequisites of @interface_type.
This means that any type implementing @interface_type must also implement
@prerequisite_type. Prerequisites can be thought of as an alternative to
interface derivation (which GType doesn't support). An interface can have
at most one instantiatable prerequisite type.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="1297"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="interface_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5510">#GType value of an interface type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="prerequisite_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5511">#GType value of an interface or instantiatable type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_plugin" c:identifier="g_type_interface_get_plugin">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5521">Returns the #GTypePlugin structure for the dynamic interface
@interface_type which has been added to @instance_type, or %NULL
if @interface_type has not been added to @instance_type or does
not have a #GTypePlugin structure. See g_type_add_interface_dynamic().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="2206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5531">the #GTypePlugin for the dynamic
    interface @interface_type of @instance_type</doc>
          <type name="TypePlugin" c:type="GTypePlugin*"/>
        </return-value>
        <parameters>
          <parameter name="instance_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5523">#GType of an instantiatable type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="interface_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5524">#GType of an interface type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="peek" c:identifier="g_type_interface_peek">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5536">Returns the #GTypeInterface structure of an interface to which the
passed in class conforms.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="718"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5544">the #GTypeInterface
    structure of @iface_type if implemented by @instance_class, %NULL
    otherwise</doc>
          <type name="TypeInterface" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="instance_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5538">a #GTypeClass structure</doc>
            <type name="TypeClass" c:type="gpointer"/>
          </parameter>
          <parameter name="iface_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5539">an interface ID which this class conforms to</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="prerequisites"
                c:identifier="g_type_interface_prerequisites"
                version="2.2">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5566">Returns the prerequisites of an interfaces type.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="1300"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5575">a
    newly-allocated zero-terminated array of #GType containing
    the prerequisites of @interface_type</doc>
          <array length="1" zero-terminated="0" c:type="GType*">
            <type name="GType" c:type="GType"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="interface_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5568">an interface type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="n_prerequisites"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5569">location to return the number
    of prerequisites, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="TypeInterfaceCheckFunc"
              c:type="GTypeInterfaceCheckFunc"
              version="2.4">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="963">A callback called after an interface vtable is initialized.
See g_type_add_interface_check().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="974"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="check_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="965">data passed to g_type_add_interface_check()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="g_iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
               line="966">the interface that has been
   initialized</doc>
          <type name="TypeInterface" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="TypeModule"
           c:symbol-prefix="type_module"
           c:type="GTypeModule"
           parent="Object"
           abstract="1"
           glib:type-name="GTypeModule"
           glib:get-type="g_type_module_get_type"
           glib:type-struct="TypeModuleClass">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="459">#GTypeModule provides a simple implementation of the #GTypePlugin
interface. The model of #GTypeModule is a dynamically loaded module
which implements some number of types and interface implementations.
When the module is loaded, it registers its types and interfaces
using g_type_module_register_type() and g_type_module_add_interface().
As long as any instances of these types and interface implementations
are in use, the module is kept loaded. When the types and interfaces
are gone, the module may be unloaded. If the types and interfaces
become used again, the module will be reloaded. Note that the last
unref cannot happen in module code, since that would lead to the
caller's code being unloaded before g_object_unref() returns to it.

Keeping track of whether the module should be loaded or not is done by
using a use count - it starts at zero, and whenever it is greater than
zero, the module is loaded. The use count is maintained internally by
the type system, but also can be explicitly controlled by
g_type_module_use() and g_type_module_unuse(). Typically, when loading
a module for the first type, g_type_module_use() will be used to load
it so that it can initialize its types. At some later point, when the
module no longer needs to be loaded except for the type
implementations it contains, g_type_module_unuse() is called.

#GTypeModule does not actually provide any implementation of module
loading and unloading. To create a particular module type you must
derive from #GTypeModule and implement the load and unload functions
in #GTypeModuleClass.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                       line="84"/>
      <implements name="TypePlugin"/>
      <virtual-method name="load">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <type name="TypeModule" c:type="GTypeModule*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <type name="TypeModule" c:type="GTypeModule*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_interface" c:identifier="g_type_module_add_interface">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5609">Registers an additional interface for a type, whose interface lives
in the given type plugin. If the interface was already registered
for the type in this plugin, nothing will be done.

As long as any instances of the type exist, the type plugin will
not be unloaded.

Since 2.56 if @module is %NULL this will call g_type_add_interface_static()
instead. This can be used when making a static build of the module.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                         line="280"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="module"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5611">a #GTypeModule</doc>
            <type name="TypeModule" c:type="GTypeModule*"/>
          </instance-parameter>
          <parameter name="instance_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5612">type to which to add the interface.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="interface_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5613">interface type to add</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="interface_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5614">type information structure</doc>
            <type name="InterfaceInfo" c:type="const GInterfaceInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_enum"
              c:identifier="g_type_module_register_enum"
              version="2.6">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5628">Looks up or registers an enumeration that is implemented with a particular
type plugin. If a type with name @type_name was previously registered,
the #GType identifier for the type is returned, otherwise the type
is newly registered, and the resulting #GType identifier returned.

As long as any instances of the type exist, the type plugin will
not be unloaded.

Since 2.56 if @module is %NULL this will call g_type_register_static()
instead. This can be used when making a static build of the module.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                         line="285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5649">the new or existing type ID</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="module"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5630">a #GTypeModule</doc>
            <type name="TypeModule" c:type="GTypeModule*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5631">name for the type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="const_static_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5632">an array of #GEnumValue structs for the
                      possible enumeration values. The array is
                      terminated by a struct with all members being
                      0.</doc>
            <type name="EnumValue" c:type="const GEnumValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_flags"
              c:identifier="g_type_module_register_flags"
              version="2.6">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5653">Looks up or registers a flags type that is implemented with a particular
type plugin. If a type with name @type_name was previously registered,
the #GType identifier for the type is returned, otherwise the type
is newly registered, and the resulting #GType identifier returned.

As long as any instances of the type exist, the type plugin will
not be unloaded.

Since 2.56 if @module is %NULL this will call g_type_register_static()
instead. This can be used when making a static build of the module.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                         line="289"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5674">the new or existing type ID</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="module"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5655">a #GTypeModule</doc>
            <type name="TypeModule" c:type="GTypeModule*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5656">name for the type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="const_static_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5657">an array of #GFlagsValue structs for the
                      possible flags values. The array is
                      terminated by a struct with all members being
                      0.</doc>
            <type name="FlagsValue" c:type="const GFlagsValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_type" c:identifier="g_type_module_register_type">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5678">Looks up or registers a type that is implemented with a particular
type plugin. If a type with name @type_name was previously registered,
the #GType identifier for the type is returned, otherwise the type
is newly registered, and the resulting #GType identifier returned.

When reregistering a type (typically because a module is unloaded
then reloaded, and reinitialized), @module and @parent_type must
be the same as they were previously.

As long as any instances of the type exist, the type plugin will
not be unloaded.

Since 2.56 if @module is %NULL this will call g_type_register_static()
instead. This can be used when making a static build of the module.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                         line="274"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5701">the new or existing type ID</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="module"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5680">a #GTypeModule</doc>
            <type name="TypeModule" c:type="GTypeModule*"/>
          </instance-parameter>
          <parameter name="parent_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5681">the type for the parent class</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="type_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5682">name for the type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5683">type information structure</doc>
            <type name="TypeInfo" c:type="const GTypeInfo*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5684">flags field providing details about the type</doc>
            <type name="TypeFlags" c:type="GTypeFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="g_type_module_set_name">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5705">Sets the name for a #GTypeModule</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                         line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5707">a #GTypeModule.</doc>
            <type name="TypeModule" c:type="GTypeModule*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5708">a human-readable name to use in error messages.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unuse" c:identifier="g_type_module_unuse">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5714">Decreases the use count of a #GTypeModule by one. If the
result is zero, the module will be unloaded. (However, the
#GTypeModule will not be freed, and types associated with the
#GTypeModule are not unregistered. Once a #GTypeModule is
initialized, it must exist forever.)</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                         line="269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5716">a #GTypeModule</doc>
            <type name="TypeModule" c:type="GTypeModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="use" c:identifier="g_type_module_use">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5726">Increases the use count of a #GTypeModule by one. If the
use count was zero before, the plugin will be loaded.
If loading the plugin fails, the use count is reset to
its prior value.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                         line="267"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5735">%FALSE if the plugin needed to be loaded and
 loading the plugin failed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5728">a #GTypeModule</doc>
            <type name="TypeModule" c:type="GTypeModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Object" c:type="GObject"/>
      </field>
      <field name="use_count">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="type_infos">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="interface_infos">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="name">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
             line="43">the name of the module</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </class>
    <record name="TypeModuleClass"
            c:type="GTypeModuleClass"
            glib:is-gtype-struct-for="TypeModule">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
           line="60">In order to implement dynamic loading of types based on #GTypeModule,
the @load and @unload functions in #GTypeModuleClass must be implemented.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                       line="84"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
             line="62">the parent class</doc>
        <type name="ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="module" transfer-ownership="none">
              <type name="TypeModule" c:type="GTypeModule*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                           line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="module" transfer-ownership="none">
              <type name="TypeModule" c:type="GTypeModule*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved1">
        <callback name="reserved1">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                           line="80"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved2">
        <callback name="reserved2">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                           line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved3">
        <callback name="reserved3">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                           line="82"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved4">
        <callback name="reserved4">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypemodule.h"
                           line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <interface name="TypePlugin"
               c:symbol-prefix="type_plugin"
               c:type="GTypePlugin"
               glib:type-name="GTypePlugin"
               glib:get-type="g_type_plugin_get_type">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="494">The GObject type system supports dynamic loading of types.
The #GTypePlugin interface is used to handle the lifecycle
of dynamically loaded types. It goes as follows:

1. The type is initially introduced (usually upon loading the module
   the first time, or by your main application that knows what modules
   introduces what types), like this:
   |[&lt;!-- language="C" --&gt;
   new_type_id = g_type_register_dynamic (parent_type_id,
                                          "TypeName",
                                          new_type_plugin,
                                          type_flags);
   ]|
   where @new_type_plugin is an implementation of the
   #GTypePlugin interface.

2. The type's implementation is referenced, e.g. through
   g_type_class_ref() or through g_type_create_instance() (this is
   being called by g_object_new()) or through one of the above done on
   a type derived from @new_type_id.

3. This causes the type system to load the type's implementation by
   calling g_type_plugin_use() and g_type_plugin_complete_type_info()
   on @new_type_plugin.

4. At some point the type's implementation isn't required anymore,
   e.g. after g_type_class_unref() or g_type_free_instance() (called
   when the reference count of an instance drops to zero).

5. This causes the type system to throw away the information retrieved
   from g_type_plugin_complete_type_info() and then it calls
   g_type_plugin_unuse() on @new_type_plugin.

6. Things may repeat from the second step.

So basically, you need to implement a #GTypePlugin type that
carries a use_count, once use_count goes from zero to one, you need
to load the implementation to successfully handle the upcoming
g_type_plugin_complete_type_info() call. Later, maybe after
succeeding use/unuse calls, once use_count drops to zero, you can
unload the implementation again. The type system makes sure to call
g_type_plugin_use() and g_type_plugin_complete_type_info() again
when the type is needed again.

#GTypeModule is an implementation of #GTypePlugin that already
implements most of this except for the actual module loading and
unloading. It even handles multiple registered types per module.</doc>
      <method name="complete_interface_info"
              c:identifier="g_type_plugin_complete_interface_info">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5782">Calls the @complete_interface_info function from the
#GTypePluginClass of @plugin. There should be no need to use this
function outside of the GObject type system itself.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5784">the #GTypePlugin</doc>
            <type name="TypePlugin" c:type="GTypePlugin*"/>
          </instance-parameter>
          <parameter name="instance_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5785">the #GType of an instantiable type to which the interface
 is added</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="interface_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5787">the #GType of the interface whose info is completed</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5788">the #GInterfaceInfo to fill in</doc>
            <type name="InterfaceInfo" c:type="GInterfaceInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_type_info"
              c:identifier="g_type_plugin_complete_type_info">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5796">Calls the @complete_type_info function from the #GTypePluginClass of @plugin.
There should be no need to use this function outside of the GObject
type system itself.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5798">a #GTypePlugin</doc>
            <type name="TypePlugin" c:type="GTypePlugin*"/>
          </instance-parameter>
          <parameter name="g_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5799">the #GType whose info is completed</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5800">the #GTypeInfo struct to fill in</doc>
            <type name="TypeInfo" c:type="GTypeInfo*"/>
          </parameter>
          <parameter name="value_table" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5801">the #GTypeValueTable to fill in</doc>
            <type name="TypeValueTable" c:type="GTypeValueTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unuse" c:identifier="g_type_plugin_unuse">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5809">Calls the @unuse_plugin function from the #GTypePluginClass of
@plugin.  There should be no need to use this function outside of
the GObject type system itself.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5811">a #GTypePlugin</doc>
            <type name="TypePlugin" c:type="GTypePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="use" c:identifier="g_type_plugin_use">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5819">Calls the @use_plugin function from the #GTypePluginClass of
@plugin.  There should be no need to use this function outside of
the GObject type system itself.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5821">a #GTypePlugin</doc>
            <type name="TypePlugin" c:type="GTypePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="TypePluginClass" c:type="GTypePluginClass">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
           line="87">The #GTypePlugin interface is used by the type system in order to handle
the lifecycle of dynamically loaded types.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
                       line="111"/>
      <field name="base_iface" readable="0" private="1">
        <type name="TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="use_plugin" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
             line="89">Increases the use count of the plugin.</doc>
        <type name="TypePluginUse" c:type="GTypePluginUse"/>
      </field>
      <field name="unuse_plugin" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
             line="90">Decreases the use count of the plugin.</doc>
        <type name="TypePluginUnuse" c:type="GTypePluginUnuse"/>
      </field>
      <field name="complete_type_info" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
             line="91">Fills in the #GTypeInfo and
 #GTypeValueTable structs for the type. The structs are initialized
 with `memset(s, 0, sizeof (s))` before calling this function.</doc>
        <type name="TypePluginCompleteTypeInfo"
              c:type="GTypePluginCompleteTypeInfo"/>
      </field>
      <field name="complete_interface_info" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
             line="94">Fills in missing parts of the #GInterfaceInfo
 for the interface. The structs is initialized with
 `memset(s, 0, sizeof (s))` before calling this function.</doc>
        <type name="TypePluginCompleteInterfaceInfo"
              c:type="GTypePluginCompleteInterfaceInfo"/>
      </field>
    </record>
    <callback name="TypePluginCompleteInterfaceInfo"
              c:type="GTypePluginCompleteInterfaceInfo">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
           line="67">The type of the @complete_interface_info function of #GTypePluginClass.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
                       line="77"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="69">the #GTypePlugin</doc>
          <type name="TypePlugin" c:type="GTypePlugin*"/>
        </parameter>
        <parameter name="instance_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="70">the #GType of an instantiable type to which the interface
 is added</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="interface_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="72">the #GType of the interface whose info is completed</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="73">the #GInterfaceInfo to fill in</doc>
          <type name="InterfaceInfo" c:type="GInterfaceInfo*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TypePluginCompleteTypeInfo"
              c:type="GTypePluginCompleteTypeInfo">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
           line="54">The type of the @complete_type_info function of #GTypePluginClass.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
                       line="63"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="56">the #GTypePlugin</doc>
          <type name="TypePlugin" c:type="GTypePlugin*"/>
        </parameter>
        <parameter name="g_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="57">the #GType whose info is completed</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="58">the #GTypeInfo struct to fill in</doc>
          <type name="TypeInfo" c:type="GTypeInfo*"/>
        </parameter>
        <parameter name="value_table" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="59">the #GTypeValueTable to fill in</doc>
          <type name="TypeValueTable" c:type="GTypeValueTable*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TypePluginUnuse" c:type="GTypePluginUnuse">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
           line="47">The type of the @unuse_plugin function of #GTypePluginClass.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
                       line="53"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="49">the #GTypePlugin whose use count should be decreased</doc>
          <type name="TypePlugin" c:type="GTypePlugin*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TypePluginUse" c:type="GTypePluginUse">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
           line="39">The type of the @use_plugin function of #GTypePluginClass, which gets called
to increase the use count of @plugin.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
                       line="46"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtypeplugin.h"
               line="41">the #GTypePlugin whose use count should be increased</doc>
          <type name="TypePlugin" c:type="GTypePlugin*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TypeQuery" c:type="GTypeQuery">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="432">A structure holding information for a specific type.
It is filled in by the g_type_query() function.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="448"/>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="434">the #GType value of the type</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="type_name" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="435">the name of the type</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="class_size" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="436">the size of the class structure</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="instance_size" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="437">the size of the instance structure</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="TypeValueTable" c:type="GTypeValueTable">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
           line="1086">The #GTypeValueTable provides the functions required by the #GValue
implementation, to serve as a container for values of a type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1262"/>
      <field name="value_init">
        <callback name="value_init">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                           line="1246"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_free">
        <callback name="value_free">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                           line="1247"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_copy">
        <callback name="value_copy">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                           line="1248"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="src_value" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="dest_value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_peek_pointer">
        <callback name="value_peek_pointer">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                           line="1251"/>
          <return-value transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </return-value>
          <parameters>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="collect_format" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1123">A string format describing how to collect the contents of
 this value bit-by-bit. Each character in the format represents
 an argument to be collected, and the characters themselves indicate
 the type of the argument. Currently supported arguments are:
 - 'i' - Integers. passed as collect_values[].v_int.
 - 'l' - Longs. passed as collect_values[].v_long.
 - 'd' - Doubles. passed as collect_values[].v_double.
 - 'p' - Pointers. passed as collect_values[].v_pointer.
 It should be noted that for variable argument list construction,
 ANSI C promotes every type smaller than an integer to an int, and
 floats to doubles. So for collection of short int or char, 'i'
 needs to be used, and for collection of floats 'd'.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="collect_value">
        <callback name="collect_value">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                           line="1253"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
            <parameter name="n_collect_values" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="collect_values" transfer-ownership="none">
              <type name="TypeCValue" c:type="GTypeCValue*"/>
            </parameter>
            <parameter name="collect_flags" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lcopy_format" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
             line="1203">Format description of the arguments to collect for @lcopy_value,
 analogous to @collect_format. Usually, @lcopy_format string consists
 only of 'p's to provide lcopy_value() with pointers to storage locations.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="lcopy_value">
        <callback name="lcopy_value">
          <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                           line="1258"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="n_collect_values" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="collect_values" transfer-ownership="none">
              <type name="TypeCValue" c:type="GTypeCValue*"/>
            </parameter>
            <parameter name="collect_flags" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <function name="peek"
                c:identifier="g_type_value_table_peek"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5961">Returns the location of the #GTypeValueTable associated with @type.

Note that this function should only be used from source code
that implements or has internal knowledge of the implementation of
@type.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                         line="2234"/>
        <return-value>
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5971">location of the #GTypeValueTable associated with @type or
    %NULL if there is no #GTypeValueTable associated with @type</doc>
          <type name="TypeValueTable" c:type="GTypeValueTable*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5963">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <constant name="VALUE_NOCOPY_CONTENTS"
              value="134217728"
              c:type="G_VALUE_NOCOPY_CONTENTS">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
           line="169">If passed to G_VALUE_COLLECT(), allocated data won't be copied
but used verbatim. This does not affect ref-counted types like
objects.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                       line="176"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <callback name="VaClosureMarshal"
              c:type="GVaClosureMarshal"
              introspectable="0">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
           line="122">This is the signature of va_list marshaller functions, an optional
marshaller that can be used in some situations to avoid
marshalling the signal argument into GValues.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="142"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="124">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="125">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="128">the instance on which the closure is
 invoked.</doc>
          <type name="TypeInstance" c:type="gpointer"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="130">va_list of arguments to be passed to the closure.</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="131">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="n_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="134">the length of the @param_types array</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="param_types" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
               line="135">the #GType of each argument from
 @args.</doc>
          <array length="5" zero-terminated="0" c:type="GType*">
            <type name="GType" c:type="GType"/>
          </array>
        </parameter>
      </parameters>
    </callback>
    <record name="Value"
            c:type="GValue"
            glib:type-name="GValue"
            glib:get-type="g_value_get_type"
            c:symbol-prefix="value">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
           line="96">An opaque structure used to hold different types of values.
The data within the structure has protected scope: it is accessible only
to functions within a #GTypeValueTable structure, or implementations of
the g_value_*() API. That is, code portions which implement new fundamental
types.
#GValue users cannot make any assumptions about how data is stored
within the 2 element @data union, and the @g_type member should
only be accessed through the G_VALUE_TYPE() macro.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                       line="125"/>
      <field name="g_type" readable="0" private="1">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="data" writable="1">
        <array zero-terminated="0" fixed-size="2">
          <type name="_Value__data__union"/>
        </array>
      </field>
      <method name="copy" c:identifier="g_value_copy">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6109">Copies the value of @src_value into @dest_value.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6111">An initialized #GValue structure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
          <parameter name="dest_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6112">An initialized #GValue structure of the same type as @src_value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_boxed"
              c:identifier="g_value_dup_boxed"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6118">Get the contents of a %G_TYPE_BOXED derived #GValue.  Upon getting,
the boxed value is duplicated and needs to be later freed with
g_boxed_free(), e.g. like: g_boxed_free (G_VALUE_TYPE (@value),
return_value);</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                         line="90"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6127">boxed contents of @value</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6120">a valid #GValue of %G_TYPE_BOXED derived type</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_object" c:identifier="g_value_dup_object">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6131">Get the contents of a %G_TYPE_OBJECT derived #GValue, increasing
its reference count. If the contents of the #GValue are %NULL, then
%NULL will be returned.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="618"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6139">object content of @value,
         should be unreferenced when no longer needed.</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6133">a valid #GValue whose type is derived from %G_TYPE_OBJECT</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_param"
              c:identifier="g_value_dup_param"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6144">Get the contents of a %G_TYPE_PARAM #GValue, increasing its
reference count.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="337"/>
        <return-value>
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6151">#GParamSpec content of @value, should be unreferenced when
         no longer needed.</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6146">a valid #GValue whose type is derived from %G_TYPE_PARAM</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_string" c:identifier="g_value_dup_string">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6156">Get a copy the contents of a %G_TYPE_STRING #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="247"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6162">a newly allocated copy of the string content of @value</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6158">a valid #GValue of type %G_TYPE_STRING</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_variant"
              c:identifier="g_value_dup_variant"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6166">Get the contents of a variant #GValue, increasing its refcount. The returned
#GVariant is never floating.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="269"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6173">variant contents of @value (may be %NULL);
   should be unreffed using g_variant_unref() when no longer needed</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6168">a valid #GValue of type %G_TYPE_VARIANT</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fits_pointer" c:identifier="g_value_fits_pointer">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6179">Determines if @value will fit inside the size of a pointer value.
This is an internal function introduced mainly for C marshallers.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6186">%TRUE if @value will fit inside a pointer value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6181">An initialized #GValue structure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_boolean" c:identifier="g_value_get_boolean">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6190">Get the contents of a %G_TYPE_BOOLEAN #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6196">boolean contents of @value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6192">a valid #GValue of type %G_TYPE_BOOLEAN</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_boxed" c:identifier="g_value_get_boxed">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6200">Get the contents of a %G_TYPE_BOXED derived #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                         line="88"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6206">boxed contents of @value</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6202">a valid #GValue of %G_TYPE_BOXED derived type</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_char"
              c:identifier="g_value_get_char"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6210">Do not use this function; it is broken on platforms where the %char
type is unsigned, such as ARM and PowerPC.  See g_value_get_schar().

Get the contents of a %G_TYPE_CHAR #GValue.</doc>
        <doc-deprecated xml:space="preserve">This function's return type is broken, see g_value_get_schar()</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6219">character contents of @value</doc>
          <type name="gchar" c:type="gchar"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6212">a valid #GValue of type %G_TYPE_CHAR</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_double" c:identifier="g_value_get_double">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6224">Get the contents of a %G_TYPE_DOUBLE #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6230">double contents of @value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6226">a valid #GValue of type %G_TYPE_DOUBLE</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enum" c:identifier="g_value_get_enum">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6234">Get the contents of a %G_TYPE_ENUM #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                         line="246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6240">enum contents of @value</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6236">a valid #GValue whose type is derived from %G_TYPE_ENUM</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="g_value_get_flags">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6244">Get the contents of a %G_TYPE_FLAGS #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                         line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6250">flags contents of @value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6246">a valid #GValue whose type is derived from %G_TYPE_FLAGS</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_float" c:identifier="g_value_get_float">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6254">Get the contents of a %G_TYPE_FLOAT #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="232"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6260">float contents of @value</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6256">a valid #GValue of type %G_TYPE_FLOAT</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gtype" c:identifier="g_value_get_gtype" version="2.12">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6264">Get the contents of a %G_TYPE_GTYPE #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="259"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6271">the #GType stored in @value</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6266">a valid #GValue of type %G_TYPE_GTYPE</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="g_value_get_int">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6275">Get the contents of a %G_TYPE_INT #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6281">integer contents of @value</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6277">a valid #GValue of type %G_TYPE_INT</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_int64" c:identifier="g_value_get_int64">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6285">Get the contents of a %G_TYPE_INT64 #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="222"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6291">64bit integer contents of @value</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6287">a valid #GValue of type %G_TYPE_INT64</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_long" c:identifier="g_value_get_long">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6295">Get the contents of a %G_TYPE_LONG #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6301">long integer contents of @value</doc>
          <type name="glong" c:type="glong"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6297">a valid #GValue of type %G_TYPE_LONG</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object" c:identifier="g_value_get_object">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6305">Get the contents of a %G_TYPE_OBJECT derived #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="616"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6311">object contents of @value</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6307">a valid #GValue of %G_TYPE_OBJECT derived type</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_param" c:identifier="g_value_get_param">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6315">Get the contents of a %G_TYPE_PARAM #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="335"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6321">#GParamSpec content of @value</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6317">a valid #GValue whose type is derived from %G_TYPE_PARAM</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pointer" c:identifier="g_value_get_pointer">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6325">Get the contents of a pointer #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="252"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6331">pointer contents of @value</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6327">a valid #GValue of %G_TYPE_POINTER</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_schar" c:identifier="g_value_get_schar" version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6335">Get the contents of a %G_TYPE_CHAR #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="187"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6341">signed 8 bit integer contents of @value</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6337">a valid #GValue of type %G_TYPE_CHAR</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="g_value_get_string">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6346">Get the contents of a %G_TYPE_STRING #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="245"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6352">string content of @value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6348">a valid #GValue of type %G_TYPE_STRING</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uchar" c:identifier="g_value_get_uchar">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6356">Get the contents of a %G_TYPE_UCHAR #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6362">unsigned character contents of @value</doc>
          <type name="guint8" c:type="guchar"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6358">a valid #GValue of type %G_TYPE_UCHAR</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uint" c:identifier="g_value_get_uint">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6366">Get the contents of a %G_TYPE_UINT #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6372">unsigned integer contents of @value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6368">a valid #GValue of type %G_TYPE_UINT</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uint64" c:identifier="g_value_get_uint64">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6376">Get the contents of a %G_TYPE_UINT64 #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6382">unsigned 64bit integer contents of @value</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6378">a valid #GValue of type %G_TYPE_UINT64</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ulong" c:identifier="g_value_get_ulong">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6386">Get the contents of a %G_TYPE_ULONG #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6392">unsigned long integer contents of @value</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6388">a valid #GValue of type %G_TYPE_ULONG</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_variant"
              c:identifier="g_value_get_variant"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6396">Get the contents of a variant #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="267"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6402">variant contents of @value (may be %NULL)</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6398">a valid #GValue of type %G_TYPE_VARIANT</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="g_value_init">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6407">Initializes @value with the default value of @type.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6414">the #GValue structure that has been passed in</doc>
          <type name="Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6409">A zero-filled (uninitialized) #GValue structure.</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="g_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6410">Type the #GValue should hold values of.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_from_instance"
              c:identifier="g_value_init_from_instance"
              version="2.42">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6418">Initializes and sets @value from an instantiatable type via the
value_table's collect_value() function.

Note: The @value will be initialised with the exact type of
@instance.  If you wish to set the @value's type to a different GType
(such as a parent class GType), you need to manually call
g_value_init() and g_value_set_instance().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6420">An uninitialized #GValue structure.</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6421">the instance</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_pointer" c:identifier="g_value_peek_pointer">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6435">Returns the value contents as pointer. This function asserts that
g_value_fits_pointer() returned %TRUE for the passed in value.
This is an internal function introduced mainly for C marshallers.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="151"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6443">the value contents as pointer</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6437">An initialized #GValue structure</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="g_value_reset">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6460">Clears the current value in @value and resets it to the default value
(as if the value had just been initialized).</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="136"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6467">the #GValue structure that has been passed in</doc>
          <type name="Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6462">An initialized #GValue structure.</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_boolean" c:identifier="g_value_set_boolean">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6471">Set the contents of a %G_TYPE_BOOLEAN #GValue to @v_boolean.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6473">a valid #GValue of type %G_TYPE_BOOLEAN</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_boolean" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6474">boolean value to be set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boxed" c:identifier="g_value_set_boxed">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6480">Set the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6482">a valid #GValue of %G_TYPE_BOXED derived type</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_boxed"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6483">boxed value to be set</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boxed_take_ownership"
              c:identifier="g_value_set_boxed_take_ownership"
              deprecated="1"
              deprecated-version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6489">This is an internal function introduced mainly for C marshallers.</doc>
        <doc-deprecated xml:space="preserve">Use g_value_take_boxed() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6491">a valid #GValue of %G_TYPE_BOXED derived type</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_boxed"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6492">duplicated unowned boxed value to be set</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_char"
              c:identifier="g_value_set_char"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6500">Set the contents of a %G_TYPE_CHAR #GValue to @v_char.</doc>
        <doc-deprecated xml:space="preserve">This function's input type is broken, see g_value_set_schar()</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="179"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6502">a valid #GValue of type %G_TYPE_CHAR</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_char" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6503">character value to be set</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double" c:identifier="g_value_set_double">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6511">Set the contents of a %G_TYPE_DOUBLE #GValue to @v_double.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6513">a valid #GValue of type %G_TYPE_DOUBLE</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_double" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6514">double value to be set</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enum" c:identifier="g_value_set_enum">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6520">Set the contents of a %G_TYPE_ENUM #GValue to @v_enum.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                         line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6522">a valid #GValue whose type is derived from %G_TYPE_ENUM</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_enum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6523">enum value to be set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="g_value_set_flags">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6529">Set the contents of a %G_TYPE_FLAGS #GValue to @v_flags.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                         line="248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6531">a valid #GValue whose type is derived from %G_TYPE_FLAGS</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6532">flags value to be set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_float" c:identifier="g_value_set_float">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6538">Set the contents of a %G_TYPE_FLOAT #GValue to @v_float.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6540">a valid #GValue of type %G_TYPE_FLOAT</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_float" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6541">float value to be set</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gtype" c:identifier="g_value_set_gtype" version="2.12">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6547">Set the contents of a %G_TYPE_GTYPE #GValue to @v_gtype.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="256"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6549">a valid #GValue of type %G_TYPE_GTYPE</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_gtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6550">#GType to be set</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_instance" c:identifier="g_value_set_instance">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6558">Sets @value from an instantiatable type via the
value_table's collect_value() function.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6560">An initialized #GValue structure.</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6561">the instance</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="g_value_set_int">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6568">Set the contents of a %G_TYPE_INT #GValue to @v_int.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6570">a valid #GValue of type %G_TYPE_INT</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_int" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6571">integer value to be set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int64" c:identifier="g_value_set_int64">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6577">Set the contents of a %G_TYPE_INT64 #GValue to @v_int64.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="219"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6579">a valid #GValue of type %G_TYPE_INT64</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_int64" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6580">64bit integer value to be set</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_long" c:identifier="g_value_set_long">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6586">Set the contents of a %G_TYPE_LONG #GValue to @v_long.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="209"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6588">a valid #GValue of type %G_TYPE_LONG</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_long" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6589">long integer value to be set</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object" c:identifier="g_value_set_object">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6595">Set the contents of a %G_TYPE_OBJECT derived #GValue to @v_object.

g_value_set_object() increases the reference count of @v_object
(the #GValue holds a reference to @v_object).  If you do not wish
to increase the reference count of the object (i.e. you wish to
pass your current reference to the #GValue because you no longer
need it), use g_value_take_object() instead.

It is important that your #GValue holds a reference to @v_object (either its
own, or one it has taken) to ensure that the object won't be destroyed while
the #GValue still exists).</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="613"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6597">a valid #GValue of %G_TYPE_OBJECT derived type</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6598">object value to be set</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object_take_ownership"
              c:identifier="g_value_set_object_take_ownership"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6614">This is an internal function introduced mainly for C marshallers.</doc>
        <doc-deprecated xml:space="preserve">Use g_value_take_object() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="637"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6616">a valid #GValue of %G_TYPE_OBJECT derived type</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6617">object value to be set</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_param" c:identifier="g_value_set_param">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6625">Set the contents of a %G_TYPE_PARAM #GValue to @param.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="332"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6627">a valid #GValue of type %G_TYPE_PARAM</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="param"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6628">the #GParamSpec to be set</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_param_take_ownership"
              c:identifier="g_value_set_param_take_ownership"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6634">This is an internal function introduced mainly for C marshallers.</doc>
        <doc-deprecated xml:space="preserve">Use g_value_take_param() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="344"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6636">a valid #GValue of type %G_TYPE_PARAM</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="param"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6637">the #GParamSpec to be set</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pointer" c:identifier="g_value_set_pointer">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6645">Set the contents of a pointer #GValue to @v_pointer.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6647">a valid #GValue of %G_TYPE_POINTER</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_pointer"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6648">pointer value to be set</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_schar" c:identifier="g_value_set_schar" version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6654">Set the contents of a %G_TYPE_CHAR #GValue to @v_char.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6656">a valid #GValue of type %G_TYPE_CHAR</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_char" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6657">signed 8 bit integer to be set</doc>
            <type name="gint8" c:type="gint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_static_boxed" c:identifier="g_value_set_static_boxed">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6665">Set the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed.
The boxed value is assumed to be static, and is thus not duplicated
when setting the #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6667">a valid #GValue of %G_TYPE_BOXED derived type</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_boxed"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6668">static boxed value to be set</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_static_string"
              c:identifier="g_value_set_static_string">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6676">Set the contents of a %G_TYPE_STRING #GValue to @v_string.
The string is assumed to be static, and is thus not duplicated
when setting the #GValue.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6678">a valid #GValue of type %G_TYPE_STRING</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6679">static string to be set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="g_value_set_string">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6687">Set the contents of a %G_TYPE_STRING #GValue to @v_string.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6689">a valid #GValue of type %G_TYPE_STRING</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6690">caller-owned string to be duplicated for the #GValue</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string_take_ownership"
              c:identifier="g_value_set_string_take_ownership"
              deprecated="1"
              deprecated-version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6696">This is an internal function introduced mainly for C marshallers.</doc>
        <doc-deprecated xml:space="preserve">Use g_value_take_string() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="285"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6698">a valid #GValue of type %G_TYPE_STRING</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6699">duplicated unowned string to be set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uchar" c:identifier="g_value_set_uchar">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6707">Set the contents of a %G_TYPE_UCHAR #GValue to @v_uchar.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6709">a valid #GValue of type %G_TYPE_UCHAR</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_uchar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6710">unsigned character value to be set</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uint" c:identifier="g_value_set_uint">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6716">Set the contents of a %G_TYPE_UINT #GValue to @v_uint.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6718">a valid #GValue of type %G_TYPE_UINT</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_uint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6719">unsigned integer value to be set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uint64" c:identifier="g_value_set_uint64">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6725">Set the contents of a %G_TYPE_UINT64 #GValue to @v_uint64.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6727">a valid #GValue of type %G_TYPE_UINT64</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_uint64" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6728">unsigned 64bit integer value to be set</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ulong" c:identifier="g_value_set_ulong">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6734">Set the contents of a %G_TYPE_ULONG #GValue to @v_ulong.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="214"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6736">a valid #GValue of type %G_TYPE_ULONG</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_ulong" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6737">unsigned long integer value to be set</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variant"
              c:identifier="g_value_set_variant"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6743">Set the contents of a variant #GValue to @variant.
If the variant is floating, it is consumed.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6745">a valid #GValue of type %G_TYPE_VARIANT</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="variant"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6746">a #GVariant, or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_boxed"
              c:identifier="g_value_take_boxed"
              version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6755">Sets the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed
and takes over the ownership of the callers reference to @v_boxed;
the caller doesn't have to unref it any more.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6757">a valid #GValue of %G_TYPE_BOXED derived type</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_boxed"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6758">duplicated unowned boxed value to be set</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_object"
              c:identifier="g_value_take_object"
              version="2.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6768">Sets the contents of a %G_TYPE_OBJECT derived #GValue to @v_object
and takes over the ownership of the callers reference to @v_object;
the caller doesn't have to unref it any more (i.e. the reference
count of the object is not increased).

If you want the #GValue to hold its own reference to @v_object, use
g_value_set_object() instead.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="634"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6770">a valid #GValue of %G_TYPE_OBJECT derived type</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6771">object value to be set</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_param"
              c:identifier="g_value_take_param"
              version="2.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6785">Sets the contents of a %G_TYPE_PARAM #GValue to @param and takes
over the ownership of the callers reference to @param; the caller
doesn't have to unref it any more.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                         line="341"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6787">a valid #GValue of type %G_TYPE_PARAM</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="param"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6788">the #GParamSpec to be set</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_string"
              c:identifier="g_value_take_string"
              version="2.4">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6798">Sets the contents of a %G_TYPE_STRING #GValue to @v_string.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="282"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6800">a valid #GValue of type %G_TYPE_STRING</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="v_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6801">string to take ownership of</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_variant"
              c:identifier="g_value_take_variant"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6809">Set the contents of a variant #GValue to @variant, and takes over
the ownership of the caller's reference to @variant;
the caller doesn't have to unref it any more (i.e. the reference
count of the variant is not increased).

If @variant was floating then its floating reference is converted to
a hard reference.

If you want the #GValue to hold its own reference to @variant, use
g_value_set_variant() instead.

This is an internal function introduced mainly for C marshallers.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                         line="264"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6811">a valid #GValue of type %G_TYPE_VARIANT</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
          <parameter name="variant"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6812">a #GVariant, or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform" c:identifier="g_value_transform">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6831">Tries to cast the contents of @src_value into a type appropriate
to store in @dest_value, e.g. to transform a %G_TYPE_INT value
into a %G_TYPE_FLOAT value. Performing transformations between
value types might incur precision lossage. Especially
transformations into strings might reveal seemingly arbitrary
results and shouldn't be relied upon for production code (such
as rcfile value or object property serialization).</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6844">Whether a transformation rule was found and could be applied.
 Upon failing transformations, @dest_value is left untouched.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="src_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6833">Source value.</doc>
            <type name="Value" c:type="const GValue*"/>
          </instance-parameter>
          <parameter name="dest_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6834">Target value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset" c:identifier="g_value_unset">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6875">Clears the current value in @value (if any) and "unsets" the type,
this releases all resources associated with this GValue. An unset
value is the same as an uninitialized (zero-filled) #GValue
structure.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6877">An initialized #GValue structure.</doc>
            <type name="Value" c:type="GValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="register_transform_func"
                c:identifier="g_value_register_transform_func"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6447">Registers a value transformation function for use in g_value_transform().
A previously registered transformation function for @src_type and @dest_type
will be replaced.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="src_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6449">Source type.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="dest_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6450">Target type.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="transform_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6451">a function which transforms values of type @src_type
 into value of type @dest_type</doc>
            <type name="ValueTransform" c:type="GValueTransform"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_compatible" c:identifier="g_value_type_compatible">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6849">Returns whether a #GValue of type @src_type can be copied into
a #GValue of type @dest_type.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6857">%TRUE if g_value_copy() is possible with @src_type and @dest_type.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6851">source type to be copied.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="dest_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6852">destination type for copying.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_transformable"
                c:identifier="g_value_type_transformable">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6861">Check whether g_value_transform() is able to transform values
of type @src_type into values of type @dest_type. Note that for
the types to be transformable, they must be compatible or a
transformation function must be registered.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                         line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6871">%TRUE if the transformation is possible, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6863">Source type.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="dest_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6864">Target type.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="ValueArray"
            c:type="GValueArray"
            glib:type-name="GValueArray"
            glib:get-type="g_value_array_get_type"
            c:symbol-prefix="value_array">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
           line="42">A #GValueArray contains an array of #GValue elements.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                       line="56"/>
      <field name="n_values" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
             line="44">number of values contained in the array</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="values" writable="1">
        <doc xml:space="preserve"
             filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
             line="45">array of values</doc>
        <type name="Value" c:type="GValue*"/>
      </field>
      <field name="n_prealloced" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new"
                   c:identifier="g_value_array_new"
                   deprecated="1"
                   deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6037">Allocate and initialize a new #GValueArray, optionally preserve space
for @n_prealloced elements. New arrays always contain 0 elements,
regardless of the value of @n_prealloced.</doc>
        <doc-deprecated xml:space="preserve">Use #GArray and g_array_sized_new() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6045">a newly allocated #GValueArray with 0 values</doc>
          <type name="ValueArray" c:type="GValueArray*"/>
        </return-value>
        <parameters>
          <parameter name="n_prealloced" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6039">number of values to preallocate space for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append"
              c:identifier="g_value_array_append"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5976">Insert a copy of @value as last element of @value_array. If @value is
%NULL, an uninitialized value is appended.</doc>
        <doc-deprecated xml:space="preserve">Use #GArray and g_array_append_val() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5984">the #GValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5978">#GValueArray to add an element to</doc>
            <type name="ValueArray" c:type="GValueArray*"/>
          </instance-parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5979">#GValue to copy into #GValueArray, or %NULL</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy"
              c:identifier="g_value_array_copy"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5989">Construct an exact copy of a #GValueArray by duplicating all its
contents.</doc>
        <doc-deprecated xml:space="preserve">Use #GArray and g_array_ref() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5996">Newly allocated copy of #GValueArray</doc>
          <type name="ValueArray" c:type="GValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="5991">#GValueArray to copy</doc>
            <type name="ValueArray" c:type="const GValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="g_value_array_free"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6001">Free a #GValueArray including its contents.</doc>
        <doc-deprecated xml:space="preserve">Use #GArray and g_array_unref() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6003">#GValueArray to free</doc>
            <type name="ValueArray" c:type="GValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth"
              c:identifier="g_value_array_get_nth"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6011">Return a pointer to the value at @index_ containd in @value_array.</doc>
        <doc-deprecated xml:space="preserve">Use g_array_index() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6018">pointer to a value at @index_ in @value_array</doc>
          <type name="Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6013">#GValueArray to get a value from</doc>
            <type name="ValueArray" c:type="GValueArray*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6014">index of the value of interest</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert"
              c:identifier="g_value_array_insert"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6023">Insert a copy of @value at specified position into @value_array. If @value
is %NULL, an uninitialized value is inserted.</doc>
        <doc-deprecated xml:space="preserve">Use #GArray and g_array_insert_val() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6032">the #GValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6025">#GValueArray to add an element to</doc>
            <type name="ValueArray" c:type="GValueArray*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6026">insertion position, must be &lt;= value_array-&gt;;n_values</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6027">#GValue to copy into #GValueArray, or %NULL</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend"
              c:identifier="g_value_array_prepend"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6050">Insert a copy of @value as first element of @value_array. If @value is
%NULL, an uninitialized value is prepended.</doc>
        <doc-deprecated xml:space="preserve">Use #GArray and g_array_prepend_val() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6058">the #GValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6052">#GValueArray to add an element to</doc>
            <type name="ValueArray" c:type="GValueArray*"/>
          </instance-parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6053">#GValue to copy into #GValueArray, or %NULL</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="g_value_array_remove"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6063">Remove the value at position @index_ from @value_array.</doc>
        <doc-deprecated xml:space="preserve">Use #GArray and g_array_remove_index() instead.</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6071">the #GValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6065">#GValueArray to remove an element from</doc>
            <type name="ValueArray" c:type="GValueArray*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6066">position of value to remove, which must be less than
    @value_array-&gt;n_values</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort"
              c:identifier="g_value_array_sort"
              shadowed-by="sort_with_data"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6076">Sort @value_array using @compare_func to compare the elements according to
the semantics of #GCompareFunc.

The current implementation uses the same sorting algorithm as standard
C qsort() function.</doc>
        <doc-deprecated xml:space="preserve">Use #GArray and g_array_sort().</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6087">the #GValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6078">#GValueArray to sort</doc>
            <type name="ValueArray" c:type="GValueArray*"/>
          </instance-parameter>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6079">function to compare elements</doc>
            <type name="GLib.CompareFunc" c:type="GCompareFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort_with_data"
              c:identifier="g_value_array_sort_with_data"
              shadows="sort"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6092">Sort @value_array using @compare_func to compare the elements according
to the semantics of #GCompareDataFunc.

The current implementation uses the same sorting algorithm as standard
C qsort() function.</doc>
        <doc-deprecated xml:space="preserve">Use #GArray and g_array_sort_with_data().</doc-deprecated>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluearray.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6104">the #GValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6094">#GValueArray to sort</doc>
            <type name="ValueArray" c:type="GValueArray*"/>
          </instance-parameter>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6095">function to compare elements</doc>
            <type name="GLib.CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6096">extra data argument provided for @compare_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="ValueTransform" c:type="GValueTransform">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
           line="84">The type of value transformation functions which can be registered with
g_value_register_transform_func().

@dest_value will be initialized to the correct destination type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                       line="94"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
               line="86">Source value.</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="dest_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
               line="87">Target value.</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="WeakNotify" c:type="GWeakNotify">
      <doc xml:space="preserve"
           filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
           line="227">A #GWeakNotify function can be added to an object as a callback that gets
triggered when the object is finalized. Since the object is already being
finalized when the #GWeakNotify is called, there's not much you could do
with the object, apart from e.g. using its address as hash-index or the like.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="237"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="229">data that was provided when the weak reference was established</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="where_the_object_was" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
               line="230">the object being finalized</doc>
          <type name="Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="WeakRef" c:type="GWeakRef">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="93">A structure containing a weak reference to a #GObject.  It can either
be empty (i.e. point to %NULL), or point to an object for as long as
at least one "strong" reference to that object exists. Before the
object's #GObjectClass.dispose method is called, every #GWeakRef
associated with becomes empty (i.e. points to %NULL).

Like #GValue, #GWeakRef can be statically allocated, stack- or
heap-allocated, or embedded in larger structures.

Unlike g_object_weak_ref() and g_object_add_weak_pointer(), this weak
reference is thread-safe: converting a weak pointer to a reference is
atomic with respect to invalidation of weak pointers to destroyed
objects.

If the object's #GObjectClass.dispose method results in additional
references to the object being held, any #GWeakRefs taken
before it was disposed will continue to point to %NULL.  If
#GWeakRefs are taken after the object is disposed and
re-referenced, they will continue to point to it until its refcount
goes back to zero, at which point they too will be invalidated.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="846"/>
      <union name="priv" c:type="priv">
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="845"/>
        <field name="p" writable="1">
          <type name="gpointer" c:type="gpointer"/>
        </field>
      </union>
      <method name="clear"
              c:identifier="g_weak_ref_clear"
              version="2.32"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6886">Frees resources associated with a non-statically-allocated #GWeakRef.
After this call, the #GWeakRef is left in an undefined state.

You should only call this on a #GWeakRef that previously had
g_weak_ref_init() called on it.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="852"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="weak_ref"
                              direction="inout"
                              caller-allocates="0"
                              transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6888">location of a weak reference, which
 may be empty</doc>
            <type name="WeakRef" c:type="GWeakRef*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get"
              c:identifier="g_weak_ref_get"
              version="2.32"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6901">If @weak_ref is not empty, atomically acquire a strong
reference to the object it points to, and return that reference.

This function is needed because of the potential race between taking
the pointer value and g_object_ref() on it, if the object was losing
its last reference at the same time in a different thread.

The caller should release the resulting reference in the usual way,
by using g_object_unref().</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="854"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6915">the object pointed to
    by @weak_ref, or %NULL if it was empty</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="weak_ref"
                              direction="inout"
                              caller-allocates="0"
                              transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6903">location of a weak reference to a #GObject</doc>
            <type name="WeakRef" c:type="GWeakRef*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init"
              c:identifier="g_weak_ref_init"
              version="2.32"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6921">Initialise a non-statically-allocated #GWeakRef.

This function also calls g_weak_ref_set() with @object on the
freshly-initialised weak reference.

This function should always be matched with a call to
g_weak_ref_clear().  It is not necessary to use this function for a
#GWeakRef in static storage because it will already be
properly initialised.  Just use g_weak_ref_set() directly.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="849"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="weak_ref"
                              direction="inout"
                              caller-allocates="0"
                              transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6923">uninitialized or empty location for a weak
   reference</doc>
            <type name="WeakRef" c:type="GWeakRef*"/>
          </instance-parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6925">a #GObject or %NULL</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set"
              c:identifier="g_weak_ref_set"
              version="2.32"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6941">Change the object to which @weak_ref points, or set it to
%NULL.

You must own a strong reference on @object while calling this
function.</doc>
        <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                         line="856"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="weak_ref" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6943">location for a weak reference</doc>
            <type name="WeakRef" c:type="GWeakRef*"/>
          </instance-parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
                 line="6944">a #GObject or %NULL</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <union name="_Value__data__union">
      <field name="v_int" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="v_uint" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="v_long" writable="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="v_ulong" writable="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="v_int64" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="v_uint64" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="v_float" writable="1">
        <type name="gfloat" c:type="gfloat"/>
      </field>
      <field name="v_double" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="v_pointer" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </union>
    <function name="boxed_copy" c:identifier="g_boxed_copy">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="836">Provide a copy of a boxed structure @src_boxed which is of type @boxed_type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                       line="70"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="843">The newly created copy of the boxed
   structure.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="boxed_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="838">The type of @src_boxed.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="src_boxed" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="839">The boxed structure to be copied.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="boxed_free" c:identifier="g_boxed_free">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="848">Free the boxed structure @boxed which is of type @boxed_type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                       line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="boxed_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="850">The type of @boxed.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="boxed" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="851">The boxed structure to be freed.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="boxed_type_register_static"
              c:identifier="g_boxed_type_register_static"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="857">This function creates a new %G_TYPE_BOXED derived type id for a new
boxed type with name @name. Boxed type handling functions have to be
provided to copy and free opaque boxed structures of this type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gboxed.h"
                       line="95"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="867">New %G_TYPE_BOXED derived type id for @name.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="859">Name of the new boxed type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="boxed_copy" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="860">Boxed structure copy function.</doc>
          <type name="BoxedCopyFunc" c:type="GBoxedCopyFunc"/>
        </parameter>
        <parameter name="boxed_free" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="861">Boxed structure free function.</doc>
          <type name="BoxedFreeFunc" c:type="GBoxedFreeFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_BOOLEAN__BOXED_BOXED"
              c:identifier="g_cclosure_marshal_BOOLEAN__BOXED_BOXED"
              moved-to="CClosure.marshal_BOOLEAN__BOXED_BOXED">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="871">A #GClosureMarshal function for use with signals with handlers that
take two boxed pointers as arguments and return a boolean.  If you
have such a signal, you will probably also need to use an
accumulator, such as g_signal_accumulator_true_handled().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="399"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="873">A #GClosure.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="874">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="876">The length of the @param_values array.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="877">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="879">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="881">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_BOOLEAN__FLAGS"
              c:identifier="g_cclosure_marshal_BOOLEAN__FLAGS"
              moved-to="CClosure.marshal_BOOLEAN__FLAGS">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="911">A marshaller for a #GCClosure with a callback of type
`gboolean (*callback) (gpointer instance, gint arg1, gpointer user_data)` where the #gint parameter
denotes a flags type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="347"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="913">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="914">a #GValue which can store the returned #gboolean</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="915">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="916">a #GValue array holding instance and arg1</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="917">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="919">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_STRING__OBJECT_POINTER"
              c:identifier="g_cclosure_marshal_STRING__OBJECT_POINTER"
              moved-to="CClosure.marshal_STRING__OBJECT_POINTER">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="970">A marshaller for a #GCClosure with a callback of type
`gchar* (*callback) (gpointer instance, GObject *arg1, gpointer arg2, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="382"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="972">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="973">a #GValue, which can store the returned string</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="974">3</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="975">a #GValue array holding instance, arg1 and arg2</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="976">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="978">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__BOOLEAN"
              c:identifier="g_cclosure_marshal_VOID__BOOLEAN"
              moved-to="CClosure.marshal_VOID__BOOLEAN">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1004">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gboolean arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="41"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1006">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1007">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1008">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1009">a #GValue array holding the instance and the #gboolean parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1010">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1012">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__BOXED"
              c:identifier="g_cclosure_marshal_VOID__BOXED"
              moved-to="CClosure.marshal_VOID__BOXED">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1038">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GBoxed *arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="262"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1040">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1041">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1042">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1043">a #GValue array holding the instance and the #GBoxed* parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1044">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1046">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__CHAR"
              c:identifier="g_cclosure_marshal_VOID__CHAR"
              moved-to="CClosure.marshal_VOID__CHAR">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1072">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gchar arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="58"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1074">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1075">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1076">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1077">a #GValue array holding the instance and the #gchar parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1078">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1080">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__DOUBLE"
              c:identifier="g_cclosure_marshal_VOID__DOUBLE"
              moved-to="CClosure.marshal_VOID__DOUBLE">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1106">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gdouble arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="211"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1108">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1109">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1110">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1111">a #GValue array holding the instance and the #gdouble parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1112">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1114">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__ENUM"
              c:identifier="g_cclosure_marshal_VOID__ENUM"
              moved-to="CClosure.marshal_VOID__ENUM">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1140">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gint arg1, gpointer user_data)` where the #gint parameter denotes an enumeration type..</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="160"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1142">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1143">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1144">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1145">a #GValue array holding the instance and the enumeration parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1146">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1148">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__FLAGS"
              c:identifier="g_cclosure_marshal_VOID__FLAGS"
              moved-to="CClosure.marshal_VOID__FLAGS">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1174">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gint arg1, gpointer user_data)` where the #gint parameter denotes a flags type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="177"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1176">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1177">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1178">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1179">a #GValue array holding the instance and the flags parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1180">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1182">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__FLOAT"
              c:identifier="g_cclosure_marshal_VOID__FLOAT"
              moved-to="CClosure.marshal_VOID__FLOAT">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1208">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gfloat arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="194"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1210">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1211">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1212">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1213">a #GValue array holding the instance and the #gfloat parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1214">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1216">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__INT"
              c:identifier="g_cclosure_marshal_VOID__INT"
              moved-to="CClosure.marshal_VOID__INT">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1242">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gint arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="92"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1244">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1245">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1246">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1247">a #GValue array holding the instance and the #gint parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1248">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1250">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__LONG"
              c:identifier="g_cclosure_marshal_VOID__LONG"
              moved-to="CClosure.marshal_VOID__LONG">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1276">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, glong arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="126"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1278">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1279">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1280">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1281">a #GValue array holding the instance and the #glong parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1282">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1284">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__OBJECT"
              c:identifier="g_cclosure_marshal_VOID__OBJECT"
              moved-to="CClosure.marshal_VOID__OBJECT">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1310">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GObject *arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="296"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1312">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1313">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1314">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1315">a #GValue array holding the instance and the #GObject* parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1316">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1318">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__PARAM"
              c:identifier="g_cclosure_marshal_VOID__PARAM"
              moved-to="CClosure.marshal_VOID__PARAM">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1344">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GParamSpec *arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="245"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1346">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1347">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1348">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1349">a #GValue array holding the instance and the #GParamSpec* parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1350">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1352">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__POINTER"
              c:identifier="g_cclosure_marshal_VOID__POINTER"
              moved-to="CClosure.marshal_VOID__POINTER">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1378">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gpointer arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="279"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1380">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1381">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1382">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1383">a #GValue array holding the instance and the #gpointer parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1384">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1386">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__STRING"
              c:identifier="g_cclosure_marshal_VOID__STRING"
              moved-to="CClosure.marshal_VOID__STRING">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1412">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, const gchar *arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="228"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1414">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1415">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1416">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1417">a #GValue array holding the instance and the #gchar* parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1418">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1420">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__UCHAR"
              c:identifier="g_cclosure_marshal_VOID__UCHAR"
              moved-to="CClosure.marshal_VOID__UCHAR">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1446">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, guchar arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="75"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1448">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1449">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1450">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1451">a #GValue array holding the instance and the #guchar parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1452">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1454">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__UINT"
              c:identifier="g_cclosure_marshal_VOID__UINT"
              moved-to="CClosure.marshal_VOID__UINT">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1480">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, guint arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="109"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1482">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1483">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1484">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1485">a #GValue array holding the instance and the #guint parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1486">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1488">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__UINT_POINTER"
              c:identifier="g_cclosure_marshal_VOID__UINT_POINTER"
              moved-to="CClosure.marshal_VOID__UINT_POINTER">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1495">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, guint arg1, gpointer arg2, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="330"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1497">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1498">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1499">3</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1500">a #GValue array holding instance, arg1 and arg2</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1501">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1503">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__ULONG"
              c:identifier="g_cclosure_marshal_VOID__ULONG"
              moved-to="CClosure.marshal_VOID__ULONG">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1548">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gulong arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="143"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1550">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1551">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1552">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1553">a #GValue array holding the instance and the #gulong parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1554">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1556">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__VARIANT"
              c:identifier="g_cclosure_marshal_VOID__VARIANT"
              moved-to="CClosure.marshal_VOID__VARIANT"
              version="2.26">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1582">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GVariant *arg1, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="313"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1584">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1585">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1586">2</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1587">a #GValue array holding the instance and the #GVariant* parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1588">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1590">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_VOID__VOID"
              c:identifier="g_cclosure_marshal_VOID__VOID"
              moved-to="CClosure.marshal_VOID__VOID">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1618">A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gpointer user_data)`.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gmarshal.h"
                       line="24"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1620">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1621">ignored</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1622">1</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1623">a #GValue array holding only the instance</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1624">the invocation hint given as the last argument
 to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1626">additional data specified when registering the marshaller</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_marshal_generic"
              c:identifier="g_cclosure_marshal_generic"
              moved-to="CClosure.marshal_generic"
              version="2.30">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1652">A generic marshaller function implemented via
[libffi](http://sourceware.org/libffi/).

Normally this function is not passed explicitly to g_signal_new(),
but used automatically by GLib when specifying a %NULL marshaller.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="298"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1654">A #GClosure.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_gvalue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1655">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1657">The length of the @param_values array.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1658">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1660">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1662">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_new"
              c:identifier="g_cclosure_new"
              moved-to="CClosure.new"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1699">Creates a new closure which invokes @callback_func with @user_data as
the last parameter.

@destroy_data will be called as a finalize notifier on the #GClosure.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="225"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1710">a floating reference to a new #GCClosure</doc>
        <type name="Closure" c:type="GClosure*"/>
      </return-value>
      <parameters>
        <parameter name="callback_func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1701">the function to invoke</doc>
          <type name="Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1702">user data to pass to @callback_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy_data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1703">destroy notify to be called when @user_data is no longer used</doc>
          <type name="ClosureNotify" c:type="GClosureNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_new_object"
              c:identifier="g_cclosure_new_object"
              moved-to="CClosure.new_object"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1714">A variant of g_cclosure_new() which uses @object as @user_data and
calls g_object_watch_closure() on @object and the created
closure. This function is useful when you have a callback closely
associated with a #GObject, and want the callback to no longer run
after the object is is freed.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="604"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1725">a new #GCClosure</doc>
        <type name="Closure" c:type="GClosure*"/>
      </return-value>
      <parameters>
        <parameter name="callback_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1716">the function to invoke</doc>
          <type name="Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1717">a #GObject pointer to pass to @callback_func</doc>
          <type name="Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_new_object_swap"
              c:identifier="g_cclosure_new_object_swap"
              moved-to="CClosure.new_object_swap"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1729">A variant of g_cclosure_new_swap() which uses @object as @user_data
and calls g_object_watch_closure() on @object and the created
closure. This function is useful when you have a callback closely
associated with a #GObject, and want the callback to no longer run
after the object is is freed.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="607"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1740">a new #GCClosure</doc>
        <type name="Closure" c:type="GClosure*"/>
      </return-value>
      <parameters>
        <parameter name="callback_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1731">the function to invoke</doc>
          <type name="Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1732">a #GObject pointer to pass to @callback_func</doc>
          <type name="Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cclosure_new_swap"
              c:identifier="g_cclosure_new_swap"
              moved-to="CClosure.new_swap"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1744">Creates a new closure which invokes @callback_func with @user_data as
the first parameter.

@destroy_data will be called as a finalize notifier on the #GClosure.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="229"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="1755">a floating reference to a new #GCClosure</doc>
        <type name="Closure" c:type="GClosure*"/>
      </return-value>
      <parameters>
        <parameter name="callback_func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1746">the function to invoke</doc>
          <type name="Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1747">user data to pass to @callback_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy_data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1748">destroy notify to be called when @user_data is no longer used</doc>
          <type name="ClosureNotify" c:type="GClosureNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="clear_object"
              c:identifier="g_clear_object"
              version="2.28"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="1759">Clears a reference to a #GObject.

@object_ptr must not be %NULL.

If the reference is %NULL then this function does nothing.
Otherwise, the reference count of the object is decreased and the
pointer is set to %NULL.

A macro is also included that allows this function to be used without
pointer casts.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="671"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object_ptr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="1761">a pointer to a #GObject reference</doc>
          <type name="Object" c:type="GObject**"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_complete_type_info"
              c:identifier="g_enum_complete_type_info">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2055">This function is meant to be called from the `complete_type_info`
function of a #GTypePlugin implementation, as in the following
example:

|[&lt;!-- language="C" --&gt;
static void
my_enum_complete_type_info (GTypePlugin     *plugin,
                            GType            g_type,
                            GTypeInfo       *info,
                            GTypeValueTable *value_table)
{
  static const GEnumValue values[] = {
    { MY_ENUM_FOO, "MY_ENUM_FOO", "foo" },
    { MY_ENUM_BAR, "MY_ENUM_BAR", "bar" },
    { 0, NULL, NULL }
  };

  g_enum_complete_type_info (type, info, values);
}
]|</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="269"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_enum_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2057">the type identifier of the type being completed</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="info"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2058">the #GTypeInfo struct to be filled in</doc>
          <type name="TypeInfo" c:type="GTypeInfo*"/>
        </parameter>
        <parameter name="const_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2059">An array of #GEnumValue structs for the possible
 enumeration values. The array is terminated by a struct with all
 members being 0.</doc>
          <type name="EnumValue" c:type="const GEnumValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_get_value" c:identifier="g_enum_get_value">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2086">Returns the #GEnumValue for a value.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="219"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2093">the #GEnumValue for @value, or %NULL
         if @value is not a member of the enumeration</doc>
        <type name="EnumValue" c:type="GEnumValue*"/>
      </return-value>
      <parameters>
        <parameter name="enum_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2088">a #GEnumClass</doc>
          <type name="EnumClass" c:type="GEnumClass*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2089">the value to look up</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_get_value_by_name"
              c:identifier="g_enum_get_value_by_name">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2098">Looks up a #GEnumValue by name.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="222"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2105">the #GEnumValue with name @name,
         or %NULL if the enumeration doesn't have a member
         with that name</doc>
        <type name="EnumValue" c:type="GEnumValue*"/>
      </return-value>
      <parameters>
        <parameter name="enum_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2100">a #GEnumClass</doc>
          <type name="EnumClass" c:type="GEnumClass*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2101">the name to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_get_value_by_nick"
              c:identifier="g_enum_get_value_by_nick">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2111">Looks up a #GEnumValue by nickname.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="225"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2118">the #GEnumValue with nickname @nick,
         or %NULL if the enumeration doesn't have a member
         with that nickname</doc>
        <type name="EnumValue" c:type="GEnumValue*"/>
      </return-value>
      <parameters>
        <parameter name="enum_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2113">a #GEnumClass</doc>
          <type name="EnumClass" c:type="GEnumClass*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2114">the nickname to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_register_static"
              c:identifier="g_enum_register_static">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2124">Registers a new static enumeration type with the name @name.

It is normally more convenient to let [glib-mkenums][glib-mkenums],
generate a my_enum_get_type() function from a usual C enumeration
definition  than to write one yourself using g_enum_register_static().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="260"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2138">The new type identifier.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2126">A nul-terminated string used as the name of the new type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="const_static_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2127">An array of #GEnumValue structs for the possible
 enumeration values. The array is terminated by a struct with all
 members being 0. GObject keeps a reference to the data, so it cannot
 be stack-allocated.</doc>
          <type name="EnumValue" c:type="const GEnumValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_to_string"
              c:identifier="g_enum_to_string"
              version="2.54">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2142">Pretty-prints @value in the form of the enum’s name.

This is intended to be used for debugging purposes. The format of the output
may change in the future.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="237"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2152">a newly-allocated text string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="g_enum_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2144">the type identifier of a #GEnumClass type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2145">the value</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_complete_type_info"
              c:identifier="g_flags_complete_type_info">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2157">This function is meant to be called from the complete_type_info()
function of a #GTypePlugin implementation, see the example for
g_enum_complete_type_info() above.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="273"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_flags_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2159">the type identifier of the type being completed</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="info"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2160">the #GTypeInfo struct to be filled in</doc>
          <type name="TypeInfo" c:type="GTypeInfo*"/>
        </parameter>
        <parameter name="const_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2161">An array of #GFlagsValue structs for the possible
 enumeration values. The array is terminated by a struct with all
 members being 0.</doc>
          <type name="FlagsValue" c:type="const GFlagsValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_get_first_value"
              c:identifier="g_flags_get_first_value">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2171">Returns the first #GFlagsValue which is set in @value.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="228"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2178">the first #GFlagsValue which is set in
         @value, or %NULL if none is set</doc>
        <type name="FlagsValue" c:type="GFlagsValue*"/>
      </return-value>
      <parameters>
        <parameter name="flags_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2173">a #GFlagsClass</doc>
          <type name="FlagsClass" c:type="GFlagsClass*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2174">the value</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_get_value_by_name"
              c:identifier="g_flags_get_value_by_name">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2183">Looks up a #GFlagsValue by name.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="231"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2190">the #GFlagsValue with name @name,
         or %NULL if there is no flag with that name</doc>
        <type name="FlagsValue" c:type="GFlagsValue*"/>
      </return-value>
      <parameters>
        <parameter name="flags_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2185">a #GFlagsClass</doc>
          <type name="FlagsClass" c:type="GFlagsClass*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2186">the name to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_get_value_by_nick"
              c:identifier="g_flags_get_value_by_nick">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2195">Looks up a #GFlagsValue by nickname.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="234"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2202">the #GFlagsValue with nickname @nick,
         or %NULL if there is no flag with that nickname</doc>
        <type name="FlagsValue" c:type="GFlagsValue*"/>
      </return-value>
      <parameters>
        <parameter name="flags_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2197">a #GFlagsClass</doc>
          <type name="FlagsClass" c:type="GFlagsClass*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2198">the nickname to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_register_static"
              c:identifier="g_flags_register_static">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2207">Registers a new static flags type with the name @name.

It is normally more convenient to let [glib-mkenums][glib-mkenums]
generate a my_flags_get_type() function from a usual C enumeration
definition than to write one yourself using g_flags_register_static().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="263"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2220">The new type identifier.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2209">A nul-terminated string used as the name of the new type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="const_static_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2210">An array of #GFlagsValue structs for the possible
 flags values. The array is terminated by a struct with all members being 0.
 GObject keeps a reference to the data, so it cannot be stack-allocated.</doc>
          <type name="FlagsValue" c:type="const GFlagsValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_to_string"
              c:identifier="g_flags_to_string"
              version="2.54">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="2224">Pretty-prints @value in the form of the flag names separated by ` | ` and
sorted. Any extra bits will be shown at the end as a hexadecimal number.

This is intended to be used for debugging purposes. The format of the output
may change in the future.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/genums.h"
                       line="240"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="2235">a newly-allocated text string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="flags_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2226">the type identifier of a #GFlagsClass type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="2227">the value</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtype_get_type" c:identifier="g_gtype_get_type">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                       line="254"/>
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="param_spec_boolean" c:identifier="g_param_spec_boolean">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3403">Creates a new #GParamSpecBoolean instance specifying a %G_TYPE_BOOLEAN
property. In many cases, it may be more appropriate to use an enum with
g_param_spec_enum(), both to improve code clarity by using explicitly named
values, and to allow for more values to be added in future without breaking
API.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1001"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3419">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3405">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3406">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3407">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3408">default value for the property specified</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3409">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_boxed" c:identifier="g_param_spec_boxed">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3423">Creates a new #GParamSpecBoxed instance specifying a %G_TYPE_BOXED
derived property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1103"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3436">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3425">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3426">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3427">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="boxed_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3428">%G_TYPE_BOXED derived type of this property</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3429">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_char" c:identifier="g_param_spec_char">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3440">Creates a new #GParamSpecChar instance specifying a %G_TYPE_CHAR property.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="985"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3452">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3442">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3443">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3444">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3445">minimum value for the property specified</doc>
          <type name="gint8" c:type="gint8"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3446">maximum value for the property specified</doc>
          <type name="gint8" c:type="gint8"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3447">default value for the property specified</doc>
          <type name="gint8" c:type="gint8"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3448">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_double" c:identifier="g_param_spec_double">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3456">Creates a new #GParamSpecDouble instance specifying a %G_TYPE_DOUBLE
property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1083"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3471">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3458">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3459">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3460">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3461">minimum value for the property specified</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3462">maximum value for the property specified</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3463">default value for the property specified</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3464">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_enum" c:identifier="g_param_spec_enum">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3475">Creates a new #GParamSpecEnum instance specifying a %G_TYPE_ENUM
property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1061"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3489">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3477">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3478">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3479">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="enum_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3480">a #GType derived from %G_TYPE_ENUM</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3481">default value for the property specified</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3482">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_flags" c:identifier="g_param_spec_flags">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3493">Creates a new #GParamSpecFlags instance specifying a %G_TYPE_FLAGS
property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1068"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3507">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3495">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3496">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3497">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3498">a #GType derived from %G_TYPE_FLAGS</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3499">default value for the property specified</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3500">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_float" c:identifier="g_param_spec_float">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3511">Creates a new #GParamSpecFloat instance specifying a %G_TYPE_FLOAT property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1075"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3525">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3513">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3514">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3515">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3516">minimum value for the property specified</doc>
          <type name="gfloat" c:type="gfloat"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3517">maximum value for the property specified</doc>
          <type name="gfloat" c:type="gfloat"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3518">default value for the property specified</doc>
          <type name="gfloat" c:type="gfloat"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3519">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_gtype"
              c:identifier="g_param_spec_gtype"
              version="2.10">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3615">Creates a new #GParamSpecGType instance specifying a
%G_TYPE_GTYPE property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1129"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3630">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3617">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3618">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3619">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="is_a_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3620">a #GType whose subtypes are allowed as values
 of the property (use %G_TYPE_NONE for any type)</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3622">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_int" c:identifier="g_param_spec_int">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3634">Creates a new #GParamSpecInt instance specifying a %G_TYPE_INT property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1007"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3648">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3636">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3637">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3638">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3639">minimum value for the property specified</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3640">maximum value for the property specified</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3641">default value for the property specified</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3642">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_int64" c:identifier="g_param_spec_int64">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3652">Creates a new #GParamSpecInt64 instance specifying a %G_TYPE_INT64 property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1039"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3666">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3654">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3655">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3656">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3657">minimum value for the property specified</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3658">maximum value for the property specified</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3659">default value for the property specified</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3660">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_long" c:identifier="g_param_spec_long">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3700">Creates a new #GParamSpecLong instance specifying a %G_TYPE_LONG property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1023"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3714">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3702">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3703">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3704">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3705">minimum value for the property specified</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3706">maximum value for the property specified</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3707">default value for the property specified</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3708">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_object" c:identifier="g_param_spec_object">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3718">Creates a new #GParamSpecBoxed instance specifying a %G_TYPE_OBJECT
derived property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1120"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3731">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3720">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3721">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3722">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="object_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3723">%G_TYPE_OBJECT derived type of this property</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3724">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_override"
              c:identifier="g_param_spec_override"
              version="2.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3735">Creates a new property of type #GParamSpecOverride. This is used
to direct operations to another paramspec, and will not be directly
useful unless you are implementing a new base type similar to GObject.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1126"/>
      <return-value>
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3745">the newly created #GParamSpec</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3737">the name of the property.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="overridden" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3738">The property that is being overridden</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_param" c:identifier="g_param_spec_param">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3749">Creates a new #GParamSpecParam instance specifying a %G_TYPE_PARAM
property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1097"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3762">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3751">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3752">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3753">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="param_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3754">a #GType derived from %G_TYPE_PARAM</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3755">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_pointer" c:identifier="g_param_spec_pointer">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3766">Creates a new #GParamSpecPointer instance specifying a pointer property.
Where possible, it is better to use g_param_spec_object() or
g_param_spec_boxed() to expose memory management information.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1109"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3779">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3768">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3769">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3770">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3771">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_pool_new"
              c:identifier="g_param_spec_pool_new"
              moved-to="ParamSpecPool.new">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3837">Creates a new #GParamSpecPool.

If @type_prefixing is %TRUE, lookups in the newly created pool will
allow to specify the owner as a colon-separated prefix of the
property name, like "GtkContainer:border-width". This feature is
deprecated, so you should always set @type_prefixing to %FALSE.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="414"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3848">a newly allocated #GParamSpecPool.</doc>
        <type name="ParamSpecPool" c:type="GParamSpecPool*"/>
      </return-value>
      <parameters>
        <parameter name="type_prefixing" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3839">Whether the pool will support type-prefixed property names.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_string" c:identifier="g_param_spec_string">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3941">Creates a new #GParamSpecString instance.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1091"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3953">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3943">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3944">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3945">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="default_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3946">default value for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3947">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_uchar" c:identifier="g_param_spec_uchar">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3957">Creates a new #GParamSpecUChar instance specifying a %G_TYPE_UCHAR property.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="993"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3969">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3959">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3960">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3961">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3962">minimum value for the property specified</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3963">maximum value for the property specified</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3964">default value for the property specified</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3965">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_uint" c:identifier="g_param_spec_uint">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3973">Creates a new #GParamSpecUInt instance specifying a %G_TYPE_UINT property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1015"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="3987">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3975">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3976">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3977">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3978">minimum value for the property specified</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3979">maximum value for the property specified</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3980">default value for the property specified</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3981">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_uint64" c:identifier="g_param_spec_uint64">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="3991">Creates a new #GParamSpecUInt64 instance specifying a %G_TYPE_UINT64
property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1047"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4006">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3993">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3994">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3995">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3996">minimum value for the property specified</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3997">maximum value for the property specified</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3998">default value for the property specified</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="3999">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_ulong" c:identifier="g_param_spec_ulong">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4010">Creates a new #GParamSpecULong instance specifying a %G_TYPE_ULONG
property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1031"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4025">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4012">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4013">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4014">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4015">minimum value for the property specified</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4016">maximum value for the property specified</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4017">default value for the property specified</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4018">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_unichar" c:identifier="g_param_spec_unichar">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4029">Creates a new #GParamSpecUnichar instance specifying a %G_TYPE_UINT
property. #GValue structures for this property can be accessed with
g_value_set_uint() and g_value_get_uint().

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1055"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4043">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4031">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4032">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4033">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4034">default value for the property specified</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4035">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_value_array"
              c:identifier="g_param_spec_value_array"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4055">Creates a new #GParamSpecValueArray instance specifying a
%G_TYPE_VALUE_ARRAY property. %G_TYPE_VALUE_ARRAY is a
%G_TYPE_BOXED type, as such, #GValue structures for this property
can be accessed with g_value_set_boxed() and g_value_get_boxed().

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1114"/>
      <return-value>
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4071">a newly created parameter specification</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4057">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4058">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4059">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="element_spec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4060">a #GParamSpec describing the elements contained in
 arrays of this property, may be %NULL</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4062">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_variant"
              c:identifier="g_param_spec_variant"
              version="2.26">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4075">Creates a new #GParamSpecVariant instance specifying a #GVariant
property.

If @default_value is floating, it is consumed.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparamspecs.h"
                       line="1135"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4092">the newly created #GParamSpec</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4077">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4078">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4079">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4080">a #GVariantType</doc>
          <type name="GLib.VariantType" c:type="const GVariantType*"/>
        </parameter>
        <parameter name="default_value"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4081">a #GVariant of type @type to
                use as the default value, or %NULL</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4083">flags for the property specified</doc>
          <type name="ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_type_register_static"
              c:identifier="g_param_type_register_static">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4097">Registers @name as the name of a new static type derived from
#G_TYPE_PARAM. The type system uses the information contained in
the #GParamSpecTypeInfo structure pointed to by @info to manage the
#GParamSpec type and its instances.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="397"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4107">The new type identifier.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4099">0-terminated string used as the name of the new #GParamSpec type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pspec_info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4100">The #GParamSpecTypeInfo for this #GParamSpec type.</doc>
          <type name="ParamSpecTypeInfo" c:type="const GParamSpecTypeInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_value_convert" c:identifier="g_param_value_convert">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4111">Transforms @src_value into @dest_value if possible, and then
validates @dest_value, in order for it to conform to @pspec.  If
@strict_validation is %TRUE this function will only succeed if the
transformed @dest_value complied to @pspec without modifications.

See also g_value_type_transformable(), g_value_transform() and
g_param_value_validate().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="317"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4127">%TRUE if transformation and validation were successful,
 %FALSE otherwise and @dest_value is left untouched.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4113">a valid #GParamSpec</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="src_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4114">souce #GValue</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="dest_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4115">destination #GValue of correct type for @pspec</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="strict_validation" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4116">%TRUE requires @dest_value to conform to @pspec
without modifications</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_value_defaults"
              c:identifier="g_param_value_defaults">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4132">Checks whether @value contains the default value as specified in @pspec.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="311"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4139">whether @value contains the canonical default for this @pspec</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4134">a valid #GParamSpec</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4135">a #GValue of correct type for @pspec</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_value_set_default"
              c:identifier="g_param_value_set_default">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4143">Sets @value to its default value as specified in @pspec.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="308"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4145">a valid #GParamSpec</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4146">a #GValue of correct type for @pspec</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_value_validate"
              c:identifier="g_param_value_validate">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4152">Ensures that the contents of @value comply with the specifications
set out by @pspec. For example, a #GParamSpecInt might require
that integers stored in @value may not be smaller than -42 and not be
greater than +42. If @value contains an integer outside of this range,
it is modified accordingly, so the resulting value will fit into the
range -42 .. +42.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="314"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4164">whether modifying @value was necessary to ensure validity</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4154">a valid #GParamSpec</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4155">a #GValue of correct type for @pspec</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_values_cmp" c:identifier="g_param_values_cmp">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4168">Compares @value1 with @value2 according to @pspec, and return -1, 0 or +1,
if @value1 is found to be less than, equal to or greater than @value2,
respectively.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gparam.h"
                       line="322"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4178">-1, 0 or +1, for a less than, equal to or greater than result</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4170">a valid #GParamSpec</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="value1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4171">a #GValue of correct type for @pspec</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="value2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4172">a #GValue of correct type for @pspec</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pointer_type_register_static"
              c:identifier="g_pointer_type_register_static">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4182">Creates a new %G_TYPE_POINTER derived type id for a new
pointer type with name @name.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                       line="274"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4189">a new %G_TYPE_POINTER derived type id for @name.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4184">the name of the new pointer type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_accumulator_first_wins"
              c:identifier="g_signal_accumulator_first_wins"
              version="2.28">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4193">A predefined #GSignalAccumulator for signals intended to be used as a
hook for application code to provide a particular value.  Usually
only one such value is desired and multiple handlers for the same
signal don't make much sense (except for the case of the default
handler defined in the class structure, in which case you will
usually want the signal connection to override the class handler).

This accumulator will use the return value from the first signal
handler that is run as the return value for the signal and not run
any further handlers (ie: the first handler "wins").</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="595"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4211">standard #GSignalAccumulator result</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ihint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4195">standard #GSignalAccumulator parameter</doc>
          <type name="SignalInvocationHint" c:type="GSignalInvocationHint*"/>
        </parameter>
        <parameter name="return_accu" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4196">standard #GSignalAccumulator parameter</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="handler_return" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4197">standard #GSignalAccumulator parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="dummy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4198">standard #GSignalAccumulator parameter</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_accumulator_true_handled"
              c:identifier="g_signal_accumulator_true_handled"
              version="2.4">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4216">A predefined #GSignalAccumulator for signals that return a
boolean values. The behavior that this accumulator gives is
that a return of %TRUE stops the signal emission: no further
callbacks will be invoked, while a return of %FALSE allows
the emission to continue. The idea here is that a %TRUE return
indicates that the callback handled the signal, and no further
handling is needed.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="589"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4232">standard #GSignalAccumulator result</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ihint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4218">standard #GSignalAccumulator parameter</doc>
          <type name="SignalInvocationHint" c:type="GSignalInvocationHint*"/>
        </parameter>
        <parameter name="return_accu" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4219">standard #GSignalAccumulator parameter</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="handler_return" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4220">standard #GSignalAccumulator parameter</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="dummy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4221">standard #GSignalAccumulator parameter</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_add_emission_hook"
              c:identifier="g_signal_add_emission_hook">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4236">Adds an emission hook for a signal, which will get called for any emission
of that signal, independent of the instance. This is possible only
for signals which don't have #G_SIGNAL_NO_HOOKS flag set.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="360"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4248">the hook id, for later use with g_signal_remove_emission_hook().</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4238">the signal identifier, as returned by g_signal_lookup().</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4239">the detail on which to call the hook.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="hook_func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="3"
                   destroy="4">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4240">a #GSignalEmissionHook function.</doc>
          <type name="SignalEmissionHook" c:type="GSignalEmissionHook"/>
        </parameter>
        <parameter name="hook_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4241">user data for @hook_func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data_destroy" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4242">a #GDestroyNotify for @hook_data.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_chain_from_overridden"
              c:identifier="g_signal_chain_from_overridden">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4252">Calls the original class closure of a signal. This function should only
be called from an overridden class closure; see
g_signal_override_class_closure() and
g_signal_override_class_handler().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="450"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance_and_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4254">the argument list of the signal emission.
 The first element in the array is a #GValue for the instance the signal
 is being emitted on. The rest are any arguments to be passed to the signal.</doc>
          <array zero-terminated="0" c:type="const GValue*">
            <type name="Value" c:type="GValue"/>
          </array>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4257">Location for the return value.</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_chain_from_overridden_handler"
              c:identifier="g_signal_chain_from_overridden_handler"
              version="2.18"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4266">Calls the original class closure of a signal. This function should
only be called from an overridden class closure; see
g_signal_override_class_closure() and
g_signal_override_class_handler().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="453"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4268">the instance the signal is being
   emitted on.</doc>
          <type name="TypeInstance" c:type="gpointer"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4270">parameters to be passed to the parent class closure, followed by a
 location for the return value. If the return type of the signal
 is #G_TYPE_NONE, the return value location can be omitted.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_connect_closure"
              c:identifier="g_signal_connect_closure">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4283">Connects a closure to a signal for a particular object.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="383"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4293">the handler ID (always greater than 0 for successful connections)</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4285">the instance to connect to.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="detailed_signal" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4286">a string of the form "signal-name::detail".</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4287">the closure to connect.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="after" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4288">whether the handler should be called before or after the
 default handler of the signal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_connect_closure_by_id"
              c:identifier="g_signal_connect_closure_by_id">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4297">Connects a closure to a signal for a particular object.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="377"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4308">the handler ID (always greater than 0 for successful connections)</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4299">the instance to connect to.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4300">the id of the signal.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4301">the detail.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4302">the closure to connect.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="after" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4303">whether the handler should be called before or after the
 default handler of the signal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_connect_data"
              c:identifier="g_signal_connect_data"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4312">Connects a #GCallback function to a signal for a particular object. Similar
to g_signal_connect(), but allows to provide a #GClosureNotify for the data
which will be called when the signal handler is disconnected and no longer
used. Specify @connect_flags if you need `..._after()` or
`..._swapped()` variants of this function.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="388"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4327">the handler ID (always greater than 0 for successful connections)</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4314">the instance to connect to.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="detailed_signal" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4315">a string of the form "signal-name::detail".</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="c_handler" transfer-ownership="none" closure="3">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4316">the #GCallback to connect.</doc>
          <type name="Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4317">data to pass to @c_handler calls.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy_data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4318">a #GClosureNotify for @data.</doc>
          <type name="ClosureNotify" c:type="GClosureNotify"/>
        </parameter>
        <parameter name="connect_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4319">a combination of #GConnectFlags.</doc>
          <type name="ConnectFlags" c:type="GConnectFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_connect_object"
              c:identifier="g_signal_connect_object"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4331">This is similar to g_signal_connect_data(), but uses a closure which
ensures that the @gobject stays alive during the call to @c_handler
by temporarily adding a reference count to @gobject.

When the @gobject is destroyed the signal handler will be automatically
disconnected.  Note that this is not currently threadsafe (ie:
emitting a signal while @gobject is being destroyed in another thread
is not safe).</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gobject.h"
                       line="620"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4349">the handler id.</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4333">the instance to connect to.</doc>
          <type name="TypeInstance" c:type="gpointer"/>
        </parameter>
        <parameter name="detailed_signal" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4334">a string of the form "signal-name::detail".</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="c_handler" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4335">the #GCallback to connect.</doc>
          <type name="Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="gobject"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4336">the object to pass as data
   to @c_handler.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="connect_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4338">a combination of #GConnectFlags.</doc>
          <type name="ConnectFlags" c:type="GConnectFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_emit"
              c:identifier="g_signal_emit"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4353">Emits a signal.

Note that g_signal_emit() resets the return value to the default
if no handlers are connected, in contrast to g_signal_emitv().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="322"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4355">the instance the signal is being emitted on.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4356">the signal id</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4357">the detail</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4358">parameters to be passed to the signal, followed by a
 location for the return value. If the return type of the signal
 is #G_TYPE_NONE, the return value location can be omitted.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_emit_by_name"
              c:identifier="g_signal_emit_by_name"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4369">Emits a signal.

Note that g_signal_emit_by_name() resets the return value to the default
if no handlers are connected, in contrast to g_signal_emitv().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="327"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4371">the instance the signal is being emitted on.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="detailed_signal" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4372">a string of the form "signal-name::detail".</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4373">parameters to be passed to the signal, followed by a
 location for the return value. If the return type of the signal
 is #G_TYPE_NONE, the return value location can be omitted.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_emit_valist"
              c:identifier="g_signal_emit_valist"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4384">Emits a signal.

Note that g_signal_emit_valist() resets the return value to the default
if no handlers are connected, in contrast to g_signal_emitv().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="317"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4386">the instance the signal is being
   emitted on.</doc>
          <type name="TypeInstance" c:type="gpointer"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4388">the signal id</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4389">the detail</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="var_args" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4390">a list of parameters to be passed to the signal, followed by a
 location for the return value. If the return type of the signal
 is #G_TYPE_NONE, the return value location can be omitted.</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_emitv" c:identifier="g_signal_emitv">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4401">Emits a signal.

Note that g_signal_emitv() doesn't change @return_value if no handlers are
connected, in contrast to g_signal_emit() and g_signal_emit_valist().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="312"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance_and_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4403">argument list for the signal emission.
 The first element in the array is a #GValue for the instance the signal
 is being emitted on. The rest are any arguments to be passed to the signal.</doc>
          <array zero-terminated="0" c:type="const GValue*">
            <type name="Value" c:type="GValue"/>
          </array>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4406">the signal id</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4407">the detail</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="return_value"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4408">Location to
store the return value of the signal emission. This must be provided if the
specified signal returns a value, but may be ignored otherwise.</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_get_invocation_hint"
              c:identifier="g_signal_get_invocation_hint">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4419">Returns the invocation hint of the innermost signal emission of instance.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="348"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4425">the invocation hint of the innermost signal  emission.</doc>
        <type name="SignalInvocationHint" c:type="GSignalInvocationHint*"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4421">the instance to query</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_handler_block"
              c:identifier="g_signal_handler_block">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4429">Blocks a handler of an instance so it will not be called during any
signal emissions unless it is unblocked again. Thus "blocking" a
signal handler means to temporarily deactive it, a signal handler
has to be unblocked exactly the same amount of times it has been
blocked before to become active again.

The @handler_id has to be a valid signal handler id, connected to a
signal of @instance.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="395"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4431">The instance to block the signal handler of.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="handler_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4432">Handler id of the handler to be blocked.</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_handler_disconnect"
              c:identifier="g_signal_handler_disconnect">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4445">Disconnects a handler from an instance so it will not be called during
any future or currently ongoing emissions of the signal it has been
connected to. The @handler_id becomes invalid and may be reused.

The @handler_id has to be a valid signal handler id, connected to a
signal of @instance.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="401"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4447">The instance to remove the signal handler from.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="handler_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4448">Handler id of the handler to be disconnected.</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_handler_find" c:identifier="g_signal_handler_find">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4459">Finds the first signal handler that matches certain selection criteria.
The criteria mask is passed as an OR-ed combination of #GSignalMatchType
flags, and the criteria values are passed as arguments.
The match @mask has to be non-0 for successful matches.
If no handler was found, 0 is returned.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="407"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4476">A valid non-0 signal handler id for a successful match.</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4461">The instance owning the signal handler to be found.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4462">Mask indicating which of @signal_id, @detail, @closure, @func
 and/or @data the handler has to match.</doc>
          <type name="SignalMatchType" c:type="GSignalMatchType"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4464">Signal the handler has to be connected to.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4465">Signal detail the handler has to be connected to.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="closure"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4466">The closure the handler will invoke.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4467">The C closure callback of the handler (useless for non-C closures).</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4468">The closure data of the handler's closure.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_handler_is_connected"
              c:identifier="g_signal_handler_is_connected">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4480">Returns whether @handler_id is the ID of a handler connected to @instance.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="404"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4487">whether @handler_id identifies a handler connected to @instance.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4482">The instance where a signal handler is sought.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="handler_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4483">the handler ID.</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_handler_unblock"
              c:identifier="g_signal_handler_unblock">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4491">Undoes the effect of a previous g_signal_handler_block() call.  A
blocked handler is skipped during signal emissions and will not be
invoked, unblocking it (for exactly the amount of times it has been
blocked before) reverts its "blocked" state, so the handler will be
recognized by the signal system and is called upon future or
currently ongoing signal emissions (since the order in which
handlers are called during signal emissions is deterministic,
whether the unblocked handler in question is called as part of a
currently ongoing emission depends on how far that emission has
proceeded yet).

The @handler_id has to be a valid id of a signal handler that is
connected to a signal of @instance and is currently blocked.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="398"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4493">The instance to unblock the signal handler of.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="handler_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4494">Handler id of the handler to be unblocked.</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_handlers_block_matched"
              c:identifier="g_signal_handlers_block_matched">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4512">Blocks all handlers on an instance that match a certain selection criteria.
The criteria mask is passed as an OR-ed combination of #GSignalMatchType
flags, and the criteria values are passed as arguments.
Passing at least one of the %G_SIGNAL_MATCH_CLOSURE, %G_SIGNAL_MATCH_FUNC
or %G_SIGNAL_MATCH_DATA match flags is required for successful matches.
If no handlers were found, 0 is returned, the number of blocked handlers
otherwise.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="415"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4531">The number of handlers that matched.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4514">The instance to block handlers from.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4515">Mask indicating which of @signal_id, @detail, @closure, @func
 and/or @data the handlers have to match.</doc>
          <type name="SignalMatchType" c:type="GSignalMatchType"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4517">Signal the handlers have to be connected to.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4518">Signal detail the handlers have to be connected to.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="closure"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4519">The closure the handlers will invoke.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4520">The C closure callback of the handlers (useless for non-C closures).</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4521">The closure data of the handlers' closures.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_handlers_destroy"
              c:identifier="g_signal_handlers_destroy">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4535">Destroy all signal handlers of a type instance. This function is
an implementation detail of the #GObject dispose implementation,
and should not be used outside of the type system.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="602"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4537">The instance whose signal handlers are destroyed</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_handlers_disconnect_matched"
              c:identifier="g_signal_handlers_disconnect_matched">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4545">Disconnects all handlers on an instance that match a certain
selection criteria. The criteria mask is passed as an OR-ed
combination of #GSignalMatchType flags, and the criteria values are
passed as arguments.  Passing at least one of the
%G_SIGNAL_MATCH_CLOSURE, %G_SIGNAL_MATCH_FUNC or
%G_SIGNAL_MATCH_DATA match flags is required for successful
matches.  If no handlers were found, 0 is returned, the number of
disconnected handlers otherwise.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="431"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4565">The number of handlers that matched.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4547">The instance to remove handlers from.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4548">Mask indicating which of @signal_id, @detail, @closure, @func
 and/or @data the handlers have to match.</doc>
          <type name="SignalMatchType" c:type="GSignalMatchType"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4550">Signal the handlers have to be connected to.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4551">Signal detail the handlers have to be connected to.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="closure"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4552">The closure the handlers will invoke.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4553">The C closure callback of the handlers (useless for non-C closures).</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4554">The closure data of the handlers' closures.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_handlers_unblock_matched"
              c:identifier="g_signal_handlers_unblock_matched">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4569">Unblocks all handlers on an instance that match a certain selection
criteria. The criteria mask is passed as an OR-ed combination of
#GSignalMatchType flags, and the criteria values are passed as arguments.
Passing at least one of the %G_SIGNAL_MATCH_CLOSURE, %G_SIGNAL_MATCH_FUNC
or %G_SIGNAL_MATCH_DATA match flags is required for successful matches.
If no handlers were found, 0 is returned, the number of unblocked handlers
otherwise. The match criteria should not apply to any handlers that are
not currently blocked.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="423"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4589">The number of handlers that matched.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4571">The instance to unblock handlers from.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4572">Mask indicating which of @signal_id, @detail, @closure, @func
 and/or @data the handlers have to match.</doc>
          <type name="SignalMatchType" c:type="GSignalMatchType"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4574">Signal the handlers have to be connected to.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4575">Signal detail the handlers have to be connected to.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="closure"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4576">The closure the handlers will invoke.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4577">The C closure callback of the handlers (useless for non-C closures).</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4578">The closure data of the handlers' closures.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_has_handler_pending"
              c:identifier="g_signal_has_handler_pending">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4593">Returns whether there are any handlers connected to @instance for the
given signal id and detail.

If @detail is 0 then it will only match handlers that were connected
without detail.  If @detail is non-zero then it will match handlers
connected both without detail and with the given detail.  This is
consistent with how a signal emitted with @detail would be delivered
to those handlers.

Since 2.46 this also checks for a non-default class closure being
installed, as this is basically always what you want.

One example of when you might use this is when the arguments to the
signal are difficult to compute. A class implementor may opt to not
emit the signal if no one is attached anyway, thus saving the cost
of building the arguments.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="372"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4617">%TRUE if a handler is connected to the signal, %FALSE
         otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4595">the object whose signal handlers are sought.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4596">the signal id.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4597">the detail.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="may_be_blocked" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4598">whether blocked handlers should count as match.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_list_ids" c:identifier="g_signal_list_ids">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4622">Lists the signals by id that a certain instance or interface type
created. Further information about the signals can be acquired through
g_signal_query().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="339"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4631">Newly allocated array of signal IDs.</doc>
        <array length="1" zero-terminated="0" c:type="guint*">
          <type name="guint" c:type="guint"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="itype" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4624">Instance or interface type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="n_ids"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4625">Location to store the number of signal ids for @itype.</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_lookup" c:identifier="g_signal_lookup">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4635">Given the name of the signal and the type of object it connects to, gets
the signal's identifying integer. Emitting the signal by number is
somewhat faster than using the name each time.

Also tries the ancestors of the given type.

See g_signal_new() for details on allowed signal names.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="331"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4648">the signal's identifying number, or 0 if no signal was found.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4637">the signal's name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="itype" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4638">the type that the signal operates on.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_name" c:identifier="g_signal_name">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4652">Given the signal's identifier, finds its name.

Two different signals may have the same name, if they have differing types.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="334"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4660">the signal name, or %NULL if the signal number was invalid.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4654">the signal's identifying number.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_new" c:identifier="g_signal_new" introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4664">Creates a new signal. (This is usually done in the class initializer.)

A signal name consists of segments consisting of ASCII letters and
digits, separated by either the '-' or '_' character. The first
character of a signal name must be a letter. Names which violate these
rules lead to undefined behaviour of the GSignal system.

When registering a signal and looking up a signal, either separator can
be used, but they cannot be mixed.

If 0 is used for @class_offset subclasses cannot override the class handler
in their class_init method by doing super_class-&gt;signal_handler = my_signal_handler.
Instead they will have to use g_signal_override_class_handler().

If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
the marshaller for this signal.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="285"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4701">the signal id</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="signal_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4666">the name for the signal</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="itype" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4667">the type this signal pertains to. It will also pertain to
 types which are derived from this type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="signal_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4669">a combination of #GSignalFlags specifying detail of when
 the default handler is to be invoked. You should at least specify
 %G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST.</doc>
          <type name="SignalFlags" c:type="GSignalFlags"/>
        </parameter>
        <parameter name="class_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4672">The offset of the function pointer in the class structure
 for this type. Used to invoke a class method generically. Pass 0 to
 not associate a class method slot with this signal.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="accumulator" transfer-ownership="none" closure="5">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4675">the accumulator for this signal; may be %NULL.</doc>
          <type name="SignalAccumulator" c:type="GSignalAccumulator"/>
        </parameter>
        <parameter name="accu_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4676">user data for the @accumulator.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="c_marshaller"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4677">the function to translate arrays of parameter
 values to signal emissions into C language callback invocations or %NULL.</doc>
          <type name="SignalCMarshaller" c:type="GSignalCMarshaller"/>
        </parameter>
        <parameter name="return_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4679">the type of return value, or #G_TYPE_NONE for a signal
 without a return value.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="n_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4681">the number of parameter types to follow.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4682">a list of types, one for each parameter.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_new_class_handler"
              c:identifier="g_signal_new_class_handler"
              version="2.18"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4705">Creates a new signal. (This is usually done in the class initializer.)

This is a variant of g_signal_new() that takes a C callback instead
of a class offset for the signal's class handler. This function
doesn't need a function pointer exposed in the class structure of
an object definition, instead the function pointer is passed
directly and can be overriden by derived classes with
g_signal_override_class_closure() or
g_signal_override_class_handler()and chained to with
g_signal_chain_from_overridden() or
g_signal_chain_from_overridden_handler().

See g_signal_new() for information about signal names.

If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
the marshaller for this signal.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="296"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4742">the signal id</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="signal_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4707">the name for the signal</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="itype" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4708">the type this signal pertains to. It will also pertain to
 types which are derived from this type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="signal_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4710">a combination of #GSignalFlags specifying detail of when
 the default handler is to be invoked. You should at least specify
 %G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST.</doc>
          <type name="SignalFlags" c:type="GSignalFlags"/>
        </parameter>
        <parameter name="class_handler" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4713">a #GCallback which acts as class implementation of
 this signal. Used to invoke a class method generically. Pass %NULL to
 not associate a class method with this signal.</doc>
          <type name="Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="accumulator" transfer-ownership="none" closure="5">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4716">the accumulator for this signal; may be %NULL.</doc>
          <type name="SignalAccumulator" c:type="GSignalAccumulator"/>
        </parameter>
        <parameter name="accu_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4717">user data for the @accumulator.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="c_marshaller"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4718">the function to translate arrays of parameter
 values to signal emissions into C language callback invocations or %NULL.</doc>
          <type name="SignalCMarshaller" c:type="GSignalCMarshaller"/>
        </parameter>
        <parameter name="return_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4720">the type of return value, or #G_TYPE_NONE for a signal
 without a return value.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="n_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4722">the number of parameter types to follow.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4723">a list of types, one for each parameter.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_new_valist"
              c:identifier="g_signal_new_valist"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4747">Creates a new signal. (This is usually done in the class initializer.)

See g_signal_new() for details on allowed signal names.

If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
the marshaller for this signal.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="274"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4772">the signal id</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="signal_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4749">the name for the signal</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="itype" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4750">the type this signal pertains to. It will also pertain to
 types which are derived from this type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="signal_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4752">a combination of #GSignalFlags specifying detail of when
 the default handler is to be invoked. You should at least specify
 %G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST.</doc>
          <type name="SignalFlags" c:type="GSignalFlags"/>
        </parameter>
        <parameter name="class_closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4755">The closure to invoke on signal emission; may be %NULL.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="accumulator" transfer-ownership="none" closure="5">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4756">the accumulator for this signal; may be %NULL.</doc>
          <type name="SignalAccumulator" c:type="GSignalAccumulator"/>
        </parameter>
        <parameter name="accu_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4757">user data for the @accumulator.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="c_marshaller"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4758">the function to translate arrays of parameter
 values to signal emissions into C language callback invocations or %NULL.</doc>
          <type name="SignalCMarshaller" c:type="GSignalCMarshaller"/>
        </parameter>
        <parameter name="return_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4760">the type of return value, or #G_TYPE_NONE for a signal
 without a return value.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="n_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4762">the number of parameter types in @args.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4763">va_list of #GType, one for each parameter.</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_newv"
              c:identifier="g_signal_newv"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4776">Creates a new signal. (This is usually done in the class initializer.)

See g_signal_new() for details on allowed signal names.

If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
the marshaller for this signal.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="263"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4804">the signal id</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="signal_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4778">the name for the signal</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="itype" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4779">the type this signal pertains to. It will also pertain to
    types which are derived from this type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="signal_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4781">a combination of #GSignalFlags specifying detail of when
    the default handler is to be invoked. You should at least specify
    %G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST</doc>
          <type name="SignalFlags" c:type="GSignalFlags"/>
        </parameter>
        <parameter name="class_closure"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4784">The closure to invoke on signal emission;
    may be %NULL</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="accumulator"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4786">the accumulator for this signal; may be %NULL</doc>
          <type name="SignalAccumulator" c:type="GSignalAccumulator"/>
        </parameter>
        <parameter name="accu_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4787">user data for the @accumulator</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="c_marshaller"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4788">the function to translate arrays of
    parameter values to signal emissions into C language callback
    invocations or %NULL</doc>
          <type name="SignalCMarshaller" c:type="GSignalCMarshaller"/>
        </parameter>
        <parameter name="return_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4791">the type of return value, or #G_TYPE_NONE for a signal
    without a return value</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="n_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4793">the length of @param_types</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_types" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4794">an array of types, one for
    each parameter</doc>
          <array length="8" zero-terminated="0" c:type="GType*">
            <type name="GType" c:type="GType"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="signal_override_class_closure"
              c:identifier="g_signal_override_class_closure">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4808">Overrides the class closure (i.e. the default handler) for the given signal
for emissions on instances of @instance_type. @instance_type must be derived
from the type to which the signal belongs.

See g_signal_chain_from_overridden() and
g_signal_chain_from_overridden_handler() for how to chain up to the
parent class closure from inside the overridden one.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="442"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4810">the signal id</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="instance_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4811">the instance type on which to override the class closure
 for the signal.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="class_closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4813">the closure.</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_override_class_handler"
              c:identifier="g_signal_override_class_handler"
              version="2.18"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4825">Overrides the class closure (i.e. the default handler) for the
given signal for emissions on instances of @instance_type with
callback @class_handler. @instance_type must be derived from the
type to which the signal belongs.

See g_signal_chain_from_overridden() and
g_signal_chain_from_overridden_handler() for how to chain up to the
parent class closure from inside the overridden one.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="446"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="signal_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4827">the name for the signal</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="instance_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4828">the instance type on which to override the class handler
 for the signal.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="class_handler" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4830">the handler.</doc>
          <type name="Callback" c:type="GCallback"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_parse_name" c:identifier="g_signal_parse_name">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4845">Internal function to parse a signal name into its @signal_id
and @detail quark.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="342"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4856">Whether the signal name could successfully be parsed and @signal_id_p and @detail_p contain valid return values.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="detailed_signal" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4847">a string of the form "signal-name::detail".</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="itype" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4848">The interface/instance type that introduced "signal-name".</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="signal_id_p"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4849">Location to store the signal id.</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="detail_p"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4850">Location to store the detail quark.</doc>
          <type name="GLib.Quark" c:type="GQuark*"/>
        </parameter>
        <parameter name="force_detail_quark" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4851">%TRUE forces creation of a #GQuark for the detail.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_query" c:identifier="g_signal_query">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4860">Queries the signal system for in-depth information about a
specific signal. This function will fill in a user-provided
structure to hold signal-specific information. If an invalid
signal id is passed in, the @signal_id member of the #GSignalQuery
is 0. All members filled into the #GSignalQuery structure should
be considered constant and have to be left untouched.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="336"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4862">The signal id of the signal to query information for.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="query"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4863">A user provided structure that is
 filled in with constant values upon success.</doc>
          <type name="SignalQuery" c:type="GSignalQuery*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_remove_emission_hook"
              c:identifier="g_signal_remove_emission_hook">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4875">Deletes an emission hook.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="366"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4877">the id of the signal</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="hook_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4878">the id of the emission hook, as returned by
 g_signal_add_emission_hook()</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_set_va_marshaller"
              c:identifier="g_signal_set_va_marshaller"
              version="2.32">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4885">Change the #GSignalCVaMarshaller used for a given signal.  This is a
specialised form of the marshaller that can often be used for the
common case of a single connected signal handler and avoids the
overhead of #GValue.  Its use is optional.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="307"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4887">the signal id</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="instance_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4888">the instance type on which to set the marshaller.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="va_marshaller" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4889">the marshaller to set.</doc>
          <type name="SignalCVaMarshaller" c:type="GSignalCVaMarshaller"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_stop_emission"
              c:identifier="g_signal_stop_emission">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4900">Stops a signal's current emission.

This will prevent the default method from running, if the signal was
%G_SIGNAL_RUN_LAST and you connected normally (i.e. without the "after"
flag).

Prints a warning if used on a signal which isn't being emitted.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="353"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4902">the object whose signal handlers you wish to stop.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4903">the signal identifier, as returned by g_signal_lookup().</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4904">the detail which the signal was emitted with.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_stop_emission_by_name"
              c:identifier="g_signal_stop_emission_by_name">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4916">Stops a signal's current emission.

This is just like g_signal_stop_emission() except it will look up the
signal id for you.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsignal.h"
                       line="357"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4918">the object whose signal handlers you wish to stop.</doc>
          <type name="Object" c:type="gpointer"/>
        </parameter>
        <parameter name="detailed_signal" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4919">a string of the form "signal-name::detail".</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_type_cclosure_new"
              c:identifier="g_signal_type_cclosure_new">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4928">Creates a new closure which invokes the function found at the offset
@struct_offset in the class structure of the interface or classed type
identified by @itype.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gclosure.h"
                       line="233"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4938">a floating reference to a new #GCClosure</doc>
        <type name="Closure" c:type="GClosure*"/>
      </return-value>
      <parameters>
        <parameter name="itype" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4930">the #GType identifier of an interface or classed type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="struct_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4931">the offset of the member function of @itype's class
 structure which is to be invoked by the new closure</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="source_set_closure" c:identifier="g_source_set_closure">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4942">Set the callback for a source as a #GClosure.

If the source is not one of the standard GLib types, the @closure_callback
and @closure_marshal fields of the #GSourceFuncs structure must have been
filled in with pointers to appropriate functions.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsourceclosure.h"
                       line="30"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4944">the source</doc>
          <type name="GLib.Source" c:type="GSource*"/>
        </parameter>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4945">a #GClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
      </parameters>
    </function>
    <function name="source_set_dummy_callback"
              c:identifier="g_source_set_dummy_callback">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4955">Sets a dummy callback for @source. The callback will do nothing, and
if the source expects a #gboolean return value, it will return %TRUE.
(If the source expects any other type of return value, it will return
a 0/%NULL value; whatever g_value_init() initializes a #GValue to for
that type.)

If the source is not one of the standard GLib types, the
@closure_callback and @closure_marshal fields of the #GSourceFuncs
structure must have been filled in with pointers to appropriate
functions.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gsourceclosure.h"
                       line="34"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4957">the source</doc>
          <type name="GLib.Source" c:type="GSource*"/>
        </parameter>
      </parameters>
    </function>
    <function name="strdup_value_contents"
              c:identifier="g_strdup_value_contents">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4972">Return a newly allocated string, which describes the contents of a
#GValue.  The main purpose of this function is to describe #GValue
contents for debugging output, the way in which the contents are
described may change between different GLib versions.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvaluetypes.h"
                       line="278"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="4981">Newly allocated string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4974">#GValue which contents are to be described.</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_add_class_cache_func"
              c:identifier="g_type_add_class_cache_func"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="4985">Adds a #GTypeClassCacheFunc to be called before the reference count of a
class goes from one to zero. This can be used to prevent premature class
destruction. All installed #GTypeClassCacheFunc functions will be chained
until one of them returns %TRUE. The functions have to check the class id
passed in to figure whether they actually want to cache the class of this
type, since all classes are routed through the same #GTypeClassCacheFunc
chain.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2218"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cache_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4987">data to be passed to @cache_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="cache_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="4988">a #GTypeClassCacheFunc</doc>
          <type name="TypeClassCacheFunc" c:type="GTypeClassCacheFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_add_class_private"
              c:identifier="g_type_add_class_private"
              version="2.24">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5000">Registers a private class structure for a classed type;
when the class is allocated, the private structures for
the class and all of its parent types are allocated
sequentially in the same memory block as the public
structures, and are zero-filled.

This function should be called in the
type's get_type() function after the type is registered.
The private structure can be retrieved using the
G_TYPE_CLASS_GET_PRIVATE() macro.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1316"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="class_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5002">GType of an classed type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="private_size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5003">size of private structure</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_add_instance_private"
              c:identifier="g_type_add_instance_private">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1306"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="class_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="private_size" transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_add_interface_check"
              c:identifier="g_type_add_interface_check"
              version="2.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5020">Adds a function to be called after an interface vtable is
initialized for any class (i.e. after the @interface_init
member of #GInterfaceInfo has been called).

This function is useful when you want to check an invariant
that depends on the interfaces of a class. For instance, the
implementation of #GObject uses this facility to check that an
object implements all of the properties that are defined on its
interfaces.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2227"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="check_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5022">data to pass to @check_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="check_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5023">function to be called after each interface
    is initialized</doc>
          <type name="TypeInterfaceCheckFunc"
                c:type="GTypeInterfaceCheckFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_add_interface_dynamic"
              c:identifier="g_type_add_interface_dynamic">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5040">Adds the dynamic @interface_type to @instantiable_type. The information
contained in the #GTypePlugin structure pointed to by @plugin
is used to manage the relationship.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1293"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5042">#GType value of an instantiable type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="interface_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5043">#GType value of an interface type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5044">#GTypePlugin structure to retrieve the #GInterfaceInfo from</doc>
          <type name="TypePlugin" c:type="GTypePlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_add_interface_static"
              c:identifier="g_type_add_interface_static">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5052">Adds the static @interface_type to @instantiable_type.
The information contained in the #GInterfaceInfo structure
pointed to by @info is used to manage the relationship.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1289"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5054">#GType value of an instantiable type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="interface_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5055">#GType value of an interface type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5056">#GInterfaceInfo structure for this
       (@instance_type, @interface_type) combination</doc>
          <type name="InterfaceInfo" c:type="const GInterfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_check_class_cast"
              c:identifier="g_type_check_class_cast"
              introspectable="0">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2250"/>
      <return-value>
        <type name="TypeClass" c:type="GTypeClass*"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <type name="TypeClass" c:type="GTypeClass*"/>
        </parameter>
        <parameter name="is_a_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_check_class_is_a"
              c:identifier="g_type_check_class_is_a">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2253"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <type name="TypeClass" c:type="GTypeClass*"/>
        </parameter>
        <parameter name="is_a_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_check_instance" c:identifier="g_type_check_instance">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5065">Private helper function to aid implementation of the
G_TYPE_CHECK_INSTANCE() macro.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2239"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5072">%TRUE if @instance is valid, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5067">a valid #GTypeInstance structure</doc>
          <type name="TypeInstance" c:type="GTypeInstance*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_check_instance_cast"
              c:identifier="g_type_check_instance_cast"
              introspectable="0">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2241"/>
      <return-value>
        <type name="TypeInstance" c:type="GTypeInstance*"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <type name="TypeInstance" c:type="GTypeInstance*"/>
        </parameter>
        <parameter name="iface_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_check_instance_is_a"
              c:identifier="g_type_check_instance_is_a">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2244"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <type name="TypeInstance" c:type="GTypeInstance*"/>
        </parameter>
        <parameter name="iface_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_check_instance_is_fundamentally_a"
              c:identifier="g_type_check_instance_is_fundamentally_a">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2247"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <type name="TypeInstance" c:type="GTypeInstance*"/>
        </parameter>
        <parameter name="fundamental_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_check_is_value_type"
              c:identifier="g_type_check_is_value_type">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2256"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_check_value" c:identifier="g_type_check_value">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2258"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_check_value_holds"
              c:identifier="g_type_check_value_holds">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2260"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_children" c:identifier="g_type_children">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5076">Return a newly allocated and 0-terminated array of type IDs, listing
the child types of @type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="732"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5085">Newly allocated
    and 0-terminated array of child types, free with g_free()</doc>
        <array length="1" zero-terminated="0" c:type="GType*">
          <type name="GType" c:type="GType"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5078">the parent type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="n_children"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5079">location to store the length of
    the returned array, or %NULL</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_class_adjust_private_offset"
              c:identifier="g_type_class_adjust_private_offset"
              moved-to="TypeClass.adjust_private_offset">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1312"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_class"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="private_size_or_offset" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_class_peek"
              c:identifier="g_type_class_peek"
              moved-to="TypeClass.peek">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5183">This function is essentially the same as g_type_class_ref(),
except that the classes reference count isn't incremented.
As a consequence, this function may return %NULL if the class
of the type passed in does not currently exist (hasn't been
referenced before).</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="710"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5193">the #GTypeClass
    structure for the given type ID or %NULL if the class does not
    currently exist</doc>
        <type name="TypeClass" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5185">type ID of a classed type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_class_peek_static"
              c:identifier="g_type_class_peek_static"
              moved-to="TypeClass.peek_static"
              version="2.4">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5218">A more efficient version of g_type_class_peek() which works only for
static types.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="712"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5225">the #GTypeClass
    structure for the given type ID or %NULL if the class does not
    currently exist or is dynamically loaded</doc>
        <type name="TypeClass" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5220">type ID of a classed type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_class_ref"
              c:identifier="g_type_class_ref"
              moved-to="TypeClass.ref">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5232">Increments the reference count of the class structure belonging to
@type. This function will demand-create the class if it doesn't
exist already.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="708"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5240">the #GTypeClass
    structure for the given type ID</doc>
        <type name="TypeClass" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5234">type ID of a classed type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_create_instance"
              c:identifier="g_type_create_instance"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5267">Creates and initializes an instance of @type if @type is valid and
can be instantiated. The type system only performs basic allocation
and structure setups for instances: actual instance creation should
happen through functions supplied by the type's fundamental type
implementation.  So use of g_type_create_instance() is reserved for
implementators of fundamental types only. E.g. instances of the
#GObject hierarchy should be created via g_object_new() and never
directly through g_type_create_instance() which doesn't handle things
like singleton objects or object construction.

The extended members of the returned instance are guaranteed to be filled
with zeros.

Note: Do not use this function, unless you're implementing a
fundamental type. Also language bindings should not use this
function, but g_object_new() instead.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2213"/>
      <return-value>
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5288">an allocated and initialized instance, subject to further
    treatment by the fundamental type implementation</doc>
        <type name="TypeInstance" c:type="GTypeInstance*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5269">an instantiatable type to create an instance for</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_default_interface_peek"
              c:identifier="g_type_default_interface_peek"
              version="2.4">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5293">If the interface type @g_type is currently in use, returns its
default interface vtable.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="726"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5301">the default
    vtable for the interface, or %NULL if the type is not currently
    in use</doc>
        <type name="TypeInterface" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="g_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5295">an interface type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_default_interface_ref"
              c:identifier="g_type_default_interface_ref"
              version="2.4">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5307">Increments the reference count for the interface type @g_type,
and returns the default interface vtable for the type.

If the type is not currently in use, then the default vtable
for the type will be created and initalized by calling
the base interface init and default vtable init functions for
the type (the @base_init and @class_init members of #GTypeInfo).
Calling g_type_default_interface_ref() is useful when you
want to make sure that signals and properties for an interface
have been installed.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="724"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5323">the default
    vtable for the interface; call g_type_default_interface_unref()
    when you are done using the interface.</doc>
        <type name="TypeInterface" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="g_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5309">an interface type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_default_interface_unref"
              c:identifier="g_type_default_interface_unref"
              version="2.4">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5329">Decrements the reference count for the type corresponding to the
interface default vtable @g_iface. If the type is dynamic, then
when no one is using the interface and all references have
been released, the finalize function for the interface's default
vtable (the @class_finalize member of #GTypeInfo) will be called.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="728"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5331">the default vtable
    structure for a interface, as returned by g_type_default_interface_ref()</doc>
          <type name="TypeInterface" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_depth" c:identifier="g_type_depth">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5344">Returns the length of the ancestry of the passed in type. This
includes the type itself, so that e.g. a fundamental type has depth 1.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="700"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5351">the depth of @type</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5346">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_ensure" c:identifier="g_type_ensure" version="2.34">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5355">Ensures that the indicated @type has been registered with the
type system, and its _class_init() method has been run.

In theory, simply calling the type's _get_type() method (or using
the corresponding macro) is supposed take care of this. However,
_get_type() methods are often marked %G_GNUC_CONST for performance
reasons, even though this is technically incorrect (since
%G_GNUC_CONST requires that the function not have side effects,
which _get_type() methods do on the first call). As a result, if
you write a bare call to a _get_type() macro, it may get optimized
out by the compiler. Using g_type_ensure() guarantees that the
type's _get_type() method is called.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1325"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5357">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_free_instance" c:identifier="g_type_free_instance">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5376">Frees an instance of a type, returning it to the instance pool for
the type, if there is one.

Like g_type_create_instance(), this function is reserved for
implementors of fundamental types.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2215"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5378">an instance of a type</doc>
          <type name="TypeInstance" c:type="GTypeInstance*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_from_name" c:identifier="g_type_from_name">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5388">Lookup the type ID from a given type name, returning 0 if no type
has been registered under this name (this is the preferred method
to find out by name whether a specific type has been registered
yet).</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="696"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5397">corresponding type ID or 0</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5390">type name to lookup</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_fundamental" c:identifier="g_type_fundamental">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5401">Internal function, used to extract the fundamental type ID portion.
Use G_TYPE_FUNDAMENTAL() instead.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2211"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5408">fundamental type ID</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="type_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5403">valid type ID</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_fundamental_next"
              c:identifier="g_type_fundamental_next">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5412">Returns the next free fundamental type id which can be used to
register a new fundamental type with g_type_register_fundamental().
The returned type ID represents the highest currently registered
fundamental type identifier.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2209"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5420">the next available fundamental type ID to be registered,
    or 0 if the type system ran out of fundamental type IDs</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="type_get_instance_count"
              c:identifier="g_type_get_instance_count"
              version="2.44">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5425">Returns the number of instances allocated of the particular type;
this is only available if GLib is built with debugging support and
the instance_count debug flag is set (by setting the GOBJECT_DEBUG
variable to include instance-count).</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="751"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5434">the number of instances allocated of the given type;
  if instance counts are not available, returns 0.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5427">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_get_plugin" c:identifier="g_type_get_plugin">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5440">Returns the #GTypePlugin structure for @type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2204"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5446">the corresponding plugin
    if @type is a dynamic type, %NULL otherwise</doc>
        <type name="TypePlugin" c:type="GTypePlugin*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5442">#GType to retrieve the plugin for</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_get_qdata" c:identifier="g_type_get_qdata">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5451">Obtains data which has previously been attached to @type
with g_type_set_qdata().

Note that this does not take subtyping into account; data
attached to one type with g_type_set_qdata() cannot
be retrieved from a subtype using g_type_get_qdata().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="744"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5463">the data, or %NULL if no data was found</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5453">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="quark" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5454">a #GQuark id to identify the data</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_get_type_registration_serial"
              c:identifier="g_type_get_type_registration_serial"
              version="2.36">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5467">Returns an opaque serial number that represents the state of the set
of registered types. Any time a type is registered this serial changes,
which means you can cache information based on type lookups (such as
g_type_from_name()) and know if the cache is still valid at a later
time by comparing the current serial with the one at the type lookup.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1327"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5477">An unsigned int, representing the state of type registrations</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="type_init"
              c:identifier="g_type_init"
              deprecated="1"
              deprecated-version="2.36">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5481">This function used to initialise the type system.  Since GLib 2.36,
the type system is initialised automatically and this function does
nothing.</doc>
      <doc-deprecated xml:space="preserve">the type system is now initialised automatically</doc-deprecated>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="688"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="type_init_with_debug_flags"
              c:identifier="g_type_init_with_debug_flags"
              deprecated="1"
              deprecated-version="2.36">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5492">This function used to initialise the type system with debugging
flags.  Since GLib 2.36, the type system is initialised automatically
and this function does nothing.

If you need to enable debugging features, use the GOBJECT_DEBUG
environment variable.</doc>
      <doc-deprecated xml:space="preserve">the type system is now initialised automatically</doc-deprecated>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="690"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="debug_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5494">bitwise combination of #GTypeDebugFlags values for
    debugging purposes</doc>
          <type name="TypeDebugFlags" c:type="GTypeDebugFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_interface_add_prerequisite"
              c:identifier="g_type_interface_add_prerequisite"
              moved-to="TypeInterface.add_prerequisite">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5508">Adds @prerequisite_type to the list of prerequisites of @interface_type.
This means that any type implementing @interface_type must also implement
@prerequisite_type. Prerequisites can be thought of as an alternative to
interface derivation (which GType doesn't support). An interface can have
at most one instantiatable prerequisite type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1297"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="interface_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5510">#GType value of an interface type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="prerequisite_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5511">#GType value of an interface or instantiatable type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_interface_get_plugin"
              c:identifier="g_type_interface_get_plugin"
              moved-to="TypeInterface.get_plugin">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5521">Returns the #GTypePlugin structure for the dynamic interface
@interface_type which has been added to @instance_type, or %NULL
if @interface_type has not been added to @instance_type or does
not have a #GTypePlugin structure. See g_type_add_interface_dynamic().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2206"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5531">the #GTypePlugin for the dynamic
    interface @interface_type of @instance_type</doc>
        <type name="TypePlugin" c:type="GTypePlugin*"/>
      </return-value>
      <parameters>
        <parameter name="instance_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5523">#GType of an instantiatable type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="interface_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5524">#GType of an interface type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_interface_peek"
              c:identifier="g_type_interface_peek"
              moved-to="TypeInterface.peek">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5536">Returns the #GTypeInterface structure of an interface to which the
passed in class conforms.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="718"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5544">the #GTypeInterface
    structure of @iface_type if implemented by @instance_class, %NULL
    otherwise</doc>
        <type name="TypeInterface" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="instance_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5538">a #GTypeClass structure</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5539">an interface ID which this class conforms to</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_interface_prerequisites"
              c:identifier="g_type_interface_prerequisites"
              moved-to="TypeInterface.prerequisites"
              version="2.2">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5566">Returns the prerequisites of an interfaces type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1300"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5575">a
    newly-allocated zero-terminated array of #GType containing
    the prerequisites of @interface_type</doc>
        <array length="1" zero-terminated="0" c:type="GType*">
          <type name="GType" c:type="GType"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="interface_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5568">an interface type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="n_prerequisites"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5569">location to return the number
    of prerequisites, or %NULL</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_interfaces" c:identifier="g_type_interfaces">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5581">Return a newly allocated and 0-terminated array of type IDs, listing
the interface types that @type conforms to.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="735"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5590">Newly allocated
    and 0-terminated array of interface types, free with g_free()</doc>
        <array length="1" zero-terminated="0" c:type="GType*">
          <type name="GType" c:type="GType"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5583">the type to list interface types for</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="n_interfaces"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5584">location to store the length of
    the returned array, or %NULL</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_is_a" c:identifier="g_type_is_a">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5595">If @is_a_type is a derivable type, check whether @type is a
descendant of @is_a_type. If @is_a_type is an interface, check
whether @type conforms to it.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="705"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5605">%TRUE if @type is a @is_a_type</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5597">type to check anchestry for</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="is_a_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5598">possible anchestor of @type or interface that @type
    could conform to</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_name" c:identifier="g_type_name">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5740">Get the unique name that is assigned to a type ID.  Note that this
function (like all other GType API) cannot cope with invalid type
IDs. %G_TYPE_INVALID may be passed to this function, as may be any
other validly registered type ID, but randomized type IDs should
not be passed in and will most likely lead to a crash.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="692"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5750">static type name or %NULL</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5742">type to return name for</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_name_from_class"
              c:identifier="g_type_name_from_class">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2271"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <type name="TypeClass" c:type="GTypeClass*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_name_from_instance"
              c:identifier="g_type_name_from_instance">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2269"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <type name="TypeInstance" c:type="GTypeInstance*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_next_base" c:identifier="g_type_next_base">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5754">Given a @leaf_type and a @root_type which is contained in its
anchestry, return the type that @root_type is the immediate parent
of. In other words, this function determines the type that is
derived directly from @root_type which is also a base class of
@leaf_type.  Given a root type and a leaf type, this function can
be used to determine the types and order in which the leaf type is
descended from the root type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="702"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5767">immediate child of @root_type and anchestor of @leaf_type</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="leaf_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5756">descendant of @root_type and the type to be returned</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="root_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5757">immediate parent of the returned type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_parent" c:identifier="g_type_parent">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5771">Return the direct parent type of the passed in type. If the passed
in type has no parent, i.e. is a fundamental type, 0 is returned.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="698"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5778">the parent type</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5773">the derived type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_qname" c:identifier="g_type_qname">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5829">Get the corresponding quark of the type IDs name.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="694"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5835">the type names quark or 0</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5831">type to return quark of type name for</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_query" c:identifier="g_type_query">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5839">Queries the type system for information about a specific type.
This function will fill in a user-provided structure to hold
type-specific information. If an invalid #GType is passed in, the
@type member of the #GTypeQuery is 0. All members filled into the
#GTypeQuery structure should be considered constant and have to be
left untouched.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="747"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5841">#GType of a static, classed type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="query"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5842">a user provided structure that is
    filled in with constant values upon success</doc>
          <type name="TypeQuery" c:type="GTypeQuery*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_register_dynamic"
              c:identifier="g_type_register_dynamic">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5854">Registers @type_name as the name of a new dynamic type derived from
@parent_type.  The type system uses the information contained in the
#GTypePlugin structure pointed to by @plugin to manage the type and its
instances (if not abstract).  The value of @flags determines the nature
(e.g. abstract or not) of the type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1278"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5867">the new type identifier or #G_TYPE_INVALID if registration failed</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="parent_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5856">type from which this type will be derived</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="type_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5857">0-terminated string used as the name of the new type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5858">#GTypePlugin structure to retrieve the #GTypeInfo from</doc>
          <type name="TypePlugin" c:type="GTypePlugin*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5859">bitwise combination of #GTypeFlags values</doc>
          <type name="TypeFlags" c:type="GTypeFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_register_fundamental"
              c:identifier="g_type_register_fundamental">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5871">Registers @type_id as the predefined identifier and @type_name as the
name of a fundamental type. If @type_id is already registered, or a
type named @type_name is already registered, the behaviour is undefined.
The type system uses the information contained in the #GTypeInfo structure
pointed to by @info and the #GTypeFundamentalInfo structure pointed to by
@finfo to manage the type and its instances. The value of @flags determines
additional characteristics of the fundamental type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1283"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5887">the predefined type identifier</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="type_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5873">a predefined type identifier</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="type_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5874">0-terminated string used as the name of the new type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5875">#GTypeInfo structure for this type</doc>
          <type name="TypeInfo" c:type="const GTypeInfo*"/>
        </parameter>
        <parameter name="finfo" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5876">#GTypeFundamentalInfo structure for this type</doc>
          <type name="TypeFundamentalInfo"
                c:type="const GTypeFundamentalInfo*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5877">bitwise combination of #GTypeFlags values</doc>
          <type name="TypeFlags" c:type="GTypeFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_register_static"
              c:identifier="g_type_register_static">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5891">Registers @type_name as the name of a new static type derived from
@parent_type. The type system uses the information contained in the
#GTypeInfo structure pointed to by @info to manage the type and its
instances (if not abstract). The value of @flags determines the nature
(e.g. abstract or not) of the type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1264"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5904">the new type identifier</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="parent_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5893">type from which this type will be derived</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="type_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5894">0-terminated string used as the name of the new type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5895">#GTypeInfo structure for this type</doc>
          <type name="TypeInfo" c:type="const GTypeInfo*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5896">bitwise combination of #GTypeFlags values</doc>
          <type name="TypeFlags" c:type="GTypeFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_register_static_simple"
              c:identifier="g_type_register_static_simple"
              version="2.12"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5908">Registers @type_name as the name of a new static type derived from
@parent_type.  The value of @flags determines the nature (e.g.
abstract or not) of the type. It works by filling a #GTypeInfo
struct and calling g_type_register_static().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="1269"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5924">the new type identifier</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="parent_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5910">type from which this type will be derived</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="type_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5911">0-terminated string used as the name of the new type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="class_size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5912">size of the class structure (see #GTypeInfo)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="class_init" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5913">location of the class initialization function (see #GTypeInfo)</doc>
          <type name="ClassInitFunc" c:type="GClassInitFunc"/>
        </parameter>
        <parameter name="instance_size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5914">size of the instance structure (see #GTypeInfo)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="instance_init" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5915">location of the instance initialization function (see #GTypeInfo)</doc>
          <type name="InstanceInitFunc" c:type="GInstanceInitFunc"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5916">bitwise combination of #GTypeFlags values</doc>
          <type name="TypeFlags" c:type="GTypeFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_remove_class_cache_func"
              c:identifier="g_type_remove_class_cache_func"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5928">Removes a previously installed #GTypeClassCacheFunc. The cache
maintained by @cache_func has to be empty when calling
g_type_remove_class_cache_func() to avoid leaks.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2221"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cache_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5930">data that was given when adding @cache_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="cache_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5931">a #GTypeClassCacheFunc</doc>
          <type name="TypeClassCacheFunc" c:type="GTypeClassCacheFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_remove_interface_check"
              c:identifier="g_type_remove_interface_check"
              version="2.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5939">Removes an interface check function added with
g_type_add_interface_check().</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2230"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="check_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5941">callback data passed to g_type_add_interface_check()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="check_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5942">callback function passed to g_type_add_interface_check()</doc>
          <type name="TypeInterfaceCheckFunc"
                c:type="GTypeInterfaceCheckFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_set_qdata" c:identifier="g_type_set_qdata">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5951">Attaches arbitrary data to a type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="740"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5953">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="quark" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5954">a #GQuark id to identify the data</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5955">the data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_test_flags" c:identifier="g_type_test_flags">
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2263"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_value_table_peek"
              c:identifier="g_type_value_table_peek"
              moved-to="TypeValueTable.peek"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="5961">Returns the location of the #GTypeValueTable associated with @type.

Note that this function should only be used from source code
that implements or has internal knowledge of the implementation of
@type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gtype.h"
                       line="2234"/>
      <return-value>
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="5971">location of the #GTypeValueTable associated with @type or
    %NULL if there is no #GTypeValueTable associated with @type</doc>
        <type name="TypeValueTable" c:type="GTypeValueTable*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="5963">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_register_transform_func"
              c:identifier="g_value_register_transform_func"
              moved-to="Value.register_transform_func"
              introspectable="0">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="6447">Registers a value transformation function for use in g_value_transform().
A previously registered transformation function for @src_type and @dest_type
will be replaced.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                       line="165"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6449">Source type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="dest_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6450">Target type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="transform_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6451">a function which transforms values of type @src_type
 into value of type @dest_type</doc>
          <type name="ValueTransform" c:type="GValueTransform"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_type_compatible"
              c:identifier="g_value_type_compatible"
              moved-to="Value.type_compatible">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="6849">Returns whether a #GValue of type @src_type can be copied into
a #GValue of type @dest_type.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                       line="156"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6857">%TRUE if g_value_copy() is possible with @src_type and @dest_type.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="src_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6851">source type to be copied.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="dest_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6852">destination type for copying.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_type_transformable"
              c:identifier="g_value_type_transformable"
              moved-to="Value.type_transformable">
      <doc xml:space="preserve"
           filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
           line="6861">Check whether g_value_transform() is able to transform values
of type @src_type into values of type @dest_type. Note that for
the types to be transformable, they must be compatible or a
transformation function must be registered.</doc>
      <source-position filename="recipe-sysroot/usr/include/glib-2.0/gobject/gvalue.h"
                       line="159"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
             line="6871">%TRUE if the transformation is possible, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="src_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6863">Source type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="dest_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject-introspection-1.60.2/gir/gobject-2.0.c"
               line="6864">Target type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
